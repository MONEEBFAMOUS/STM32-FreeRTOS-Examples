
5_ChangingPriorityInRunTime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cf4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004e84  08004e84  00005e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef4  08004ef4  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004ef4  08004ef4  00005ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004efc  08004efc  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004efc  08004efc  00005efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f00  08004f00  00005f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004f04  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          00004a14  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004a24  20004a24  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001609b  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003036  00000000  00000000  0001c0db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  0001f118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f61  00000000  00000000  000204d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003a2f  00000000  00000000  00021439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001576b  00000000  00000000  00024e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d55da  00000000  00000000  0003a5d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010fbad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053a8  00000000  00000000  0010fbf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00114f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e6c 	.word	0x08004e6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004e6c 	.word	0x08004e6c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:


//------------------------------------------------------------------------------

int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af02      	add	r7, sp, #8

  HAL_Init();
 80004c6:	f000 faab 	bl	8000a20 <HAL_Init>
  SystemClock_Config();
 80004ca:	f000 f871 	bl	80005b0 <SystemClock_Config>
  MX_GPIO_Init();
 80004ce:	f000 f915 	bl	80006fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d2:	f000 f8d7 	bl	8000684 <MX_USART2_UART_Init>

  xTaskCreate(vBlueLedControllerTask,
 80004d6:	4b11      	ldr	r3, [pc, #68]	@ (800051c <main+0x5c>)
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	2302      	movs	r3, #2
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2300      	movs	r3, #0
 80004e0:	2264      	movs	r2, #100	@ 0x64
 80004e2:	490f      	ldr	r1, [pc, #60]	@ (8000520 <main+0x60>)
 80004e4:	480f      	ldr	r0, [pc, #60]	@ (8000524 <main+0x64>)
 80004e6:	f002 fdd7 	bl	8003098 <xTaskCreate>
			  100,
			  NULL,
			  2,
			  &blue_handle);

  xTaskCreate(vRedLedControllerTask,
 80004ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000528 <main+0x68>)
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	2302      	movs	r3, #2
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	2300      	movs	r3, #0
 80004f4:	2264      	movs	r2, #100	@ 0x64
 80004f6:	490d      	ldr	r1, [pc, #52]	@ (800052c <main+0x6c>)
 80004f8:	480d      	ldr	r0, [pc, #52]	@ (8000530 <main+0x70>)
 80004fa:	f002 fdcd 	bl	8003098 <xTaskCreate>
			  100,
			  NULL,
			  2,
			  &red_handle);

  xTaskCreate(vGreenLedControllerTask,
 80004fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <main+0x74>)
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2301      	movs	r3, #1
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2300      	movs	r3, #0
 8000508:	2264      	movs	r2, #100	@ 0x64
 800050a:	490b      	ldr	r1, [pc, #44]	@ (8000538 <main+0x78>)
 800050c:	480b      	ldr	r0, [pc, #44]	@ (800053c <main+0x7c>)
 800050e:	f002 fdc3 	bl	8003098 <xTaskCreate>
			  100,
			  NULL,
			  1,
			  &green_handle);

  vTaskStartScheduler();
 8000512:	f002 ffa5 	bl	8003460 <vTaskStartScheduler>

  while (1)
 8000516:	bf00      	nop
 8000518:	e7fd      	b.n	8000516 <main+0x56>
 800051a:	bf00      	nop
 800051c:	20000080 	.word	0x20000080
 8000520:	08004e84 	.word	0x08004e84
 8000524:	08000541 	.word	0x08000541
 8000528:	20000084 	.word	0x20000084
 800052c:	08004e98 	.word	0x08004e98
 8000530:	08000559 	.word	0x08000559
 8000534:	20000088 	.word	0x20000088
 8000538:	08004eac 	.word	0x08004eac
 800053c:	08000599 	.word	0x08000599

08000540 <vBlueLedControllerTask>:
}

//-----------------------------------------------------------------------------

void vBlueLedControllerTask(void *pvParameters)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	while(1)
	{
			//printf("vBlueLedControllerTask running.... \n\r");
			BlueTaskProfiler++;
 8000548:	4b02      	ldr	r3, [pc, #8]	@ (8000554 <vBlueLedControllerTask+0x14>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	3301      	adds	r3, #1
 800054e:	4a01      	ldr	r2, [pc, #4]	@ (8000554 <vBlueLedControllerTask+0x14>)
 8000550:	6013      	str	r3, [r2, #0]
 8000552:	e7f9      	b.n	8000548 <vBlueLedControllerTask+0x8>
 8000554:	20000074 	.word	0x20000074

08000558 <vRedLedControllerTask>:
	};
}

void vRedLedControllerTask(void *pvParameters)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	while(1)
	{
			RedTaskProfiler++;
 8000560:	4b0a      	ldr	r3, [pc, #40]	@ (800058c <vRedLedControllerTask+0x34>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	4a09      	ldr	r2, [pc, #36]	@ (800058c <vRedLedControllerTask+0x34>)
 8000568:	6013      	str	r3, [r2, #0]

			for(int i=0;i<700000;i++){}
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	e002      	b.n	8000576 <vRedLedControllerTask+0x1e>
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	3301      	adds	r3, #1
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	4a05      	ldr	r2, [pc, #20]	@ (8000590 <vRedLedControllerTask+0x38>)
 800057a:	4293      	cmp	r3, r2
 800057c:	ddf8      	ble.n	8000570 <vRedLedControllerTask+0x18>
			vTaskPrioritySet(green_handle, 3);
 800057e:	4b05      	ldr	r3, [pc, #20]	@ (8000594 <vRedLedControllerTask+0x3c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2103      	movs	r1, #3
 8000584:	4618      	mov	r0, r3
 8000586:	f002 fecd 	bl	8003324 <vTaskPrioritySet>
			RedTaskProfiler++;
 800058a:	e7e9      	b.n	8000560 <vRedLedControllerTask+0x8>
 800058c:	20000078 	.word	0x20000078
 8000590:	000aae5f 	.word	0x000aae5f
 8000594:	20000088 	.word	0x20000088

08000598 <vGreenLedControllerTask>:
	};
}

void vGreenLedControllerTask(void *pvParameters)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	while(1)
	{
			GreenTaskProfiler++;
 80005a0:	4b02      	ldr	r3, [pc, #8]	@ (80005ac <vGreenLedControllerTask+0x14>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	4a01      	ldr	r2, [pc, #4]	@ (80005ac <vGreenLedControllerTask+0x14>)
 80005a8:	6013      	str	r3, [r2, #0]
 80005aa:	e7f9      	b.n	80005a0 <vGreenLedControllerTask+0x8>
 80005ac:	2000007c 	.word	0x2000007c

080005b0 <SystemClock_Config>:
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
  return ch;
}

void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	@ 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2230      	movs	r2, #48	@ 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 fc1a 	bl	8004df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	4b28      	ldr	r3, [pc, #160]	@ (800067c <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	4a27      	ldr	r2, [pc, #156]	@ (800067c <SystemClock_Config+0xcc>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e4:	4b25      	ldr	r3, [pc, #148]	@ (800067c <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b22      	ldr	r3, [pc, #136]	@ (8000680 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a21      	ldr	r2, [pc, #132]	@ (8000680 <SystemClock_Config+0xd0>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b1f      	ldr	r3, [pc, #124]	@ (8000680 <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;  // Changed to HSI
 800060c:	2302      	movs	r3, #2
 800060e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;                   // Changed to HSI_ON
 8000610:	2301      	movs	r3, #1
 8000612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;  // Added
 8000614:	2310      	movs	r3, #16
 8000616:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;       // Changed to HSI
 800061c:	2300      	movs	r3, #0
 800061e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000620:	2308      	movs	r3, #8
 8000622:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;  // Changed from 336 to 168 for HSI
 8000624:	23a8      	movs	r3, #168	@ 0xa8
 8000626:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800062c:	2307      	movs	r3, #7
 800062e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fcb3 	bl	8000fa0 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000640:	f000 f89e 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2302      	movs	r3, #2
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000650:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000654:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000656:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800065a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2105      	movs	r1, #5
 8000662:	4618      	mov	r0, r3
 8000664:	f000 ff14 	bl	8001490 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800066e:	f000 f887 	bl	8000780 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3750      	adds	r7, #80	@ 0x50
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  __HAL_RCC_USART2_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <MX_USART2_UART_Init+0x6c>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000692:	4a17      	ldr	r2, [pc, #92]	@ (80006f0 <MX_USART2_UART_Init+0x6c>)
 8000694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000698:	6413      	str	r3, [r2, #64]	@ 0x40
 800069a:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <MX_USART2_UART_Init+0x6c>)
 800069c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  huart2.Instance = USART2;
 80006a6:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <MX_USART2_UART_Init+0x70>)
 80006a8:	4a13      	ldr	r2, [pc, #76]	@ (80006f8 <MX_USART2_UART_Init+0x74>)
 80006aa:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ac:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_USART2_UART_Init+0x70>)
 80006ae:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_USART2_UART_Init+0x70>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <MX_USART2_UART_Init+0x70>)
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <MX_USART2_UART_Init+0x70>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <MX_USART2_UART_Init+0x70>)
 80006c8:	220c      	movs	r2, #12
 80006ca:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006cc:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <MX_USART2_UART_Init+0x70>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d2:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <MX_USART2_UART_Init+0x70>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d8:	4806      	ldr	r0, [pc, #24]	@ (80006f4 <MX_USART2_UART_Init+0x70>)
 80006da:	f001 fbc7 	bl	8001e6c <HAL_UART_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_USART2_UART_Init+0x64>
  {
    Error_Handler();
 80006e4:	f000 f84c 	bl	8000780 <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	2000002c 	.word	0x2000002c
 80006f8:	40004400 	.word	0x40004400

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <MX_GPIO_Init+0x58>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <MX_GPIO_Init+0x58>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <MX_GPIO_Init+0x58>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800072c:	230c      	movs	r3, #12
 800072e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000730:	2302      	movs	r3, #2
 8000732:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800073c:	2307      	movs	r3, #7
 800073e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	4619      	mov	r1, r3
 8000744:	4804      	ldr	r0, [pc, #16]	@ (8000758 <MX_GPIO_Init+0x5c>)
 8000746:	f000 fa8f 	bl	8000c68 <HAL_GPIO_Init>
}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000

0800075c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a04      	ldr	r2, [pc, #16]	@ (800077c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d101      	bne.n	8000772 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800076e:	f000 f979 	bl	8000a64 <HAL_IncTick>
  }
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40010000 	.word	0x40010000

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  __disable_irq();
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <Error_Handler+0x8>

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <HAL_MspInit+0x54>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800079a:	4a11      	ldr	r2, [pc, #68]	@ (80007e0 <HAL_MspInit+0x54>)
 800079c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007a2:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <HAL_MspInit+0x54>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <HAL_MspInit+0x54>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b6:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_MspInit+0x54>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007be:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <HAL_MspInit+0x54>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	210f      	movs	r1, #15
 80007ce:	f06f 0001 	mvn.w	r0, #1
 80007d2:	f000 fa1f 	bl	8000c14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800

080007e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	@ 0x28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a19      	ldr	r2, [pc, #100]	@ (8000868 <HAL_UART_MspInit+0x84>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d12b      	bne.n	800085e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4b18      	ldr	r3, [pc, #96]	@ (800086c <HAL_UART_MspInit+0x88>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080e:	4a17      	ldr	r2, [pc, #92]	@ (800086c <HAL_UART_MspInit+0x88>)
 8000810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000814:	6413      	str	r3, [r2, #64]	@ 0x40
 8000816:	4b15      	ldr	r3, [pc, #84]	@ (800086c <HAL_UART_MspInit+0x88>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <HAL_UART_MspInit+0x88>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a10      	ldr	r2, [pc, #64]	@ (800086c <HAL_UART_MspInit+0x88>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <HAL_UART_MspInit+0x88>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800083e:	230c      	movs	r3, #12
 8000840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800084e:	2307      	movs	r3, #7
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	@ (8000870 <HAL_UART_MspInit+0x8c>)
 800085a:	f000 fa05 	bl	8000c68 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800085e:	bf00      	nop
 8000860:	3728      	adds	r7, #40	@ 0x28
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40004400 	.word	0x40004400
 800086c:	40023800 	.word	0x40023800
 8000870:	40020000 	.word	0x40020000

08000874 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	@ 0x30
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	4b2f      	ldr	r3, [pc, #188]	@ (8000948 <HAL_InitTick+0xd4>)
 800088a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088c:	4a2e      	ldr	r2, [pc, #184]	@ (8000948 <HAL_InitTick+0xd4>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6453      	str	r3, [r2, #68]	@ 0x44
 8000894:	4b2c      	ldr	r3, [pc, #176]	@ (8000948 <HAL_InitTick+0xd4>)
 8000896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a0:	f107 020c 	add.w	r2, r7, #12
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 f810 	bl	80018d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80008b0:	f000 fffa 	bl	80018a8 <HAL_RCC_GetPCLK2Freq>
 80008b4:	4603      	mov	r3, r0
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008bc:	4a23      	ldr	r2, [pc, #140]	@ (800094c <HAL_InitTick+0xd8>)
 80008be:	fba2 2303 	umull	r2, r3, r2, r3
 80008c2:	0c9b      	lsrs	r3, r3, #18
 80008c4:	3b01      	subs	r3, #1
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008c8:	4b21      	ldr	r3, [pc, #132]	@ (8000950 <HAL_InitTick+0xdc>)
 80008ca:	4a22      	ldr	r2, [pc, #136]	@ (8000954 <HAL_InitTick+0xe0>)
 80008cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008ce:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <HAL_InitTick+0xdc>)
 80008d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008d4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008d6:	4a1e      	ldr	r2, [pc, #120]	@ (8000950 <HAL_InitTick+0xdc>)
 80008d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008da:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <HAL_InitTick+0xdc>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000950 <HAL_InitTick+0xdc>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e8:	4b19      	ldr	r3, [pc, #100]	@ (8000950 <HAL_InitTick+0xdc>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008ee:	4818      	ldr	r0, [pc, #96]	@ (8000950 <HAL_InitTick+0xdc>)
 80008f0:	f001 f820 	bl	8001934 <HAL_TIM_Base_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80008fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d11b      	bne.n	800093a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000902:	4813      	ldr	r0, [pc, #76]	@ (8000950 <HAL_InitTick+0xdc>)
 8000904:	f001 f870 	bl	80019e8 <HAL_TIM_Base_Start_IT>
 8000908:	4603      	mov	r3, r0
 800090a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800090e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000912:	2b00      	cmp	r3, #0
 8000914:	d111      	bne.n	800093a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000916:	2019      	movs	r0, #25
 8000918:	f000 f998 	bl	8000c4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b0f      	cmp	r3, #15
 8000920:	d808      	bhi.n	8000934 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000922:	2200      	movs	r2, #0
 8000924:	6879      	ldr	r1, [r7, #4]
 8000926:	2019      	movs	r0, #25
 8000928:	f000 f974 	bl	8000c14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800092c:	4a0a      	ldr	r2, [pc, #40]	@ (8000958 <HAL_InitTick+0xe4>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6013      	str	r3, [r2, #0]
 8000932:	e002      	b.n	800093a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000934:	2301      	movs	r3, #1
 8000936:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800093a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800093e:	4618      	mov	r0, r3
 8000940:	3730      	adds	r7, #48	@ 0x30
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800
 800094c:	431bde83 	.word	0x431bde83
 8000950:	2000008c 	.word	0x2000008c
 8000954:	40010000 	.word	0x40010000
 8000958:	20000004 	.word	0x20000004

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <NMI_Handler+0x4>

08000964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <MemManage_Handler+0x4>

08000974 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <UsageFault_Handler+0x4>

08000984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000998:	4802      	ldr	r0, [pc, #8]	@ (80009a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800099a:	f001 f895 	bl	8001ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000008c 	.word	0x2000008c

080009a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <SystemInit+0x20>)
 80009ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009b2:	4a05      	ldr	r2, [pc, #20]	@ (80009c8 <SystemInit+0x20>)
 80009b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009d0:	f7ff ffea 	bl	80009a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d4:	480c      	ldr	r0, [pc, #48]	@ (8000a08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009d6:	490d      	ldr	r1, [pc, #52]	@ (8000a0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000a18 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fa:	f004 fa05 	bl	8004e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fe:	f7ff fd5f 	bl	80004c0 <main>
  bx  lr    
 8000a02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a0c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a10:	08004f04 	.word	0x08004f04
  ldr r2, =_sbss
 8000a14:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a18:	20004a24 	.word	0x20004a24

08000a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC_IRQHandler>
	...

08000a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a24:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0d      	ldr	r2, [pc, #52]	@ (8000a60 <HAL_Init+0x40>)
 8000a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a30:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0a      	ldr	r2, [pc, #40]	@ (8000a60 <HAL_Init+0x40>)
 8000a36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3c:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a07      	ldr	r2, [pc, #28]	@ (8000a60 <HAL_Init+0x40>)
 8000a42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f8d8 	bl	8000bfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4e:	200f      	movs	r0, #15
 8000a50:	f7ff ff10 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a54:	f7ff fe9a 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023c00 	.word	0x40023c00

08000a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a68:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_IncTick+0x20>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <HAL_IncTick+0x24>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4413      	add	r3, r2
 8000a74:	4a04      	ldr	r2, [pc, #16]	@ (8000a88 <HAL_IncTick+0x24>)
 8000a76:	6013      	str	r3, [r2, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20000008 	.word	0x20000008
 8000a88:	200000d4 	.word	0x200000d4

08000a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a90:	4b03      	ldr	r3, [pc, #12]	@ (8000aa0 <HAL_GetTick+0x14>)
 8000a92:	681b      	ldr	r3, [r3, #0]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	200000d4 	.word	0x200000d4

08000aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000acc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad6:	4a04      	ldr	r2, [pc, #16]	@ (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	60d3      	str	r3, [r2, #12]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af0:	4b04      	ldr	r3, [pc, #16]	@ (8000b04 <__NVIC_GetPriorityGrouping+0x18>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	f003 0307 	and.w	r3, r3, #7
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	db0b      	blt.n	8000b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f003 021f 	and.w	r2, r3, #31
 8000b20:	4907      	ldr	r1, [pc, #28]	@ (8000b40 <__NVIC_EnableIRQ+0x38>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	095b      	lsrs	r3, r3, #5
 8000b28:	2001      	movs	r0, #1
 8000b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000e100 	.word	0xe000e100

08000b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db0a      	blt.n	8000b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	490c      	ldr	r1, [pc, #48]	@ (8000b90 <__NVIC_SetPriority+0x4c>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b6c:	e00a      	b.n	8000b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4908      	ldr	r1, [pc, #32]	@ (8000b94 <__NVIC_SetPriority+0x50>)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	0112      	lsls	r2, r2, #4
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	761a      	strb	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	@ 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	bf28      	it	cs
 8000bb6:	2304      	movcs	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d902      	bls.n	8000bc8 <NVIC_EncodePriority+0x30>
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	e000      	b.n	8000bca <NVIC_EncodePriority+0x32>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	401a      	ands	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43d9      	mvns	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	4313      	orrs	r3, r2
         );
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3724      	adds	r7, #36	@ 0x24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff ff4c 	bl	8000aa4 <__NVIC_SetPriorityGrouping>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c26:	f7ff ff61 	bl	8000aec <__NVIC_GetPriorityGrouping>
 8000c2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	68b9      	ldr	r1, [r7, #8]
 8000c30:	6978      	ldr	r0, [r7, #20]
 8000c32:	f7ff ffb1 	bl	8000b98 <NVIC_EncodePriority>
 8000c36:	4602      	mov	r2, r0
 8000c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ff80 	bl	8000b44 <__NVIC_SetPriority>
}
 8000c44:	bf00      	nop
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff54 	bl	8000b08 <__NVIC_EnableIRQ>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	@ 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
 8000c82:	e16b      	b.n	8000f5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c84:	2201      	movs	r2, #1
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f040 815a 	bne.w	8000f56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d005      	beq.n	8000cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d130      	bne.n	8000d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	68da      	ldr	r2, [r3, #12]
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	091b      	lsrs	r3, r3, #4
 8000d06:	f003 0201 	and.w	r2, r3, #1
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	d017      	beq.n	8000d58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	2203      	movs	r2, #3
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d123      	bne.n	8000dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	08da      	lsrs	r2, r3, #3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3208      	adds	r2, #8
 8000d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	691a      	ldr	r2, [r3, #16]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	08da      	lsrs	r2, r3, #3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3208      	adds	r2, #8
 8000da6:	69b9      	ldr	r1, [r7, #24]
 8000da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	2203      	movs	r2, #3
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0203 	and.w	r2, r3, #3
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 80b4 	beq.w	8000f56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b60      	ldr	r3, [pc, #384]	@ (8000f74 <HAL_GPIO_Init+0x30c>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df6:	4a5f      	ldr	r2, [pc, #380]	@ (8000f74 <HAL_GPIO_Init+0x30c>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8000f74 <HAL_GPIO_Init+0x30c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e0a:	4a5b      	ldr	r2, [pc, #364]	@ (8000f78 <HAL_GPIO_Init+0x310>)
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	3302      	adds	r3, #2
 8000e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	220f      	movs	r2, #15
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a52      	ldr	r2, [pc, #328]	@ (8000f7c <HAL_GPIO_Init+0x314>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d02b      	beq.n	8000e8e <HAL_GPIO_Init+0x226>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a51      	ldr	r2, [pc, #324]	@ (8000f80 <HAL_GPIO_Init+0x318>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d025      	beq.n	8000e8a <HAL_GPIO_Init+0x222>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a50      	ldr	r2, [pc, #320]	@ (8000f84 <HAL_GPIO_Init+0x31c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d01f      	beq.n	8000e86 <HAL_GPIO_Init+0x21e>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4f      	ldr	r2, [pc, #316]	@ (8000f88 <HAL_GPIO_Init+0x320>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d019      	beq.n	8000e82 <HAL_GPIO_Init+0x21a>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4e      	ldr	r2, [pc, #312]	@ (8000f8c <HAL_GPIO_Init+0x324>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d013      	beq.n	8000e7e <HAL_GPIO_Init+0x216>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4d      	ldr	r2, [pc, #308]	@ (8000f90 <HAL_GPIO_Init+0x328>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d00d      	beq.n	8000e7a <HAL_GPIO_Init+0x212>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4c      	ldr	r2, [pc, #304]	@ (8000f94 <HAL_GPIO_Init+0x32c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d007      	beq.n	8000e76 <HAL_GPIO_Init+0x20e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4b      	ldr	r2, [pc, #300]	@ (8000f98 <HAL_GPIO_Init+0x330>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <HAL_GPIO_Init+0x20a>
 8000e6e:	2307      	movs	r3, #7
 8000e70:	e00e      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e72:	2308      	movs	r3, #8
 8000e74:	e00c      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e76:	2306      	movs	r3, #6
 8000e78:	e00a      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	e008      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e7e:	2304      	movs	r3, #4
 8000e80:	e006      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e82:	2303      	movs	r3, #3
 8000e84:	e004      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e86:	2302      	movs	r3, #2
 8000e88:	e002      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e000      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e8e:	2300      	movs	r3, #0
 8000e90:	69fa      	ldr	r2, [r7, #28]
 8000e92:	f002 0203 	and.w	r2, r2, #3
 8000e96:	0092      	lsls	r2, r2, #2
 8000e98:	4093      	lsls	r3, r2
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ea0:	4935      	ldr	r1, [pc, #212]	@ (8000f78 <HAL_GPIO_Init+0x310>)
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eae:	4b3b      	ldr	r3, [pc, #236]	@ (8000f9c <HAL_GPIO_Init+0x334>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ed2:	4a32      	ldr	r2, [pc, #200]	@ (8000f9c <HAL_GPIO_Init+0x334>)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ed8:	4b30      	ldr	r3, [pc, #192]	@ (8000f9c <HAL_GPIO_Init+0x334>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000efc:	4a27      	ldr	r2, [pc, #156]	@ (8000f9c <HAL_GPIO_Init+0x334>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f02:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <HAL_GPIO_Init+0x334>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f26:	4a1d      	ldr	r2, [pc, #116]	@ (8000f9c <HAL_GPIO_Init+0x334>)
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f9c <HAL_GPIO_Init+0x334>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f50:	4a12      	ldr	r2, [pc, #72]	@ (8000f9c <HAL_GPIO_Init+0x334>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	2b0f      	cmp	r3, #15
 8000f60:	f67f ae90 	bls.w	8000c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3724      	adds	r7, #36	@ 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40013800 	.word	0x40013800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40020400 	.word	0x40020400
 8000f84:	40020800 	.word	0x40020800
 8000f88:	40020c00 	.word	0x40020c00
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40021400 	.word	0x40021400
 8000f94:	40021800 	.word	0x40021800
 8000f98:	40021c00 	.word	0x40021c00
 8000f9c:	40013c00 	.word	0x40013c00

08000fa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e267      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d075      	beq.n	80010aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000fbe:	4b88      	ldr	r3, [pc, #544]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f003 030c 	and.w	r3, r3, #12
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	d00c      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fca:	4b85      	ldr	r3, [pc, #532]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000fd2:	2b08      	cmp	r3, #8
 8000fd4:	d112      	bne.n	8000ffc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fd6:	4b82      	ldr	r3, [pc, #520]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000fe2:	d10b      	bne.n	8000ffc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe4:	4b7e      	ldr	r3, [pc, #504]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d05b      	beq.n	80010a8 <HAL_RCC_OscConfig+0x108>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d157      	bne.n	80010a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e242      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001004:	d106      	bne.n	8001014 <HAL_RCC_OscConfig+0x74>
 8001006:	4b76      	ldr	r3, [pc, #472]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a75      	ldr	r2, [pc, #468]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 800100c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e01d      	b.n	8001050 <HAL_RCC_OscConfig+0xb0>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800101c:	d10c      	bne.n	8001038 <HAL_RCC_OscConfig+0x98>
 800101e:	4b70      	ldr	r3, [pc, #448]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a6f      	ldr	r2, [pc, #444]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 8001024:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	4b6d      	ldr	r3, [pc, #436]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a6c      	ldr	r2, [pc, #432]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 8001030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	e00b      	b.n	8001050 <HAL_RCC_OscConfig+0xb0>
 8001038:	4b69      	ldr	r3, [pc, #420]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a68      	ldr	r2, [pc, #416]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 800103e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4b66      	ldr	r3, [pc, #408]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a65      	ldr	r2, [pc, #404]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 800104a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800104e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d013      	beq.n	8001080 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001058:	f7ff fd18 	bl	8000a8c <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001060:	f7ff fd14 	bl	8000a8c <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b64      	cmp	r3, #100	@ 0x64
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e207      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001072:	4b5b      	ldr	r3, [pc, #364]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f0      	beq.n	8001060 <HAL_RCC_OscConfig+0xc0>
 800107e:	e014      	b.n	80010aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001080:	f7ff fd04 	bl	8000a8c <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001088:	f7ff fd00 	bl	8000a8c <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b64      	cmp	r3, #100	@ 0x64
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e1f3      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109a:	4b51      	ldr	r3, [pc, #324]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f0      	bne.n	8001088 <HAL_RCC_OscConfig+0xe8>
 80010a6:	e000      	b.n	80010aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d063      	beq.n	800117e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010b6:	4b4a      	ldr	r3, [pc, #296]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00b      	beq.n	80010da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010c2:	4b47      	ldr	r3, [pc, #284]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010ca:	2b08      	cmp	r3, #8
 80010cc:	d11c      	bne.n	8001108 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ce:	4b44      	ldr	r3, [pc, #272]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d116      	bne.n	8001108 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010da:	4b41      	ldr	r3, [pc, #260]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d005      	beq.n	80010f2 <HAL_RCC_OscConfig+0x152>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d001      	beq.n	80010f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e1c7      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f2:	4b3b      	ldr	r3, [pc, #236]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4937      	ldr	r1, [pc, #220]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 8001102:	4313      	orrs	r3, r2
 8001104:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001106:	e03a      	b.n	800117e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d020      	beq.n	8001152 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001110:	4b34      	ldr	r3, [pc, #208]	@ (80011e4 <HAL_RCC_OscConfig+0x244>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001116:	f7ff fcb9 	bl	8000a8c <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800111e:	f7ff fcb5 	bl	8000a8c <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e1a8      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001130:	4b2b      	ldr	r3, [pc, #172]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113c:	4b28      	ldr	r3, [pc, #160]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	4925      	ldr	r1, [pc, #148]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 800114c:	4313      	orrs	r3, r2
 800114e:	600b      	str	r3, [r1, #0]
 8001150:	e015      	b.n	800117e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001152:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <HAL_RCC_OscConfig+0x244>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001158:	f7ff fc98 	bl	8000a8c <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001160:	f7ff fc94 	bl	8000a8c <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e187      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001172:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f0      	bne.n	8001160 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	2b00      	cmp	r3, #0
 8001188:	d036      	beq.n	80011f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d016      	beq.n	80011c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001192:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <HAL_RCC_OscConfig+0x248>)
 8001194:	2201      	movs	r2, #1
 8001196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001198:	f7ff fc78 	bl	8000a8c <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a0:	f7ff fc74 	bl	8000a8c <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e167      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b2:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <HAL_RCC_OscConfig+0x240>)
 80011b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f0      	beq.n	80011a0 <HAL_RCC_OscConfig+0x200>
 80011be:	e01b      	b.n	80011f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c0:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <HAL_RCC_OscConfig+0x248>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c6:	f7ff fc61 	bl	8000a8c <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011cc:	e00e      	b.n	80011ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ce:	f7ff fc5d 	bl	8000a8c <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d907      	bls.n	80011ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e150      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
 80011e0:	40023800 	.word	0x40023800
 80011e4:	42470000 	.word	0x42470000
 80011e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ec:	4b88      	ldr	r3, [pc, #544]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 80011ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1ea      	bne.n	80011ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 8097 	beq.w	8001334 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800120a:	4b81      	ldr	r3, [pc, #516]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10f      	bne.n	8001236 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	4b7d      	ldr	r3, [pc, #500]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121e:	4a7c      	ldr	r2, [pc, #496]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001224:	6413      	str	r3, [r2, #64]	@ 0x40
 8001226:	4b7a      	ldr	r3, [pc, #488]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001232:	2301      	movs	r3, #1
 8001234:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001236:	4b77      	ldr	r3, [pc, #476]	@ (8001414 <HAL_RCC_OscConfig+0x474>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800123e:	2b00      	cmp	r3, #0
 8001240:	d118      	bne.n	8001274 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001242:	4b74      	ldr	r3, [pc, #464]	@ (8001414 <HAL_RCC_OscConfig+0x474>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a73      	ldr	r2, [pc, #460]	@ (8001414 <HAL_RCC_OscConfig+0x474>)
 8001248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800124c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800124e:	f7ff fc1d 	bl	8000a8c <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001256:	f7ff fc19 	bl	8000a8c <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e10c      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001268:	4b6a      	ldr	r3, [pc, #424]	@ (8001414 <HAL_RCC_OscConfig+0x474>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0f0      	beq.n	8001256 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d106      	bne.n	800128a <HAL_RCC_OscConfig+0x2ea>
 800127c:	4b64      	ldr	r3, [pc, #400]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 800127e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001280:	4a63      	ldr	r2, [pc, #396]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6713      	str	r3, [r2, #112]	@ 0x70
 8001288:	e01c      	b.n	80012c4 <HAL_RCC_OscConfig+0x324>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2b05      	cmp	r3, #5
 8001290:	d10c      	bne.n	80012ac <HAL_RCC_OscConfig+0x30c>
 8001292:	4b5f      	ldr	r3, [pc, #380]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 8001294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001296:	4a5e      	ldr	r2, [pc, #376]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6713      	str	r3, [r2, #112]	@ 0x70
 800129e:	4b5c      	ldr	r3, [pc, #368]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 80012a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012a2:	4a5b      	ldr	r2, [pc, #364]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80012aa:	e00b      	b.n	80012c4 <HAL_RCC_OscConfig+0x324>
 80012ac:	4b58      	ldr	r3, [pc, #352]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 80012ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012b0:	4a57      	ldr	r2, [pc, #348]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 80012b2:	f023 0301 	bic.w	r3, r3, #1
 80012b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80012b8:	4b55      	ldr	r3, [pc, #340]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 80012ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012bc:	4a54      	ldr	r2, [pc, #336]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 80012be:	f023 0304 	bic.w	r3, r3, #4
 80012c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d015      	beq.n	80012f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012cc:	f7ff fbde 	bl	8000a8c <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d2:	e00a      	b.n	80012ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d4:	f7ff fbda 	bl	8000a8c <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e0cb      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ea:	4b49      	ldr	r3, [pc, #292]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 80012ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0ee      	beq.n	80012d4 <HAL_RCC_OscConfig+0x334>
 80012f6:	e014      	b.n	8001322 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f8:	f7ff fbc8 	bl	8000a8c <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012fe:	e00a      	b.n	8001316 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001300:	f7ff fbc4 	bl	8000a8c <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800130e:	4293      	cmp	r3, r2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e0b5      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001316:	4b3e      	ldr	r3, [pc, #248]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 8001318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1ee      	bne.n	8001300 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001322:	7dfb      	ldrb	r3, [r7, #23]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d105      	bne.n	8001334 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001328:	4b39      	ldr	r3, [pc, #228]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132c:	4a38      	ldr	r2, [pc, #224]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 800132e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001332:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 80a1 	beq.w	8001480 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800133e:	4b34      	ldr	r3, [pc, #208]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b08      	cmp	r3, #8
 8001348:	d05c      	beq.n	8001404 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d141      	bne.n	80013d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001352:	4b31      	ldr	r3, [pc, #196]	@ (8001418 <HAL_RCC_OscConfig+0x478>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fb98 	bl	8000a8c <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff fb94 	bl	8000a8c <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e087      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001372:	4b27      	ldr	r3, [pc, #156]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69da      	ldr	r2, [r3, #28]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a1b      	ldr	r3, [r3, #32]
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138c:	019b      	lsls	r3, r3, #6
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001394:	085b      	lsrs	r3, r3, #1
 8001396:	3b01      	subs	r3, #1
 8001398:	041b      	lsls	r3, r3, #16
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013a0:	061b      	lsls	r3, r3, #24
 80013a2:	491b      	ldr	r1, [pc, #108]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <HAL_RCC_OscConfig+0x478>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ae:	f7ff fb6d 	bl	8000a8c <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b6:	f7ff fb69 	bl	8000a8c <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e05c      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x416>
 80013d4:	e054      	b.n	8001480 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <HAL_RCC_OscConfig+0x478>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013dc:	f7ff fb56 	bl	8000a8c <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e4:	f7ff fb52 	bl	8000a8c <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e045      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <HAL_RCC_OscConfig+0x470>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x444>
 8001402:	e03d      	b.n	8001480 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d107      	bne.n	800141c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e038      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
 8001410:	40023800 	.word	0x40023800
 8001414:	40007000 	.word	0x40007000
 8001418:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800141c:	4b1b      	ldr	r3, [pc, #108]	@ (800148c <HAL_RCC_OscConfig+0x4ec>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d028      	beq.n	800147c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001434:	429a      	cmp	r2, r3
 8001436:	d121      	bne.n	800147c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001442:	429a      	cmp	r2, r3
 8001444:	d11a      	bne.n	800147c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800144c:	4013      	ands	r3, r2
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001452:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001454:	4293      	cmp	r3, r2
 8001456:	d111      	bne.n	800147c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	3b01      	subs	r3, #1
 8001466:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001468:	429a      	cmp	r2, r3
 800146a:	d107      	bne.n	800147c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001476:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001478:	429a      	cmp	r2, r3
 800147a:	d001      	beq.n	8001480 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0cc      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014a4:	4b68      	ldr	r3, [pc, #416]	@ (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d90c      	bls.n	80014cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b2:	4b65      	ldr	r3, [pc, #404]	@ (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ba:	4b63      	ldr	r3, [pc, #396]	@ (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e0b8      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d020      	beq.n	800151a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014e4:	4b59      	ldr	r3, [pc, #356]	@ (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4a58      	ldr	r2, [pc, #352]	@ (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80014ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014fc:	4b53      	ldr	r3, [pc, #332]	@ (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	4a52      	ldr	r2, [pc, #328]	@ (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001506:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001508:	4b50      	ldr	r3, [pc, #320]	@ (800164c <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	494d      	ldr	r1, [pc, #308]	@ (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	4313      	orrs	r3, r2
 8001518:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d044      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d107      	bne.n	800153e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	4b47      	ldr	r3, [pc, #284]	@ (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d119      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e07f      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d003      	beq.n	800154e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800154a:	2b03      	cmp	r3, #3
 800154c:	d107      	bne.n	800155e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154e:	4b3f      	ldr	r3, [pc, #252]	@ (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d109      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e06f      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155e:	4b3b      	ldr	r3, [pc, #236]	@ (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e067      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800156e:	4b37      	ldr	r3, [pc, #220]	@ (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f023 0203 	bic.w	r2, r3, #3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	4934      	ldr	r1, [pc, #208]	@ (800164c <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	4313      	orrs	r3, r2
 800157e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001580:	f7ff fa84 	bl	8000a8c <HAL_GetTick>
 8001584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001586:	e00a      	b.n	800159e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001588:	f7ff fa80 	bl	8000a8c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e04f      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159e:	4b2b      	ldr	r3, [pc, #172]	@ (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 020c 	and.w	r2, r3, #12
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d1eb      	bne.n	8001588 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015b0:	4b25      	ldr	r3, [pc, #148]	@ (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d20c      	bcs.n	80015d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015be:	4b22      	ldr	r3, [pc, #136]	@ (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c6:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d001      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e032      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d008      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015e4:	4b19      	ldr	r3, [pc, #100]	@ (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	4916      	ldr	r1, [pc, #88]	@ (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d009      	beq.n	8001616 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001602:	4b12      	ldr	r3, [pc, #72]	@ (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	490e      	ldr	r1, [pc, #56]	@ (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	4313      	orrs	r3, r2
 8001614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001616:	f000 f821 	bl	800165c <HAL_RCC_GetSysClockFreq>
 800161a:	4602      	mov	r2, r0
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	091b      	lsrs	r3, r3, #4
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	490a      	ldr	r1, [pc, #40]	@ (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 8001628:	5ccb      	ldrb	r3, [r1, r3]
 800162a:	fa22 f303 	lsr.w	r3, r2, r3
 800162e:	4a09      	ldr	r2, [pc, #36]	@ (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <HAL_RCC_ClockConfig+0x1c8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff f91c 	bl	8000874 <HAL_InitTick>

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023c00 	.word	0x40023c00
 800164c:	40023800 	.word	0x40023800
 8001650:	08004edc 	.word	0x08004edc
 8001654:	20000000 	.word	0x20000000
 8001658:	20000004 	.word	0x20000004

0800165c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800165c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001660:	b094      	sub	sp, #80	@ 0x50
 8001662:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001674:	4b79      	ldr	r3, [pc, #484]	@ (800185c <HAL_RCC_GetSysClockFreq+0x200>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 030c 	and.w	r3, r3, #12
 800167c:	2b08      	cmp	r3, #8
 800167e:	d00d      	beq.n	800169c <HAL_RCC_GetSysClockFreq+0x40>
 8001680:	2b08      	cmp	r3, #8
 8001682:	f200 80e1 	bhi.w	8001848 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001686:	2b00      	cmp	r3, #0
 8001688:	d002      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0x34>
 800168a:	2b04      	cmp	r3, #4
 800168c:	d003      	beq.n	8001696 <HAL_RCC_GetSysClockFreq+0x3a>
 800168e:	e0db      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001690:	4b73      	ldr	r3, [pc, #460]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x204>)
 8001692:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001694:	e0db      	b.n	800184e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001696:	4b73      	ldr	r3, [pc, #460]	@ (8001864 <HAL_RCC_GetSysClockFreq+0x208>)
 8001698:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800169a:	e0d8      	b.n	800184e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800169c:	4b6f      	ldr	r3, [pc, #444]	@ (800185c <HAL_RCC_GetSysClockFreq+0x200>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016a6:	4b6d      	ldr	r3, [pc, #436]	@ (800185c <HAL_RCC_GetSysClockFreq+0x200>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d063      	beq.n	800177a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b2:	4b6a      	ldr	r3, [pc, #424]	@ (800185c <HAL_RCC_GetSysClockFreq+0x200>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	099b      	lsrs	r3, r3, #6
 80016b8:	2200      	movs	r2, #0
 80016ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80016be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80016c6:	2300      	movs	r3, #0
 80016c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80016ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80016ce:	4622      	mov	r2, r4
 80016d0:	462b      	mov	r3, r5
 80016d2:	f04f 0000 	mov.w	r0, #0
 80016d6:	f04f 0100 	mov.w	r1, #0
 80016da:	0159      	lsls	r1, r3, #5
 80016dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016e0:	0150      	lsls	r0, r2, #5
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4621      	mov	r1, r4
 80016e8:	1a51      	subs	r1, r2, r1
 80016ea:	6139      	str	r1, [r7, #16]
 80016ec:	4629      	mov	r1, r5
 80016ee:	eb63 0301 	sbc.w	r3, r3, r1
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001700:	4659      	mov	r1, fp
 8001702:	018b      	lsls	r3, r1, #6
 8001704:	4651      	mov	r1, sl
 8001706:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800170a:	4651      	mov	r1, sl
 800170c:	018a      	lsls	r2, r1, #6
 800170e:	4651      	mov	r1, sl
 8001710:	ebb2 0801 	subs.w	r8, r2, r1
 8001714:	4659      	mov	r1, fp
 8001716:	eb63 0901 	sbc.w	r9, r3, r1
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001726:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800172a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800172e:	4690      	mov	r8, r2
 8001730:	4699      	mov	r9, r3
 8001732:	4623      	mov	r3, r4
 8001734:	eb18 0303 	adds.w	r3, r8, r3
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	462b      	mov	r3, r5
 800173c:	eb49 0303 	adc.w	r3, r9, r3
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800174e:	4629      	mov	r1, r5
 8001750:	024b      	lsls	r3, r1, #9
 8001752:	4621      	mov	r1, r4
 8001754:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001758:	4621      	mov	r1, r4
 800175a:	024a      	lsls	r2, r1, #9
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001762:	2200      	movs	r2, #0
 8001764:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001766:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001768:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800176c:	f7fe fd30 	bl	80001d0 <__aeabi_uldivmod>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4613      	mov	r3, r2
 8001776:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001778:	e058      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177a:	4b38      	ldr	r3, [pc, #224]	@ (800185c <HAL_RCC_GetSysClockFreq+0x200>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	099b      	lsrs	r3, r3, #6
 8001780:	2200      	movs	r2, #0
 8001782:	4618      	mov	r0, r3
 8001784:	4611      	mov	r1, r2
 8001786:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800178a:	623b      	str	r3, [r7, #32]
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001790:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001794:	4642      	mov	r2, r8
 8001796:	464b      	mov	r3, r9
 8001798:	f04f 0000 	mov.w	r0, #0
 800179c:	f04f 0100 	mov.w	r1, #0
 80017a0:	0159      	lsls	r1, r3, #5
 80017a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017a6:	0150      	lsls	r0, r2, #5
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4641      	mov	r1, r8
 80017ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80017b2:	4649      	mov	r1, r9
 80017b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017cc:	ebb2 040a 	subs.w	r4, r2, sl
 80017d0:	eb63 050b 	sbc.w	r5, r3, fp
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	00eb      	lsls	r3, r5, #3
 80017de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017e2:	00e2      	lsls	r2, r4, #3
 80017e4:	4614      	mov	r4, r2
 80017e6:	461d      	mov	r5, r3
 80017e8:	4643      	mov	r3, r8
 80017ea:	18e3      	adds	r3, r4, r3
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	464b      	mov	r3, r9
 80017f0:	eb45 0303 	adc.w	r3, r5, r3
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001802:	4629      	mov	r1, r5
 8001804:	028b      	lsls	r3, r1, #10
 8001806:	4621      	mov	r1, r4
 8001808:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800180c:	4621      	mov	r1, r4
 800180e:	028a      	lsls	r2, r1, #10
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001816:	2200      	movs	r2, #0
 8001818:	61bb      	str	r3, [r7, #24]
 800181a:	61fa      	str	r2, [r7, #28]
 800181c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001820:	f7fe fcd6 	bl	80001d0 <__aeabi_uldivmod>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4613      	mov	r3, r2
 800182a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800182c:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <HAL_RCC_GetSysClockFreq+0x200>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	0c1b      	lsrs	r3, r3, #16
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	3301      	adds	r3, #1
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800183c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800183e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001840:	fbb2 f3f3 	udiv	r3, r2, r3
 8001844:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001846:	e002      	b.n	800184e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001848:	4b05      	ldr	r3, [pc, #20]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x204>)
 800184a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800184c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800184e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001850:	4618      	mov	r0, r3
 8001852:	3750      	adds	r7, #80	@ 0x50
 8001854:	46bd      	mov	sp, r7
 8001856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	00f42400 	.word	0x00f42400
 8001864:	007a1200 	.word	0x007a1200

08001868 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800186c:	4b03      	ldr	r3, [pc, #12]	@ (800187c <HAL_RCC_GetHCLKFreq+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000000 	.word	0x20000000

08001880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001884:	f7ff fff0 	bl	8001868 <HAL_RCC_GetHCLKFreq>
 8001888:	4602      	mov	r2, r0
 800188a:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	0a9b      	lsrs	r3, r3, #10
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	4903      	ldr	r1, [pc, #12]	@ (80018a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001896:	5ccb      	ldrb	r3, [r1, r3]
 8001898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800189c:	4618      	mov	r0, r3
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	08004eec 	.word	0x08004eec

080018a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018ac:	f7ff ffdc 	bl	8001868 <HAL_RCC_GetHCLKFreq>
 80018b0:	4602      	mov	r2, r0
 80018b2:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	0b5b      	lsrs	r3, r3, #13
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	4903      	ldr	r1, [pc, #12]	@ (80018cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018be:	5ccb      	ldrb	r3, [r1, r3]
 80018c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40023800 	.word	0x40023800
 80018cc:	08004eec 	.word	0x08004eec

080018d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	220f      	movs	r2, #15
 80018de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018e0:	4b12      	ldr	r3, [pc, #72]	@ (800192c <HAL_RCC_GetClockConfig+0x5c>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 0203 	and.w	r2, r3, #3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018ec:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <HAL_RCC_GetClockConfig+0x5c>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018f8:	4b0c      	ldr	r3, [pc, #48]	@ (800192c <HAL_RCC_GetClockConfig+0x5c>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001904:	4b09      	ldr	r3, [pc, #36]	@ (800192c <HAL_RCC_GetClockConfig+0x5c>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	08db      	lsrs	r3, r3, #3
 800190a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001912:	4b07      	ldr	r3, [pc, #28]	@ (8001930 <HAL_RCC_GetClockConfig+0x60>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0207 	and.w	r2, r3, #7
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	601a      	str	r2, [r3, #0]
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	40023c00 	.word	0x40023c00

08001934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e041      	b.n	80019ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d106      	bne.n	8001960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f839 	bl	80019d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2202      	movs	r2, #2
 8001964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3304      	adds	r3, #4
 8001970:	4619      	mov	r1, r3
 8001972:	4610      	mov	r0, r2
 8001974:	f000 f9c0 	bl	8001cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d001      	beq.n	8001a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e04e      	b.n	8001a9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2202      	movs	r2, #2
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a23      	ldr	r2, [pc, #140]	@ (8001aac <HAL_TIM_Base_Start_IT+0xc4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d022      	beq.n	8001a68 <HAL_TIM_Base_Start_IT+0x80>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a2a:	d01d      	beq.n	8001a68 <HAL_TIM_Base_Start_IT+0x80>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d018      	beq.n	8001a68 <HAL_TIM_Base_Start_IT+0x80>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ab4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d013      	beq.n	8001a68 <HAL_TIM_Base_Start_IT+0x80>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d00e      	beq.n	8001a68 <HAL_TIM_Base_Start_IT+0x80>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8001abc <HAL_TIM_Base_Start_IT+0xd4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d009      	beq.n	8001a68 <HAL_TIM_Base_Start_IT+0x80>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a19      	ldr	r2, [pc, #100]	@ (8001ac0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d004      	beq.n	8001a68 <HAL_TIM_Base_Start_IT+0x80>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a18      	ldr	r2, [pc, #96]	@ (8001ac4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d111      	bne.n	8001a8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2b06      	cmp	r3, #6
 8001a78:	d010      	beq.n	8001a9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f042 0201 	orr.w	r2, r2, #1
 8001a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a8a:	e007      	b.n	8001a9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0201 	orr.w	r2, r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40010000 	.word	0x40010000
 8001ab0:	40000400 	.word	0x40000400
 8001ab4:	40000800 	.word	0x40000800
 8001ab8:	40000c00 	.word	0x40000c00
 8001abc:	40010400 	.word	0x40010400
 8001ac0:	40014000 	.word	0x40014000
 8001ac4:	40001800 	.word	0x40001800

08001ac8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d020      	beq.n	8001b2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d01b      	beq.n	8001b2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f06f 0202 	mvn.w	r2, #2
 8001afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f8d2 	bl	8001cbc <HAL_TIM_IC_CaptureCallback>
 8001b18:	e005      	b.n	8001b26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f8c4 	bl	8001ca8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f8d5 	bl	8001cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d020      	beq.n	8001b78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01b      	beq.n	8001b78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0204 	mvn.w	r2, #4
 8001b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f8ac 	bl	8001cbc <HAL_TIM_IC_CaptureCallback>
 8001b64:	e005      	b.n	8001b72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f89e 	bl	8001ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f8af 	bl	8001cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d020      	beq.n	8001bc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d01b      	beq.n	8001bc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f06f 0208 	mvn.w	r2, #8
 8001b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2204      	movs	r2, #4
 8001b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f886 	bl	8001cbc <HAL_TIM_IC_CaptureCallback>
 8001bb0:	e005      	b.n	8001bbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f878 	bl	8001ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f889 	bl	8001cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d020      	beq.n	8001c10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d01b      	beq.n	8001c10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f06f 0210 	mvn.w	r2, #16
 8001be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2208      	movs	r2, #8
 8001be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f860 	bl	8001cbc <HAL_TIM_IC_CaptureCallback>
 8001bfc:	e005      	b.n	8001c0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f852 	bl	8001ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f863 	bl	8001cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00c      	beq.n	8001c34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d007      	beq.n	8001c34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0201 	mvn.w	r2, #1
 8001c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7fe fd94 	bl	800075c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00c      	beq.n	8001c58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d007      	beq.n	8001c58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f900 	bl	8001e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00c      	beq.n	8001c7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d007      	beq.n	8001c7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f834 	bl	8001ce4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00c      	beq.n	8001ca0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f003 0320 	and.w	r3, r3, #32
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d007      	beq.n	8001ca0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0220 	mvn.w	r2, #32
 8001c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f8d2 	bl	8001e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a43      	ldr	r2, [pc, #268]	@ (8001e18 <TIM_Base_SetConfig+0x120>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d013      	beq.n	8001d38 <TIM_Base_SetConfig+0x40>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d16:	d00f      	beq.n	8001d38 <TIM_Base_SetConfig+0x40>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a40      	ldr	r2, [pc, #256]	@ (8001e1c <TIM_Base_SetConfig+0x124>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d00b      	beq.n	8001d38 <TIM_Base_SetConfig+0x40>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a3f      	ldr	r2, [pc, #252]	@ (8001e20 <TIM_Base_SetConfig+0x128>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d007      	beq.n	8001d38 <TIM_Base_SetConfig+0x40>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e24 <TIM_Base_SetConfig+0x12c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d003      	beq.n	8001d38 <TIM_Base_SetConfig+0x40>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a3d      	ldr	r2, [pc, #244]	@ (8001e28 <TIM_Base_SetConfig+0x130>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d108      	bne.n	8001d4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a32      	ldr	r2, [pc, #200]	@ (8001e18 <TIM_Base_SetConfig+0x120>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d02b      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d58:	d027      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a2f      	ldr	r2, [pc, #188]	@ (8001e1c <TIM_Base_SetConfig+0x124>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d023      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a2e      	ldr	r2, [pc, #184]	@ (8001e20 <TIM_Base_SetConfig+0x128>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d01f      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8001e24 <TIM_Base_SetConfig+0x12c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d01b      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a2c      	ldr	r2, [pc, #176]	@ (8001e28 <TIM_Base_SetConfig+0x130>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d017      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e2c <TIM_Base_SetConfig+0x134>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d013      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a2a      	ldr	r2, [pc, #168]	@ (8001e30 <TIM_Base_SetConfig+0x138>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00f      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a29      	ldr	r2, [pc, #164]	@ (8001e34 <TIM_Base_SetConfig+0x13c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00b      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a28      	ldr	r2, [pc, #160]	@ (8001e38 <TIM_Base_SetConfig+0x140>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a27      	ldr	r2, [pc, #156]	@ (8001e3c <TIM_Base_SetConfig+0x144>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d003      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a26      	ldr	r2, [pc, #152]	@ (8001e40 <TIM_Base_SetConfig+0x148>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d108      	bne.n	8001dbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a0e      	ldr	r2, [pc, #56]	@ (8001e18 <TIM_Base_SetConfig+0x120>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d003      	beq.n	8001dea <TIM_Base_SetConfig+0xf2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a10      	ldr	r2, [pc, #64]	@ (8001e28 <TIM_Base_SetConfig+0x130>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d103      	bne.n	8001df2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f043 0204 	orr.w	r2, r3, #4
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	601a      	str	r2, [r3, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40010000 	.word	0x40010000
 8001e1c:	40000400 	.word	0x40000400
 8001e20:	40000800 	.word	0x40000800
 8001e24:	40000c00 	.word	0x40000c00
 8001e28:	40010400 	.word	0x40010400
 8001e2c:	40014000 	.word	0x40014000
 8001e30:	40014400 	.word	0x40014400
 8001e34:	40014800 	.word	0x40014800
 8001e38:	40001800 	.word	0x40001800
 8001e3c:	40001c00 	.word	0x40001c00
 8001e40:	40002000 	.word	0x40002000

08001e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e042      	b.n	8001f04 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7fe fca6 	bl	80007e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2224      	movs	r2, #36	@ 0x24
 8001e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f82b 	bl	8001f0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f10:	b0c0      	sub	sp, #256	@ 0x100
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f28:	68d9      	ldr	r1, [r3, #12]
 8001f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	ea40 0301 	orr.w	r3, r0, r1
 8001f34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	431a      	orrs	r2, r3
 8001f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001f64:	f021 010c 	bic.w	r1, r1, #12
 8001f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001f72:	430b      	orrs	r3, r1
 8001f74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f86:	6999      	ldr	r1, [r3, #24]
 8001f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	ea40 0301 	orr.w	r3, r0, r1
 8001f92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4b8f      	ldr	r3, [pc, #572]	@ (80021d8 <UART_SetConfig+0x2cc>)
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d005      	beq.n	8001fac <UART_SetConfig+0xa0>
 8001fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	4b8d      	ldr	r3, [pc, #564]	@ (80021dc <UART_SetConfig+0x2d0>)
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d104      	bne.n	8001fb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fac:	f7ff fc7c 	bl	80018a8 <HAL_RCC_GetPCLK2Freq>
 8001fb0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001fb4:	e003      	b.n	8001fbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fb6:	f7ff fc63 	bl	8001880 <HAL_RCC_GetPCLK1Freq>
 8001fba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fc8:	f040 810c 	bne.w	80021e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001fd6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001fda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001fde:	4622      	mov	r2, r4
 8001fe0:	462b      	mov	r3, r5
 8001fe2:	1891      	adds	r1, r2, r2
 8001fe4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001fe6:	415b      	adcs	r3, r3
 8001fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001fea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001fee:	4621      	mov	r1, r4
 8001ff0:	eb12 0801 	adds.w	r8, r2, r1
 8001ff4:	4629      	mov	r1, r5
 8001ff6:	eb43 0901 	adc.w	r9, r3, r1
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002006:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800200a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800200e:	4690      	mov	r8, r2
 8002010:	4699      	mov	r9, r3
 8002012:	4623      	mov	r3, r4
 8002014:	eb18 0303 	adds.w	r3, r8, r3
 8002018:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800201c:	462b      	mov	r3, r5
 800201e:	eb49 0303 	adc.w	r3, r9, r3
 8002022:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002032:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002036:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800203a:	460b      	mov	r3, r1
 800203c:	18db      	adds	r3, r3, r3
 800203e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002040:	4613      	mov	r3, r2
 8002042:	eb42 0303 	adc.w	r3, r2, r3
 8002046:	657b      	str	r3, [r7, #84]	@ 0x54
 8002048:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800204c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002050:	f7fe f8be 	bl	80001d0 <__aeabi_uldivmod>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4b61      	ldr	r3, [pc, #388]	@ (80021e0 <UART_SetConfig+0x2d4>)
 800205a:	fba3 2302 	umull	r2, r3, r3, r2
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	011c      	lsls	r4, r3, #4
 8002062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002066:	2200      	movs	r2, #0
 8002068:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800206c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002070:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002074:	4642      	mov	r2, r8
 8002076:	464b      	mov	r3, r9
 8002078:	1891      	adds	r1, r2, r2
 800207a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800207c:	415b      	adcs	r3, r3
 800207e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002080:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002084:	4641      	mov	r1, r8
 8002086:	eb12 0a01 	adds.w	sl, r2, r1
 800208a:	4649      	mov	r1, r9
 800208c:	eb43 0b01 	adc.w	fp, r3, r1
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800209c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020a4:	4692      	mov	sl, r2
 80020a6:	469b      	mov	fp, r3
 80020a8:	4643      	mov	r3, r8
 80020aa:	eb1a 0303 	adds.w	r3, sl, r3
 80020ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80020b2:	464b      	mov	r3, r9
 80020b4:	eb4b 0303 	adc.w	r3, fp, r3
 80020b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80020bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80020c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80020cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80020d0:	460b      	mov	r3, r1
 80020d2:	18db      	adds	r3, r3, r3
 80020d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80020d6:	4613      	mov	r3, r2
 80020d8:	eb42 0303 	adc.w	r3, r2, r3
 80020dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80020de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80020e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80020e6:	f7fe f873 	bl	80001d0 <__aeabi_uldivmod>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	4b3b      	ldr	r3, [pc, #236]	@ (80021e0 <UART_SetConfig+0x2d4>)
 80020f2:	fba3 2301 	umull	r2, r3, r3, r1
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	2264      	movs	r2, #100	@ 0x64
 80020fa:	fb02 f303 	mul.w	r3, r2, r3
 80020fe:	1acb      	subs	r3, r1, r3
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002106:	4b36      	ldr	r3, [pc, #216]	@ (80021e0 <UART_SetConfig+0x2d4>)
 8002108:	fba3 2302 	umull	r2, r3, r3, r2
 800210c:	095b      	lsrs	r3, r3, #5
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002114:	441c      	add	r4, r3
 8002116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800211a:	2200      	movs	r2, #0
 800211c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002120:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002124:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002128:	4642      	mov	r2, r8
 800212a:	464b      	mov	r3, r9
 800212c:	1891      	adds	r1, r2, r2
 800212e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002130:	415b      	adcs	r3, r3
 8002132:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002134:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002138:	4641      	mov	r1, r8
 800213a:	1851      	adds	r1, r2, r1
 800213c:	6339      	str	r1, [r7, #48]	@ 0x30
 800213e:	4649      	mov	r1, r9
 8002140:	414b      	adcs	r3, r1
 8002142:	637b      	str	r3, [r7, #52]	@ 0x34
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002150:	4659      	mov	r1, fp
 8002152:	00cb      	lsls	r3, r1, #3
 8002154:	4651      	mov	r1, sl
 8002156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800215a:	4651      	mov	r1, sl
 800215c:	00ca      	lsls	r2, r1, #3
 800215e:	4610      	mov	r0, r2
 8002160:	4619      	mov	r1, r3
 8002162:	4603      	mov	r3, r0
 8002164:	4642      	mov	r2, r8
 8002166:	189b      	adds	r3, r3, r2
 8002168:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800216c:	464b      	mov	r3, r9
 800216e:	460a      	mov	r2, r1
 8002170:	eb42 0303 	adc.w	r3, r2, r3
 8002174:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002184:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002188:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800218c:	460b      	mov	r3, r1
 800218e:	18db      	adds	r3, r3, r3
 8002190:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002192:	4613      	mov	r3, r2
 8002194:	eb42 0303 	adc.w	r3, r2, r3
 8002198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800219a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800219e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80021a2:	f7fe f815 	bl	80001d0 <__aeabi_uldivmod>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4b0d      	ldr	r3, [pc, #52]	@ (80021e0 <UART_SetConfig+0x2d4>)
 80021ac:	fba3 1302 	umull	r1, r3, r3, r2
 80021b0:	095b      	lsrs	r3, r3, #5
 80021b2:	2164      	movs	r1, #100	@ 0x64
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	3332      	adds	r3, #50	@ 0x32
 80021be:	4a08      	ldr	r2, [pc, #32]	@ (80021e0 <UART_SetConfig+0x2d4>)
 80021c0:	fba2 2303 	umull	r2, r3, r2, r3
 80021c4:	095b      	lsrs	r3, r3, #5
 80021c6:	f003 0207 	and.w	r2, r3, #7
 80021ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4422      	add	r2, r4
 80021d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80021d4:	e106      	b.n	80023e4 <UART_SetConfig+0x4d8>
 80021d6:	bf00      	nop
 80021d8:	40011000 	.word	0x40011000
 80021dc:	40011400 	.word	0x40011400
 80021e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021e8:	2200      	movs	r2, #0
 80021ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80021ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80021f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80021f6:	4642      	mov	r2, r8
 80021f8:	464b      	mov	r3, r9
 80021fa:	1891      	adds	r1, r2, r2
 80021fc:	6239      	str	r1, [r7, #32]
 80021fe:	415b      	adcs	r3, r3
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24
 8002202:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002206:	4641      	mov	r1, r8
 8002208:	1854      	adds	r4, r2, r1
 800220a:	4649      	mov	r1, r9
 800220c:	eb43 0501 	adc.w	r5, r3, r1
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	00eb      	lsls	r3, r5, #3
 800221a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800221e:	00e2      	lsls	r2, r4, #3
 8002220:	4614      	mov	r4, r2
 8002222:	461d      	mov	r5, r3
 8002224:	4643      	mov	r3, r8
 8002226:	18e3      	adds	r3, r4, r3
 8002228:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800222c:	464b      	mov	r3, r9
 800222e:	eb45 0303 	adc.w	r3, r5, r3
 8002232:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002242:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002252:	4629      	mov	r1, r5
 8002254:	008b      	lsls	r3, r1, #2
 8002256:	4621      	mov	r1, r4
 8002258:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800225c:	4621      	mov	r1, r4
 800225e:	008a      	lsls	r2, r1, #2
 8002260:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002264:	f7fd ffb4 	bl	80001d0 <__aeabi_uldivmod>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4b60      	ldr	r3, [pc, #384]	@ (80023f0 <UART_SetConfig+0x4e4>)
 800226e:	fba3 2302 	umull	r2, r3, r3, r2
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	011c      	lsls	r4, r3, #4
 8002276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800227a:	2200      	movs	r2, #0
 800227c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002280:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002284:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002288:	4642      	mov	r2, r8
 800228a:	464b      	mov	r3, r9
 800228c:	1891      	adds	r1, r2, r2
 800228e:	61b9      	str	r1, [r7, #24]
 8002290:	415b      	adcs	r3, r3
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002298:	4641      	mov	r1, r8
 800229a:	1851      	adds	r1, r2, r1
 800229c:	6139      	str	r1, [r7, #16]
 800229e:	4649      	mov	r1, r9
 80022a0:	414b      	adcs	r3, r1
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022b0:	4659      	mov	r1, fp
 80022b2:	00cb      	lsls	r3, r1, #3
 80022b4:	4651      	mov	r1, sl
 80022b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022ba:	4651      	mov	r1, sl
 80022bc:	00ca      	lsls	r2, r1, #3
 80022be:	4610      	mov	r0, r2
 80022c0:	4619      	mov	r1, r3
 80022c2:	4603      	mov	r3, r0
 80022c4:	4642      	mov	r2, r8
 80022c6:	189b      	adds	r3, r3, r2
 80022c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80022cc:	464b      	mov	r3, r9
 80022ce:	460a      	mov	r2, r1
 80022d0:	eb42 0303 	adc.w	r3, r2, r3
 80022d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80022d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80022e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80022f0:	4649      	mov	r1, r9
 80022f2:	008b      	lsls	r3, r1, #2
 80022f4:	4641      	mov	r1, r8
 80022f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022fa:	4641      	mov	r1, r8
 80022fc:	008a      	lsls	r2, r1, #2
 80022fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002302:	f7fd ff65 	bl	80001d0 <__aeabi_uldivmod>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4611      	mov	r1, r2
 800230c:	4b38      	ldr	r3, [pc, #224]	@ (80023f0 <UART_SetConfig+0x4e4>)
 800230e:	fba3 2301 	umull	r2, r3, r3, r1
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	2264      	movs	r2, #100	@ 0x64
 8002316:	fb02 f303 	mul.w	r3, r2, r3
 800231a:	1acb      	subs	r3, r1, r3
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	3332      	adds	r3, #50	@ 0x32
 8002320:	4a33      	ldr	r2, [pc, #204]	@ (80023f0 <UART_SetConfig+0x4e4>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800232c:	441c      	add	r4, r3
 800232e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002332:	2200      	movs	r2, #0
 8002334:	673b      	str	r3, [r7, #112]	@ 0x70
 8002336:	677a      	str	r2, [r7, #116]	@ 0x74
 8002338:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800233c:	4642      	mov	r2, r8
 800233e:	464b      	mov	r3, r9
 8002340:	1891      	adds	r1, r2, r2
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	415b      	adcs	r3, r3
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800234c:	4641      	mov	r1, r8
 800234e:	1851      	adds	r1, r2, r1
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	4649      	mov	r1, r9
 8002354:	414b      	adcs	r3, r1
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002364:	4659      	mov	r1, fp
 8002366:	00cb      	lsls	r3, r1, #3
 8002368:	4651      	mov	r1, sl
 800236a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800236e:	4651      	mov	r1, sl
 8002370:	00ca      	lsls	r2, r1, #3
 8002372:	4610      	mov	r0, r2
 8002374:	4619      	mov	r1, r3
 8002376:	4603      	mov	r3, r0
 8002378:	4642      	mov	r2, r8
 800237a:	189b      	adds	r3, r3, r2
 800237c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800237e:	464b      	mov	r3, r9
 8002380:	460a      	mov	r2, r1
 8002382:	eb42 0303 	adc.w	r3, r2, r3
 8002386:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	663b      	str	r3, [r7, #96]	@ 0x60
 8002392:	667a      	str	r2, [r7, #100]	@ 0x64
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80023a0:	4649      	mov	r1, r9
 80023a2:	008b      	lsls	r3, r1, #2
 80023a4:	4641      	mov	r1, r8
 80023a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023aa:	4641      	mov	r1, r8
 80023ac:	008a      	lsls	r2, r1, #2
 80023ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80023b2:	f7fd ff0d 	bl	80001d0 <__aeabi_uldivmod>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4b0d      	ldr	r3, [pc, #52]	@ (80023f0 <UART_SetConfig+0x4e4>)
 80023bc:	fba3 1302 	umull	r1, r3, r3, r2
 80023c0:	095b      	lsrs	r3, r3, #5
 80023c2:	2164      	movs	r1, #100	@ 0x64
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	3332      	adds	r3, #50	@ 0x32
 80023ce:	4a08      	ldr	r2, [pc, #32]	@ (80023f0 <UART_SetConfig+0x4e4>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	f003 020f 	and.w	r2, r3, #15
 80023da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4422      	add	r2, r4
 80023e2:	609a      	str	r2, [r3, #8]
}
 80023e4:	bf00      	nop
 80023e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80023ea:	46bd      	mov	sp, r7
 80023ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023f0:	51eb851f 	.word	0x51eb851f

080023f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80023f8:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <SysTick_Handler+0x1c>)
 80023fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80023fc:	f001 fc7e 	bl	8003cfc <xTaskGetSchedulerState>
 8002400:	4603      	mov	r3, r0
 8002402:	2b01      	cmp	r3, #1
 8002404:	d001      	beq.n	800240a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002406:	f002 fa77 	bl	80048f8 <xPortSysTickHandler>
  }
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	e000e010 	.word	0xe000e010

08002414 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a07      	ldr	r2, [pc, #28]	@ (8002440 <vApplicationGetIdleTaskMemory+0x2c>)
 8002424:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	4a06      	ldr	r2, [pc, #24]	@ (8002444 <vApplicationGetIdleTaskMemory+0x30>)
 800242a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2280      	movs	r2, #128	@ 0x80
 8002430:	601a      	str	r2, [r3, #0]
}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	200000d8 	.word	0x200000d8
 8002444:	20000134 	.word	0x20000134

08002448 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4a07      	ldr	r2, [pc, #28]	@ (8002474 <vApplicationGetTimerTaskMemory+0x2c>)
 8002458:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	4a06      	ldr	r2, [pc, #24]	@ (8002478 <vApplicationGetTimerTaskMemory+0x30>)
 800245e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002466:	601a      	str	r2, [r3, #0]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	20000334 	.word	0x20000334
 8002478:	20000390 	.word	0x20000390

0800247c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f103 0208 	add.w	r2, r3, #8
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f04f 32ff 	mov.w	r2, #4294967295
 8002494:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f103 0208 	add.w	r2, r3, #8
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f103 0208 	add.w	r2, r3, #8
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	601a      	str	r2, [r3, #0]
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800251e:	b480      	push	{r7}
 8002520:	b085      	sub	sp, #20
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d103      	bne.n	800253e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	e00c      	b.n	8002558 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3308      	adds	r3, #8
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	e002      	b.n	800254c <vListInsert+0x2e>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	429a      	cmp	r2, r3
 8002556:	d2f6      	bcs.n	8002546 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	601a      	str	r2, [r3, #0]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6892      	ldr	r2, [r2, #8]
 80025a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6852      	ldr	r2, [r2, #4]
 80025b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d103      	bne.n	80025c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	1e5a      	subs	r2, r3, #1
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10b      	bne.n	8002610 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800260a:	bf00      	nop
 800260c:	bf00      	nop
 800260e:	e7fd      	b.n	800260c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002610:	f002 f8e2 	bl	80047d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261c:	68f9      	ldr	r1, [r7, #12]
 800261e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	441a      	add	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002640:	3b01      	subs	r3, #1
 8002642:	68f9      	ldr	r1, [r7, #12]
 8002644:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	441a      	add	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	22ff      	movs	r2, #255	@ 0xff
 8002654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	22ff      	movs	r2, #255	@ 0xff
 800265c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d114      	bne.n	8002690 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d01a      	beq.n	80026a4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	3310      	adds	r3, #16
 8002672:	4618      	mov	r0, r3
 8002674:	f001 f982 	bl	800397c <xTaskRemoveFromEventList>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d012      	beq.n	80026a4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800267e:	4b0d      	ldr	r3, [pc, #52]	@ (80026b4 <xQueueGenericReset+0xd0>)
 8002680:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	f3bf 8f4f 	dsb	sy
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	e009      	b.n	80026a4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3310      	adds	r3, #16
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fef1 	bl	800247c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3324      	adds	r3, #36	@ 0x24
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff feec 	bl	800247c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80026a4:	f002 f8ca 	bl	800483c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80026a8:	2301      	movs	r3, #1
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	e000ed04 	.word	0xe000ed04

080026b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08e      	sub	sp, #56	@ 0x38
 80026bc:	af02      	add	r7, sp, #8
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10b      	bne.n	80026e4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80026cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026d0:	f383 8811 	msr	BASEPRI, r3
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80026de:	bf00      	nop
 80026e0:	bf00      	nop
 80026e2:	e7fd      	b.n	80026e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10b      	bne.n	8002702 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80026ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ee:	f383 8811 	msr	BASEPRI, r3
 80026f2:	f3bf 8f6f 	isb	sy
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	e7fd      	b.n	80026fe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <xQueueGenericCreateStatic+0x56>
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <xQueueGenericCreateStatic+0x5a>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <xQueueGenericCreateStatic+0x5c>
 8002712:	2300      	movs	r3, #0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10b      	bne.n	8002730 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	623b      	str	r3, [r7, #32]
}
 800272a:	bf00      	nop
 800272c:	bf00      	nop
 800272e:	e7fd      	b.n	800272c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d102      	bne.n	800273c <xQueueGenericCreateStatic+0x84>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <xQueueGenericCreateStatic+0x88>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <xQueueGenericCreateStatic+0x8a>
 8002740:	2300      	movs	r3, #0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10b      	bne.n	800275e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800274a:	f383 8811 	msr	BASEPRI, r3
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	f3bf 8f4f 	dsb	sy
 8002756:	61fb      	str	r3, [r7, #28]
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	e7fd      	b.n	800275a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800275e:	2350      	movs	r3, #80	@ 0x50
 8002760:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b50      	cmp	r3, #80	@ 0x50
 8002766:	d00b      	beq.n	8002780 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800276c:	f383 8811 	msr	BASEPRI, r3
 8002770:	f3bf 8f6f 	isb	sy
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	61bb      	str	r3, [r7, #24]
}
 800277a:	bf00      	nop
 800277c:	bf00      	nop
 800277e:	e7fd      	b.n	800277c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002780:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00d      	beq.n	80027a8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800278c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002794:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	4613      	mov	r3, r2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f805 	bl	80027b2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80027a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3730      	adds	r7, #48	@ 0x30
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
 80027be:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d103      	bne.n	80027ce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e002      	b.n	80027d4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027e0:	2101      	movs	r1, #1
 80027e2:	69b8      	ldr	r0, [r7, #24]
 80027e4:	f7ff fefe 	bl	80025e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80027f0:	bf00      	nop
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08e      	sub	sp, #56	@ 0x38
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002806:	2300      	movs	r3, #0
 8002808:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800280e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10b      	bne.n	800282c <xQueueGenericSend+0x34>
	__asm volatile
 8002814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002826:	bf00      	nop
 8002828:	bf00      	nop
 800282a:	e7fd      	b.n	8002828 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d103      	bne.n	800283a <xQueueGenericSend+0x42>
 8002832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <xQueueGenericSend+0x46>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <xQueueGenericSend+0x48>
 800283e:	2300      	movs	r3, #0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10b      	bne.n	800285c <xQueueGenericSend+0x64>
	__asm volatile
 8002844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002848:	f383 8811 	msr	BASEPRI, r3
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002856:	bf00      	nop
 8002858:	bf00      	nop
 800285a:	e7fd      	b.n	8002858 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d103      	bne.n	800286a <xQueueGenericSend+0x72>
 8002862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <xQueueGenericSend+0x76>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <xQueueGenericSend+0x78>
 800286e:	2300      	movs	r3, #0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10b      	bne.n	800288c <xQueueGenericSend+0x94>
	__asm volatile
 8002874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	623b      	str	r3, [r7, #32]
}
 8002886:	bf00      	nop
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800288c:	f001 fa36 	bl	8003cfc <xTaskGetSchedulerState>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <xQueueGenericSend+0xa4>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <xQueueGenericSend+0xa8>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <xQueueGenericSend+0xaa>
 80028a0:	2300      	movs	r3, #0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10b      	bne.n	80028be <xQueueGenericSend+0xc6>
	__asm volatile
 80028a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028aa:	f383 8811 	msr	BASEPRI, r3
 80028ae:	f3bf 8f6f 	isb	sy
 80028b2:	f3bf 8f4f 	dsb	sy
 80028b6:	61fb      	str	r3, [r7, #28]
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	e7fd      	b.n	80028ba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028be:	f001 ff8b 	bl	80047d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d302      	bcc.n	80028d4 <xQueueGenericSend+0xdc>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d129      	bne.n	8002928 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80028da:	f000 fa0f 	bl	8002cfc <prvCopyDataToQueue>
 80028de:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d010      	beq.n	800290a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ea:	3324      	adds	r3, #36	@ 0x24
 80028ec:	4618      	mov	r0, r3
 80028ee:	f001 f845 	bl	800397c <xTaskRemoveFromEventList>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d013      	beq.n	8002920 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80028f8:	4b3f      	ldr	r3, [pc, #252]	@ (80029f8 <xQueueGenericSend+0x200>)
 80028fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	e00a      	b.n	8002920 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800290a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290c:	2b00      	cmp	r3, #0
 800290e:	d007      	beq.n	8002920 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002910:	4b39      	ldr	r3, [pc, #228]	@ (80029f8 <xQueueGenericSend+0x200>)
 8002912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002920:	f001 ff8c 	bl	800483c <vPortExitCritical>
				return pdPASS;
 8002924:	2301      	movs	r3, #1
 8002926:	e063      	b.n	80029f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d103      	bne.n	8002936 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800292e:	f001 ff85 	bl	800483c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002932:	2300      	movs	r3, #0
 8002934:	e05c      	b.n	80029f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002938:	2b00      	cmp	r3, #0
 800293a:	d106      	bne.n	800294a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	4618      	mov	r0, r3
 8002942:	f001 f87f 	bl	8003a44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002946:	2301      	movs	r3, #1
 8002948:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800294a:	f001 ff77 	bl	800483c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800294e:	f000 fdef 	bl	8003530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002952:	f001 ff41 	bl	80047d8 <vPortEnterCritical>
 8002956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002958:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800295c:	b25b      	sxtb	r3, r3
 800295e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002962:	d103      	bne.n	800296c <xQueueGenericSend+0x174>
 8002964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800296c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002972:	b25b      	sxtb	r3, r3
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002978:	d103      	bne.n	8002982 <xQueueGenericSend+0x18a>
 800297a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002982:	f001 ff5b 	bl	800483c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002986:	1d3a      	adds	r2, r7, #4
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f001 f86e 	bl	8003a70 <xTaskCheckForTimeOut>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d124      	bne.n	80029e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800299a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800299c:	f000 faa6 	bl	8002eec <prvIsQueueFull>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d018      	beq.n	80029d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a8:	3310      	adds	r3, #16
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 ff92 	bl	80038d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80029b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029b6:	f000 fa31 	bl	8002e1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80029ba:	f000 fdc7 	bl	800354c <xTaskResumeAll>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f47f af7c 	bne.w	80028be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80029c6:	4b0c      	ldr	r3, [pc, #48]	@ (80029f8 <xQueueGenericSend+0x200>)
 80029c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	f3bf 8f6f 	isb	sy
 80029d6:	e772      	b.n	80028be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80029d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029da:	f000 fa1f 	bl	8002e1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029de:	f000 fdb5 	bl	800354c <xTaskResumeAll>
 80029e2:	e76c      	b.n	80028be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80029e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029e6:	f000 fa19 	bl	8002e1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029ea:	f000 fdaf 	bl	800354c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80029ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3738      	adds	r7, #56	@ 0x38
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	e000ed04 	.word	0xe000ed04

080029fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b090      	sub	sp, #64	@ 0x40
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10b      	bne.n	8002a2c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a18:	f383 8811 	msr	BASEPRI, r3
 8002a1c:	f3bf 8f6f 	isb	sy
 8002a20:	f3bf 8f4f 	dsb	sy
 8002a24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002a26:	bf00      	nop
 8002a28:	bf00      	nop
 8002a2a:	e7fd      	b.n	8002a28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d103      	bne.n	8002a3a <xQueueGenericSendFromISR+0x3e>
 8002a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <xQueueGenericSendFromISR+0x42>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <xQueueGenericSendFromISR+0x44>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10b      	bne.n	8002a5c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a48:	f383 8811 	msr	BASEPRI, r3
 8002a4c:	f3bf 8f6f 	isb	sy
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a56:	bf00      	nop
 8002a58:	bf00      	nop
 8002a5a:	e7fd      	b.n	8002a58 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d103      	bne.n	8002a6a <xQueueGenericSendFromISR+0x6e>
 8002a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <xQueueGenericSendFromISR+0x72>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <xQueueGenericSendFromISR+0x74>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10b      	bne.n	8002a8c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a78:	f383 8811 	msr	BASEPRI, r3
 8002a7c:	f3bf 8f6f 	isb	sy
 8002a80:	f3bf 8f4f 	dsb	sy
 8002a84:	623b      	str	r3, [r7, #32]
}
 8002a86:	bf00      	nop
 8002a88:	bf00      	nop
 8002a8a:	e7fd      	b.n	8002a88 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a8c:	f001 ff84 	bl	8004998 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002a90:	f3ef 8211 	mrs	r2, BASEPRI
 8002a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a98:	f383 8811 	msr	BASEPRI, r3
 8002a9c:	f3bf 8f6f 	isb	sy
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	61fa      	str	r2, [r7, #28]
 8002aa6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002aaa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d302      	bcc.n	8002abe <xQueueGenericSendFromISR+0xc2>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d12f      	bne.n	8002b1e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ac4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002ad4:	f000 f912 	bl	8002cfc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ad8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae0:	d112      	bne.n	8002b08 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d016      	beq.n	8002b18 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aec:	3324      	adds	r3, #36	@ 0x24
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 ff44 	bl	800397c <xTaskRemoveFromEventList>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00e      	beq.n	8002b18 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00b      	beq.n	8002b18 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	e007      	b.n	8002b18 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	b25a      	sxtb	r2, r3
 8002b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002b1c:	e001      	b.n	8002b22 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b24:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3740      	adds	r7, #64	@ 0x40
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08c      	sub	sp, #48	@ 0x30
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b44:	2300      	movs	r3, #0
 8002b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10b      	bne.n	8002b6a <xQueueReceive+0x32>
	__asm volatile
 8002b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	623b      	str	r3, [r7, #32]
}
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop
 8002b68:	e7fd      	b.n	8002b66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d103      	bne.n	8002b78 <xQueueReceive+0x40>
 8002b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <xQueueReceive+0x44>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <xQueueReceive+0x46>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10b      	bne.n	8002b9a <xQueueReceive+0x62>
	__asm volatile
 8002b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b86:	f383 8811 	msr	BASEPRI, r3
 8002b8a:	f3bf 8f6f 	isb	sy
 8002b8e:	f3bf 8f4f 	dsb	sy
 8002b92:	61fb      	str	r3, [r7, #28]
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	e7fd      	b.n	8002b96 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b9a:	f001 f8af 	bl	8003cfc <xTaskGetSchedulerState>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <xQueueReceive+0x72>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <xQueueReceive+0x76>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <xQueueReceive+0x78>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10b      	bne.n	8002bcc <xQueueReceive+0x94>
	__asm volatile
 8002bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb8:	f383 8811 	msr	BASEPRI, r3
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	f3bf 8f4f 	dsb	sy
 8002bc4:	61bb      	str	r3, [r7, #24]
}
 8002bc6:	bf00      	nop
 8002bc8:	bf00      	nop
 8002bca:	e7fd      	b.n	8002bc8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bcc:	f001 fe04 	bl	80047d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01f      	beq.n	8002c1c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002be0:	f000 f8f6 	bl	8002dd0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be6:	1e5a      	subs	r2, r3, #1
 8002be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00f      	beq.n	8002c14 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf6:	3310      	adds	r3, #16
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 febf 	bl	800397c <xTaskRemoveFromEventList>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002c04:	4b3c      	ldr	r3, [pc, #240]	@ (8002cf8 <xQueueReceive+0x1c0>)
 8002c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002c14:	f001 fe12 	bl	800483c <vPortExitCritical>
				return pdPASS;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e069      	b.n	8002cf0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d103      	bne.n	8002c2a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c22:	f001 fe0b 	bl	800483c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e062      	b.n	8002cf0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d106      	bne.n	8002c3e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c30:	f107 0310 	add.w	r3, r7, #16
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 ff05 	bl	8003a44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c3e:	f001 fdfd 	bl	800483c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c42:	f000 fc75 	bl	8003530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c46:	f001 fdc7 	bl	80047d8 <vPortEnterCritical>
 8002c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c50:	b25b      	sxtb	r3, r3
 8002c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c56:	d103      	bne.n	8002c60 <xQueueReceive+0x128>
 8002c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c66:	b25b      	sxtb	r3, r3
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6c:	d103      	bne.n	8002c76 <xQueueReceive+0x13e>
 8002c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c76:	f001 fde1 	bl	800483c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c7a:	1d3a      	adds	r2, r7, #4
 8002c7c:	f107 0310 	add.w	r3, r7, #16
 8002c80:	4611      	mov	r1, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fef4 	bl	8003a70 <xTaskCheckForTimeOut>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d123      	bne.n	8002cd6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c90:	f000 f916 	bl	8002ec0 <prvIsQueueEmpty>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d017      	beq.n	8002cca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9c:	3324      	adds	r3, #36	@ 0x24
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fe18 	bl	80038d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ca8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002caa:	f000 f8b7 	bl	8002e1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002cae:	f000 fc4d 	bl	800354c <xTaskResumeAll>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d189      	bne.n	8002bcc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf8 <xQueueReceive+0x1c0>)
 8002cba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	e780      	b.n	8002bcc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002cca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ccc:	f000 f8a6 	bl	8002e1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cd0:	f000 fc3c 	bl	800354c <xTaskResumeAll>
 8002cd4:	e77a      	b.n	8002bcc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cd8:	f000 f8a0 	bl	8002e1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cdc:	f000 fc36 	bl	800354c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ce0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ce2:	f000 f8ed 	bl	8002ec0 <prvIsQueueEmpty>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f43f af6f 	beq.w	8002bcc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002cee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3730      	adds	r7, #48	@ 0x30
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	e000ed04 	.word	0xe000ed04

08002cfc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10d      	bne.n	8002d36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d14d      	bne.n	8002dbe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f001 f806 	bl	8003d38 <xTaskPriorityDisinherit>
 8002d2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	e043      	b.n	8002dbe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d119      	bne.n	8002d70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6858      	ldr	r0, [r3, #4]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	461a      	mov	r2, r3
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	f002 f882 	bl	8004e50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d54:	441a      	add	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d32b      	bcc.n	8002dbe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	e026      	b.n	8002dbe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	68d8      	ldr	r0, [r3, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d78:	461a      	mov	r2, r3
 8002d7a:	68b9      	ldr	r1, [r7, #8]
 8002d7c:	f002 f868 	bl	8004e50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	425b      	negs	r3, r3
 8002d8a:	441a      	add	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d207      	bcs.n	8002dac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da4:	425b      	negs	r3, r3
 8002da6:	441a      	add	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d105      	bne.n	8002dbe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002dc6:	697b      	ldr	r3, [r7, #20]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d018      	beq.n	8002e14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	441a      	add	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d303      	bcc.n	8002e04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68d9      	ldr	r1, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6838      	ldr	r0, [r7, #0]
 8002e10:	f002 f81e 	bl	8004e50 <memcpy>
	}
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e24:	f001 fcd8 	bl	80047d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e30:	e011      	b.n	8002e56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d012      	beq.n	8002e60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3324      	adds	r3, #36	@ 0x24
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fd9c 	bl	800397c <xTaskRemoveFromEventList>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002e4a:	f000 fe75 	bl	8003b38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	dce9      	bgt.n	8002e32 <prvUnlockQueue+0x16>
 8002e5e:	e000      	b.n	8002e62 <prvUnlockQueue+0x46>
					break;
 8002e60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	22ff      	movs	r2, #255	@ 0xff
 8002e66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002e6a:	f001 fce7 	bl	800483c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e6e:	f001 fcb3 	bl	80047d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e7a:	e011      	b.n	8002ea0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d012      	beq.n	8002eaa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3310      	adds	r3, #16
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fd77 	bl	800397c <xTaskRemoveFromEventList>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002e94:	f000 fe50 	bl	8003b38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002e98:	7bbb      	ldrb	r3, [r7, #14]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ea0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	dce9      	bgt.n	8002e7c <prvUnlockQueue+0x60>
 8002ea8:	e000      	b.n	8002eac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002eaa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	22ff      	movs	r2, #255	@ 0xff
 8002eb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002eb4:	f001 fcc2 	bl	800483c <vPortExitCritical>
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ec8:	f001 fc86 	bl	80047d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	e001      	b.n	8002ede <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ede:	f001 fcad 	bl	800483c <vPortExitCritical>

	return xReturn;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ef4:	f001 fc70 	bl	80047d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d102      	bne.n	8002f0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f04:	2301      	movs	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	e001      	b.n	8002f0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f0e:	f001 fc95 	bl	800483c <vPortExitCritical>

	return xReturn;
 8002f12:	68fb      	ldr	r3, [r7, #12]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	e014      	b.n	8002f56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8002f6c <vQueueAddToRegistry+0x50>)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10b      	bne.n	8002f50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f38:	490c      	ldr	r1, [pc, #48]	@ (8002f6c <vQueueAddToRegistry+0x50>)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002f42:	4a0a      	ldr	r2, [pc, #40]	@ (8002f6c <vQueueAddToRegistry+0x50>)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002f4e:	e006      	b.n	8002f5e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3301      	adds	r3, #1
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b07      	cmp	r3, #7
 8002f5a:	d9e7      	bls.n	8002f2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	20000790 	.word	0x20000790

08002f70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002f80:	f001 fc2a 	bl	80047d8 <vPortEnterCritical>
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f8a:	b25b      	sxtb	r3, r3
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d103      	bne.n	8002f9a <vQueueWaitForMessageRestricted+0x2a>
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fa0:	b25b      	sxtb	r3, r3
 8002fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa6:	d103      	bne.n	8002fb0 <vQueueWaitForMessageRestricted+0x40>
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fb0:	f001 fc44 	bl	800483c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d106      	bne.n	8002fca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	3324      	adds	r3, #36	@ 0x24
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fcad 	bl	8003924 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002fca:	6978      	ldr	r0, [r7, #20]
 8002fcc:	f7ff ff26 	bl	8002e1c <prvUnlockQueue>
	}
 8002fd0:	bf00      	nop
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08e      	sub	sp, #56	@ 0x38
 8002fdc:	af04      	add	r7, sp, #16
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10b      	bne.n	8003004 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff0:	f383 8811 	msr	BASEPRI, r3
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	623b      	str	r3, [r7, #32]
}
 8002ffe:	bf00      	nop
 8003000:	bf00      	nop
 8003002:	e7fd      	b.n	8003000 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10b      	bne.n	8003022 <xTaskCreateStatic+0x4a>
	__asm volatile
 800300a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	61fb      	str	r3, [r7, #28]
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	e7fd      	b.n	800301e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003022:	235c      	movs	r3, #92	@ 0x5c
 8003024:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b5c      	cmp	r3, #92	@ 0x5c
 800302a:	d00b      	beq.n	8003044 <xTaskCreateStatic+0x6c>
	__asm volatile
 800302c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	61bb      	str	r3, [r7, #24]
}
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	e7fd      	b.n	8003040 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003044:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01e      	beq.n	800308a <xTaskCreateStatic+0xb2>
 800304c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800304e:	2b00      	cmp	r3, #0
 8003050:	d01b      	beq.n	800308a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003054:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800305c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305e:	2202      	movs	r2, #2
 8003060:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003064:	2300      	movs	r3, #0
 8003066:	9303      	str	r3, [sp, #12]
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	9302      	str	r3, [sp, #8]
 800306c:	f107 0314 	add.w	r3, r7, #20
 8003070:	9301      	str	r3, [sp, #4]
 8003072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f850 	bl	8003122 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003082:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003084:	f000 f8de 	bl	8003244 <prvAddNewTaskToReadyList>
 8003088:	e001      	b.n	800308e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800308e:	697b      	ldr	r3, [r7, #20]
	}
 8003090:	4618      	mov	r0, r3
 8003092:	3728      	adds	r7, #40	@ 0x28
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08c      	sub	sp, #48	@ 0x30
 800309c:	af04      	add	r7, sp, #16
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	4613      	mov	r3, r2
 80030a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80030a8:	88fb      	ldrh	r3, [r7, #6]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f001 fcb5 	bl	8004a1c <pvPortMalloc>
 80030b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00e      	beq.n	80030d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80030ba:	205c      	movs	r0, #92	@ 0x5c
 80030bc:	f001 fcae 	bl	8004a1c <pvPortMalloc>
 80030c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80030ce:	e005      	b.n	80030dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80030d0:	6978      	ldr	r0, [r7, #20]
 80030d2:	f001 fd71 	bl	8004bb8 <vPortFree>
 80030d6:	e001      	b.n	80030dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d017      	beq.n	8003112 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030ea:	88fa      	ldrh	r2, [r7, #6]
 80030ec:	2300      	movs	r3, #0
 80030ee:	9303      	str	r3, [sp, #12]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	9302      	str	r3, [sp, #8]
 80030f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f80e 	bl	8003122 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003106:	69f8      	ldr	r0, [r7, #28]
 8003108:	f000 f89c 	bl	8003244 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800310c:	2301      	movs	r3, #1
 800310e:	61bb      	str	r3, [r7, #24]
 8003110:	e002      	b.n	8003118 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003112:	f04f 33ff 	mov.w	r3, #4294967295
 8003116:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003118:	69bb      	ldr	r3, [r7, #24]
	}
 800311a:	4618      	mov	r0, r3
 800311c:	3720      	adds	r7, #32
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b088      	sub	sp, #32
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003132:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	461a      	mov	r2, r3
 800313a:	21a5      	movs	r1, #165	@ 0xa5
 800313c:	f001 fe5c 	bl	8004df8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003142:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800314a:	3b01      	subs	r3, #1
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	f023 0307 	bic.w	r3, r3, #7
 8003158:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00b      	beq.n	800317c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003168:	f383 8811 	msr	BASEPRI, r3
 800316c:	f3bf 8f6f 	isb	sy
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	617b      	str	r3, [r7, #20]
}
 8003176:	bf00      	nop
 8003178:	bf00      	nop
 800317a:	e7fd      	b.n	8003178 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d01f      	beq.n	80031c2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	e012      	b.n	80031ae <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	4413      	add	r3, r2
 800318e:	7819      	ldrb	r1, [r3, #0]
 8003190:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	4413      	add	r3, r2
 8003196:	3334      	adds	r3, #52	@ 0x34
 8003198:	460a      	mov	r2, r1
 800319a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	4413      	add	r3, r2
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d006      	beq.n	80031b6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	3301      	adds	r3, #1
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	2b0f      	cmp	r3, #15
 80031b2:	d9e9      	bls.n	8003188 <prvInitialiseNewTask+0x66>
 80031b4:	e000      	b.n	80031b8 <prvInitialiseNewTask+0x96>
			{
				break;
 80031b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031c0:	e003      	b.n	80031ca <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80031c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80031ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031cc:	2b37      	cmp	r3, #55	@ 0x37
 80031ce:	d901      	bls.n	80031d4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80031d0:	2337      	movs	r3, #55	@ 0x37
 80031d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80031d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031d8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80031da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031de:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80031e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e2:	2200      	movs	r2, #0
 80031e4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e8:	3304      	adds	r3, #4
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff f966 	bl	80024bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f2:	3318      	adds	r3, #24
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff f961 	bl	80024bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003202:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003208:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800320a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800320e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003212:	2200      	movs	r2, #0
 8003214:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	68f9      	ldr	r1, [r7, #12]
 8003222:	69b8      	ldr	r0, [r7, #24]
 8003224:	f001 f9a6 	bl	8004574 <pxPortInitialiseStack>
 8003228:	4602      	mov	r2, r0
 800322a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800322e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003238:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800323a:	bf00      	nop
 800323c:	3720      	adds	r7, #32
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800324c:	f001 fac4 	bl	80047d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003250:	4b2d      	ldr	r3, [pc, #180]	@ (8003308 <prvAddNewTaskToReadyList+0xc4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3301      	adds	r3, #1
 8003256:	4a2c      	ldr	r2, [pc, #176]	@ (8003308 <prvAddNewTaskToReadyList+0xc4>)
 8003258:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800325a:	4b2c      	ldr	r3, [pc, #176]	@ (800330c <prvAddNewTaskToReadyList+0xc8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003262:	4a2a      	ldr	r2, [pc, #168]	@ (800330c <prvAddNewTaskToReadyList+0xc8>)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003268:	4b27      	ldr	r3, [pc, #156]	@ (8003308 <prvAddNewTaskToReadyList+0xc4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d110      	bne.n	8003292 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003270:	f000 fc86 	bl	8003b80 <prvInitialiseTaskLists>
 8003274:	e00d      	b.n	8003292 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003276:	4b26      	ldr	r3, [pc, #152]	@ (8003310 <prvAddNewTaskToReadyList+0xcc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800327e:	4b23      	ldr	r3, [pc, #140]	@ (800330c <prvAddNewTaskToReadyList+0xc8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	429a      	cmp	r2, r3
 800328a:	d802      	bhi.n	8003292 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800328c:	4a1f      	ldr	r2, [pc, #124]	@ (800330c <prvAddNewTaskToReadyList+0xc8>)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003292:	4b20      	ldr	r3, [pc, #128]	@ (8003314 <prvAddNewTaskToReadyList+0xd0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	3301      	adds	r3, #1
 8003298:	4a1e      	ldr	r2, [pc, #120]	@ (8003314 <prvAddNewTaskToReadyList+0xd0>)
 800329a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800329c:	4b1d      	ldr	r3, [pc, #116]	@ (8003314 <prvAddNewTaskToReadyList+0xd0>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003318 <prvAddNewTaskToReadyList+0xd4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d903      	bls.n	80032b8 <prvAddNewTaskToReadyList+0x74>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b4:	4a18      	ldr	r2, [pc, #96]	@ (8003318 <prvAddNewTaskToReadyList+0xd4>)
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032bc:	4613      	mov	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4a15      	ldr	r2, [pc, #84]	@ (800331c <prvAddNewTaskToReadyList+0xd8>)
 80032c6:	441a      	add	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3304      	adds	r3, #4
 80032cc:	4619      	mov	r1, r3
 80032ce:	4610      	mov	r0, r2
 80032d0:	f7ff f901 	bl	80024d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80032d4:	f001 fab2 	bl	800483c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80032d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003310 <prvAddNewTaskToReadyList+0xcc>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00e      	beq.n	80032fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032e0:	4b0a      	ldr	r3, [pc, #40]	@ (800330c <prvAddNewTaskToReadyList+0xc8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d207      	bcs.n	80032fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80032ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003320 <prvAddNewTaskToReadyList+0xdc>)
 80032f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000ca4 	.word	0x20000ca4
 800330c:	200007d0 	.word	0x200007d0
 8003310:	20000cb0 	.word	0x20000cb0
 8003314:	20000cc0 	.word	0x20000cc0
 8003318:	20000cac 	.word	0x20000cac
 800331c:	200007d4 	.word	0x200007d4
 8003320:	e000ed04 	.word	0xe000ed04

08003324 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b37      	cmp	r3, #55	@ 0x37
 8003336:	d90b      	bls.n	8003350 <vTaskPrioritySet+0x2c>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	60fb      	str	r3, [r7, #12]
}
 800334a:	bf00      	nop
 800334c:	bf00      	nop
 800334e:	e7fd      	b.n	800334c <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	2b37      	cmp	r3, #55	@ 0x37
 8003354:	d901      	bls.n	800335a <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003356:	2337      	movs	r3, #55	@ 0x37
 8003358:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800335a:	f001 fa3d 	bl	80047d8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d102      	bne.n	800336a <vTaskPrioritySet+0x46>
 8003364:	4b3a      	ldr	r3, [pc, #232]	@ (8003450 <vTaskPrioritySet+0x12c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	e000      	b.n	800336c <vTaskPrioritySet+0x48>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003372:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d063      	beq.n	8003444 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	429a      	cmp	r2, r3
 8003382:	d90d      	bls.n	80033a0 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 8003384:	4b32      	ldr	r3, [pc, #200]	@ (8003450 <vTaskPrioritySet+0x12c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	429a      	cmp	r2, r3
 800338c:	d00f      	beq.n	80033ae <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800338e:	4b30      	ldr	r3, [pc, #192]	@ (8003450 <vTaskPrioritySet+0x12c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d309      	bcc.n	80033ae <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 800339a:	2301      	movs	r3, #1
 800339c:	61fb      	str	r3, [r7, #28]
 800339e:	e006      	b.n	80033ae <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80033a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003450 <vTaskPrioritySet+0x12c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d101      	bne.n	80033ae <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80033aa:	2301      	movs	r3, #1
 80033ac:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b2:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033bc:	429a      	cmp	r2, r3
 80033be:	d102      	bne.n	80033c6 <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	db04      	blt.n	80033de <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	6959      	ldr	r1, [r3, #20]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4a19      	ldr	r2, [pc, #100]	@ (8003454 <vTaskPrioritySet+0x130>)
 80033ee:	4413      	add	r3, r2
 80033f0:	4299      	cmp	r1, r3
 80033f2:	d11c      	bne.n	800342e <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	3304      	adds	r3, #4
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff f8c9 	bl	8002590 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003402:	4b15      	ldr	r3, [pc, #84]	@ (8003458 <vTaskPrioritySet+0x134>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d903      	bls.n	8003412 <vTaskPrioritySet+0xee>
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340e:	4a12      	ldr	r2, [pc, #72]	@ (8003458 <vTaskPrioritySet+0x134>)
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4a0d      	ldr	r2, [pc, #52]	@ (8003454 <vTaskPrioritySet+0x130>)
 8003420:	441a      	add	r2, r3
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	3304      	adds	r3, #4
 8003426:	4619      	mov	r1, r3
 8003428:	4610      	mov	r0, r2
 800342a:	f7ff f854 	bl	80024d6 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8003434:	4b09      	ldr	r3, [pc, #36]	@ (800345c <vTaskPrioritySet+0x138>)
 8003436:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	f3bf 8f4f 	dsb	sy
 8003440:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8003444:	f001 f9fa 	bl	800483c <vPortExitCritical>
	}
 8003448:	bf00      	nop
 800344a:	3720      	adds	r7, #32
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	200007d0 	.word	0x200007d0
 8003454:	200007d4 	.word	0x200007d4
 8003458:	20000cac 	.word	0x20000cac
 800345c:	e000ed04 	.word	0xe000ed04

08003460 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	@ 0x28
 8003464:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800346a:	2300      	movs	r3, #0
 800346c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800346e:	463a      	mov	r2, r7
 8003470:	1d39      	adds	r1, r7, #4
 8003472:	f107 0308 	add.w	r3, r7, #8
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe ffcc 	bl	8002414 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800347c:	6839      	ldr	r1, [r7, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	9202      	str	r2, [sp, #8]
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	2300      	movs	r3, #0
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2300      	movs	r3, #0
 800348c:	460a      	mov	r2, r1
 800348e:	4922      	ldr	r1, [pc, #136]	@ (8003518 <vTaskStartScheduler+0xb8>)
 8003490:	4822      	ldr	r0, [pc, #136]	@ (800351c <vTaskStartScheduler+0xbc>)
 8003492:	f7ff fda1 	bl	8002fd8 <xTaskCreateStatic>
 8003496:	4603      	mov	r3, r0
 8003498:	4a21      	ldr	r2, [pc, #132]	@ (8003520 <vTaskStartScheduler+0xc0>)
 800349a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800349c:	4b20      	ldr	r3, [pc, #128]	@ (8003520 <vTaskStartScheduler+0xc0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034a4:	2301      	movs	r3, #1
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	e001      	b.n	80034ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d102      	bne.n	80034ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80034b4:	f000 fd04 	bl	8003ec0 <xTimerCreateTimerTask>
 80034b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d116      	bne.n	80034ee <vTaskStartScheduler+0x8e>
	__asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	613b      	str	r3, [r7, #16]
}
 80034d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034d4:	4b13      	ldr	r3, [pc, #76]	@ (8003524 <vTaskStartScheduler+0xc4>)
 80034d6:	f04f 32ff 	mov.w	r2, #4294967295
 80034da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034dc:	4b12      	ldr	r3, [pc, #72]	@ (8003528 <vTaskStartScheduler+0xc8>)
 80034de:	2201      	movs	r2, #1
 80034e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80034e2:	4b12      	ldr	r3, [pc, #72]	@ (800352c <vTaskStartScheduler+0xcc>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034e8:	f001 f8d2 	bl	8004690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034ec:	e00f      	b.n	800350e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f4:	d10b      	bne.n	800350e <vTaskStartScheduler+0xae>
	__asm volatile
 80034f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	60fb      	str	r3, [r7, #12]
}
 8003508:	bf00      	nop
 800350a:	bf00      	nop
 800350c:	e7fd      	b.n	800350a <vTaskStartScheduler+0xaa>
}
 800350e:	bf00      	nop
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	08004ec4 	.word	0x08004ec4
 800351c:	08003b51 	.word	0x08003b51
 8003520:	20000cc8 	.word	0x20000cc8
 8003524:	20000cc4 	.word	0x20000cc4
 8003528:	20000cb0 	.word	0x20000cb0
 800352c:	20000ca8 	.word	0x20000ca8

08003530 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003534:	4b04      	ldr	r3, [pc, #16]	@ (8003548 <vTaskSuspendAll+0x18>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3301      	adds	r3, #1
 800353a:	4a03      	ldr	r2, [pc, #12]	@ (8003548 <vTaskSuspendAll+0x18>)
 800353c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800353e:	bf00      	nop
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	20000ccc 	.word	0x20000ccc

0800354c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800355a:	4b42      	ldr	r3, [pc, #264]	@ (8003664 <xTaskResumeAll+0x118>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10b      	bne.n	800357a <xTaskResumeAll+0x2e>
	__asm volatile
 8003562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	603b      	str	r3, [r7, #0]
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop
 8003578:	e7fd      	b.n	8003576 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800357a:	f001 f92d 	bl	80047d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800357e:	4b39      	ldr	r3, [pc, #228]	@ (8003664 <xTaskResumeAll+0x118>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3b01      	subs	r3, #1
 8003584:	4a37      	ldr	r2, [pc, #220]	@ (8003664 <xTaskResumeAll+0x118>)
 8003586:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003588:	4b36      	ldr	r3, [pc, #216]	@ (8003664 <xTaskResumeAll+0x118>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d162      	bne.n	8003656 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003590:	4b35      	ldr	r3, [pc, #212]	@ (8003668 <xTaskResumeAll+0x11c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d05e      	beq.n	8003656 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003598:	e02f      	b.n	80035fa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800359a:	4b34      	ldr	r3, [pc, #208]	@ (800366c <xTaskResumeAll+0x120>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3318      	adds	r3, #24
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fe fff2 	bl	8002590 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	3304      	adds	r3, #4
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fe ffed 	bl	8002590 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003670 <xTaskResumeAll+0x124>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d903      	bls.n	80035ca <xTaskResumeAll+0x7e>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003670 <xTaskResumeAll+0x124>)
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4a27      	ldr	r2, [pc, #156]	@ (8003674 <xTaskResumeAll+0x128>)
 80035d8:	441a      	add	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	3304      	adds	r3, #4
 80035de:	4619      	mov	r1, r3
 80035e0:	4610      	mov	r0, r2
 80035e2:	f7fe ff78 	bl	80024d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ea:	4b23      	ldr	r3, [pc, #140]	@ (8003678 <xTaskResumeAll+0x12c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d302      	bcc.n	80035fa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80035f4:	4b21      	ldr	r3, [pc, #132]	@ (800367c <xTaskResumeAll+0x130>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035fa:	4b1c      	ldr	r3, [pc, #112]	@ (800366c <xTaskResumeAll+0x120>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1cb      	bne.n	800359a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003608:	f000 fb58 	bl	8003cbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800360c:	4b1c      	ldr	r3, [pc, #112]	@ (8003680 <xTaskResumeAll+0x134>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d010      	beq.n	800363a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003618:	f000 f846 	bl	80036a8 <xTaskIncrementTick>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003622:	4b16      	ldr	r3, [pc, #88]	@ (800367c <xTaskResumeAll+0x130>)
 8003624:	2201      	movs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3b01      	subs	r3, #1
 800362c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1f1      	bne.n	8003618 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003634:	4b12      	ldr	r3, [pc, #72]	@ (8003680 <xTaskResumeAll+0x134>)
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800363a:	4b10      	ldr	r3, [pc, #64]	@ (800367c <xTaskResumeAll+0x130>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003642:	2301      	movs	r3, #1
 8003644:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003646:	4b0f      	ldr	r3, [pc, #60]	@ (8003684 <xTaskResumeAll+0x138>)
 8003648:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003656:	f001 f8f1 	bl	800483c <vPortExitCritical>

	return xAlreadyYielded;
 800365a:	68bb      	ldr	r3, [r7, #8]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20000ccc 	.word	0x20000ccc
 8003668:	20000ca4 	.word	0x20000ca4
 800366c:	20000c64 	.word	0x20000c64
 8003670:	20000cac 	.word	0x20000cac
 8003674:	200007d4 	.word	0x200007d4
 8003678:	200007d0 	.word	0x200007d0
 800367c:	20000cb8 	.word	0x20000cb8
 8003680:	20000cb4 	.word	0x20000cb4
 8003684:	e000ed04 	.word	0xe000ed04

08003688 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800368e:	4b05      	ldr	r3, [pc, #20]	@ (80036a4 <xTaskGetTickCount+0x1c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003694:	687b      	ldr	r3, [r7, #4]
}
 8003696:	4618      	mov	r0, r3
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20000ca8 	.word	0x20000ca8

080036a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036b2:	4b4f      	ldr	r3, [pc, #316]	@ (80037f0 <xTaskIncrementTick+0x148>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f040 8090 	bne.w	80037dc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036bc:	4b4d      	ldr	r3, [pc, #308]	@ (80037f4 <xTaskIncrementTick+0x14c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3301      	adds	r3, #1
 80036c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80036c4:	4a4b      	ldr	r2, [pc, #300]	@ (80037f4 <xTaskIncrementTick+0x14c>)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d121      	bne.n	8003714 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80036d0:	4b49      	ldr	r3, [pc, #292]	@ (80037f8 <xTaskIncrementTick+0x150>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00b      	beq.n	80036f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	603b      	str	r3, [r7, #0]
}
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	e7fd      	b.n	80036ee <xTaskIncrementTick+0x46>
 80036f2:	4b41      	ldr	r3, [pc, #260]	@ (80037f8 <xTaskIncrementTick+0x150>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	4b40      	ldr	r3, [pc, #256]	@ (80037fc <xTaskIncrementTick+0x154>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a3e      	ldr	r2, [pc, #248]	@ (80037f8 <xTaskIncrementTick+0x150>)
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	4a3e      	ldr	r2, [pc, #248]	@ (80037fc <xTaskIncrementTick+0x154>)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b3e      	ldr	r3, [pc, #248]	@ (8003800 <xTaskIncrementTick+0x158>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3301      	adds	r3, #1
 800370c:	4a3c      	ldr	r2, [pc, #240]	@ (8003800 <xTaskIncrementTick+0x158>)
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	f000 fad4 	bl	8003cbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003714:	4b3b      	ldr	r3, [pc, #236]	@ (8003804 <xTaskIncrementTick+0x15c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	429a      	cmp	r2, r3
 800371c:	d349      	bcc.n	80037b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800371e:	4b36      	ldr	r3, [pc, #216]	@ (80037f8 <xTaskIncrementTick+0x150>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d104      	bne.n	8003732 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003728:	4b36      	ldr	r3, [pc, #216]	@ (8003804 <xTaskIncrementTick+0x15c>)
 800372a:	f04f 32ff 	mov.w	r2, #4294967295
 800372e:	601a      	str	r2, [r3, #0]
					break;
 8003730:	e03f      	b.n	80037b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003732:	4b31      	ldr	r3, [pc, #196]	@ (80037f8 <xTaskIncrementTick+0x150>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	429a      	cmp	r2, r3
 8003748:	d203      	bcs.n	8003752 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800374a:	4a2e      	ldr	r2, [pc, #184]	@ (8003804 <xTaskIncrementTick+0x15c>)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003750:	e02f      	b.n	80037b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	3304      	adds	r3, #4
 8003756:	4618      	mov	r0, r3
 8003758:	f7fe ff1a 	bl	8002590 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003760:	2b00      	cmp	r3, #0
 8003762:	d004      	beq.n	800376e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	3318      	adds	r3, #24
 8003768:	4618      	mov	r0, r3
 800376a:	f7fe ff11 	bl	8002590 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003772:	4b25      	ldr	r3, [pc, #148]	@ (8003808 <xTaskIncrementTick+0x160>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d903      	bls.n	8003782 <xTaskIncrementTick+0xda>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377e:	4a22      	ldr	r2, [pc, #136]	@ (8003808 <xTaskIncrementTick+0x160>)
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4a1f      	ldr	r2, [pc, #124]	@ (800380c <xTaskIncrementTick+0x164>)
 8003790:	441a      	add	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	3304      	adds	r3, #4
 8003796:	4619      	mov	r1, r3
 8003798:	4610      	mov	r0, r2
 800379a:	f7fe fe9c 	bl	80024d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003810 <xTaskIncrementTick+0x168>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d3b8      	bcc.n	800371e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80037ac:	2301      	movs	r3, #1
 80037ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037b0:	e7b5      	b.n	800371e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037b2:	4b17      	ldr	r3, [pc, #92]	@ (8003810 <xTaskIncrementTick+0x168>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037b8:	4914      	ldr	r1, [pc, #80]	@ (800380c <xTaskIncrementTick+0x164>)
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d901      	bls.n	80037ce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80037ca:	2301      	movs	r3, #1
 80037cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80037ce:	4b11      	ldr	r3, [pc, #68]	@ (8003814 <xTaskIncrementTick+0x16c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d007      	beq.n	80037e6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80037d6:	2301      	movs	r3, #1
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	e004      	b.n	80037e6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80037dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003818 <xTaskIncrementTick+0x170>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3301      	adds	r3, #1
 80037e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003818 <xTaskIncrementTick+0x170>)
 80037e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80037e6:	697b      	ldr	r3, [r7, #20]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	20000ccc 	.word	0x20000ccc
 80037f4:	20000ca8 	.word	0x20000ca8
 80037f8:	20000c5c 	.word	0x20000c5c
 80037fc:	20000c60 	.word	0x20000c60
 8003800:	20000cbc 	.word	0x20000cbc
 8003804:	20000cc4 	.word	0x20000cc4
 8003808:	20000cac 	.word	0x20000cac
 800380c:	200007d4 	.word	0x200007d4
 8003810:	200007d0 	.word	0x200007d0
 8003814:	20000cb8 	.word	0x20000cb8
 8003818:	20000cb4 	.word	0x20000cb4

0800381c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003822:	4b28      	ldr	r3, [pc, #160]	@ (80038c4 <vTaskSwitchContext+0xa8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800382a:	4b27      	ldr	r3, [pc, #156]	@ (80038c8 <vTaskSwitchContext+0xac>)
 800382c:	2201      	movs	r2, #1
 800382e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003830:	e042      	b.n	80038b8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003832:	4b25      	ldr	r3, [pc, #148]	@ (80038c8 <vTaskSwitchContext+0xac>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003838:	4b24      	ldr	r3, [pc, #144]	@ (80038cc <vTaskSwitchContext+0xb0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	e011      	b.n	8003864 <vTaskSwitchContext+0x48>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10b      	bne.n	800385e <vTaskSwitchContext+0x42>
	__asm volatile
 8003846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800384a:	f383 8811 	msr	BASEPRI, r3
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	607b      	str	r3, [r7, #4]
}
 8003858:	bf00      	nop
 800385a:	bf00      	nop
 800385c:	e7fd      	b.n	800385a <vTaskSwitchContext+0x3e>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	3b01      	subs	r3, #1
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	491a      	ldr	r1, [pc, #104]	@ (80038d0 <vTaskSwitchContext+0xb4>)
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0e3      	beq.n	8003840 <vTaskSwitchContext+0x24>
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4a13      	ldr	r2, [pc, #76]	@ (80038d0 <vTaskSwitchContext+0xb4>)
 8003884:	4413      	add	r3, r2
 8003886:	60bb      	str	r3, [r7, #8]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	3308      	adds	r3, #8
 800389a:	429a      	cmp	r2, r3
 800389c:	d104      	bne.n	80038a8 <vTaskSwitchContext+0x8c>
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	605a      	str	r2, [r3, #4]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	4a09      	ldr	r2, [pc, #36]	@ (80038d4 <vTaskSwitchContext+0xb8>)
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	4a06      	ldr	r2, [pc, #24]	@ (80038cc <vTaskSwitchContext+0xb0>)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6013      	str	r3, [r2, #0]
}
 80038b8:	bf00      	nop
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	20000ccc 	.word	0x20000ccc
 80038c8:	20000cb8 	.word	0x20000cb8
 80038cc:	20000cac 	.word	0x20000cac
 80038d0:	200007d4 	.word	0x200007d4
 80038d4:	200007d0 	.word	0x200007d0

080038d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10b      	bne.n	8003900 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80038e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	60fb      	str	r3, [r7, #12]
}
 80038fa:	bf00      	nop
 80038fc:	bf00      	nop
 80038fe:	e7fd      	b.n	80038fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003900:	4b07      	ldr	r3, [pc, #28]	@ (8003920 <vTaskPlaceOnEventList+0x48>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3318      	adds	r3, #24
 8003906:	4619      	mov	r1, r3
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7fe fe08 	bl	800251e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800390e:	2101      	movs	r1, #1
 8003910:	6838      	ldr	r0, [r7, #0]
 8003912:	f000 fa81 	bl	8003e18 <prvAddCurrentTaskToDelayedList>
}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	200007d0 	.word	0x200007d0

08003924 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10b      	bne.n	800394e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	617b      	str	r3, [r7, #20]
}
 8003948:	bf00      	nop
 800394a:	bf00      	nop
 800394c:	e7fd      	b.n	800394a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800394e:	4b0a      	ldr	r3, [pc, #40]	@ (8003978 <vTaskPlaceOnEventListRestricted+0x54>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3318      	adds	r3, #24
 8003954:	4619      	mov	r1, r3
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f7fe fdbd 	bl	80024d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003962:	f04f 33ff 	mov.w	r3, #4294967295
 8003966:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	68b8      	ldr	r0, [r7, #8]
 800396c:	f000 fa54 	bl	8003e18 <prvAddCurrentTaskToDelayedList>
	}
 8003970:	bf00      	nop
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	200007d0 	.word	0x200007d0

0800397c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10b      	bne.n	80039aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003996:	f383 8811 	msr	BASEPRI, r3
 800399a:	f3bf 8f6f 	isb	sy
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	60fb      	str	r3, [r7, #12]
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	e7fd      	b.n	80039a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	3318      	adds	r3, #24
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe fdee 	bl	8002590 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039b4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a2c <xTaskRemoveFromEventList+0xb0>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d11d      	bne.n	80039f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	3304      	adds	r3, #4
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fe fde5 	bl	8002590 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ca:	4b19      	ldr	r3, [pc, #100]	@ (8003a30 <xTaskRemoveFromEventList+0xb4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d903      	bls.n	80039da <xTaskRemoveFromEventList+0x5e>
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d6:	4a16      	ldr	r2, [pc, #88]	@ (8003a30 <xTaskRemoveFromEventList+0xb4>)
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4a13      	ldr	r2, [pc, #76]	@ (8003a34 <xTaskRemoveFromEventList+0xb8>)
 80039e8:	441a      	add	r2, r3
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	3304      	adds	r3, #4
 80039ee:	4619      	mov	r1, r3
 80039f0:	4610      	mov	r0, r2
 80039f2:	f7fe fd70 	bl	80024d6 <vListInsertEnd>
 80039f6:	e005      	b.n	8003a04 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	3318      	adds	r3, #24
 80039fc:	4619      	mov	r1, r3
 80039fe:	480e      	ldr	r0, [pc, #56]	@ (8003a38 <xTaskRemoveFromEventList+0xbc>)
 8003a00:	f7fe fd69 	bl	80024d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a08:	4b0c      	ldr	r3, [pc, #48]	@ (8003a3c <xTaskRemoveFromEventList+0xc0>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d905      	bls.n	8003a1e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a12:	2301      	movs	r3, #1
 8003a14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a16:	4b0a      	ldr	r3, [pc, #40]	@ (8003a40 <xTaskRemoveFromEventList+0xc4>)
 8003a18:	2201      	movs	r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	e001      	b.n	8003a22 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a22:	697b      	ldr	r3, [r7, #20]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000ccc 	.word	0x20000ccc
 8003a30:	20000cac 	.word	0x20000cac
 8003a34:	200007d4 	.word	0x200007d4
 8003a38:	20000c64 	.word	0x20000c64
 8003a3c:	200007d0 	.word	0x200007d0
 8003a40:	20000cb8 	.word	0x20000cb8

08003a44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a4c:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <vTaskInternalSetTimeOutState+0x24>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a54:	4b05      	ldr	r3, [pc, #20]	@ (8003a6c <vTaskInternalSetTimeOutState+0x28>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	605a      	str	r2, [r3, #4]
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	20000cbc 	.word	0x20000cbc
 8003a6c:	20000ca8 	.word	0x20000ca8

08003a70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10b      	bne.n	8003a98 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	613b      	str	r3, [r7, #16]
}
 8003a92:	bf00      	nop
 8003a94:	bf00      	nop
 8003a96:	e7fd      	b.n	8003a94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10b      	bne.n	8003ab6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	60fb      	str	r3, [r7, #12]
}
 8003ab0:	bf00      	nop
 8003ab2:	bf00      	nop
 8003ab4:	e7fd      	b.n	8003ab2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003ab6:	f000 fe8f 	bl	80047d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003aba:	4b1d      	ldr	r3, [pc, #116]	@ (8003b30 <xTaskCheckForTimeOut+0xc0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad2:	d102      	bne.n	8003ada <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	e023      	b.n	8003b22 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	4b15      	ldr	r3, [pc, #84]	@ (8003b34 <xTaskCheckForTimeOut+0xc4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d007      	beq.n	8003af6 <xTaskCheckForTimeOut+0x86>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d302      	bcc.n	8003af6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003af0:	2301      	movs	r3, #1
 8003af2:	61fb      	str	r3, [r7, #28]
 8003af4:	e015      	b.n	8003b22 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d20b      	bcs.n	8003b18 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	1ad2      	subs	r2, r2, r3
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff ff99 	bl	8003a44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	e004      	b.n	8003b22 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b22:	f000 fe8b 	bl	800483c <vPortExitCritical>

	return xReturn;
 8003b26:	69fb      	ldr	r3, [r7, #28]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000ca8 	.word	0x20000ca8
 8003b34:	20000cbc 	.word	0x20000cbc

08003b38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b3c:	4b03      	ldr	r3, [pc, #12]	@ (8003b4c <vTaskMissedYield+0x14>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
}
 8003b42:	bf00      	nop
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	20000cb8 	.word	0x20000cb8

08003b50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b58:	f000 f852 	bl	8003c00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b5c:	4b06      	ldr	r3, [pc, #24]	@ (8003b78 <prvIdleTask+0x28>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d9f9      	bls.n	8003b58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b64:	4b05      	ldr	r3, [pc, #20]	@ (8003b7c <prvIdleTask+0x2c>)
 8003b66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b74:	e7f0      	b.n	8003b58 <prvIdleTask+0x8>
 8003b76:	bf00      	nop
 8003b78:	200007d4 	.word	0x200007d4
 8003b7c:	e000ed04 	.word	0xe000ed04

08003b80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b86:	2300      	movs	r3, #0
 8003b88:	607b      	str	r3, [r7, #4]
 8003b8a:	e00c      	b.n	8003ba6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4a12      	ldr	r2, [pc, #72]	@ (8003be0 <prvInitialiseTaskLists+0x60>)
 8003b98:	4413      	add	r3, r2
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fe fc6e 	bl	800247c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b37      	cmp	r3, #55	@ 0x37
 8003baa:	d9ef      	bls.n	8003b8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bac:	480d      	ldr	r0, [pc, #52]	@ (8003be4 <prvInitialiseTaskLists+0x64>)
 8003bae:	f7fe fc65 	bl	800247c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bb2:	480d      	ldr	r0, [pc, #52]	@ (8003be8 <prvInitialiseTaskLists+0x68>)
 8003bb4:	f7fe fc62 	bl	800247c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bb8:	480c      	ldr	r0, [pc, #48]	@ (8003bec <prvInitialiseTaskLists+0x6c>)
 8003bba:	f7fe fc5f 	bl	800247c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003bbe:	480c      	ldr	r0, [pc, #48]	@ (8003bf0 <prvInitialiseTaskLists+0x70>)
 8003bc0:	f7fe fc5c 	bl	800247c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bc4:	480b      	ldr	r0, [pc, #44]	@ (8003bf4 <prvInitialiseTaskLists+0x74>)
 8003bc6:	f7fe fc59 	bl	800247c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bca:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <prvInitialiseTaskLists+0x78>)
 8003bcc:	4a05      	ldr	r2, [pc, #20]	@ (8003be4 <prvInitialiseTaskLists+0x64>)
 8003bce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bfc <prvInitialiseTaskLists+0x7c>)
 8003bd2:	4a05      	ldr	r2, [pc, #20]	@ (8003be8 <prvInitialiseTaskLists+0x68>)
 8003bd4:	601a      	str	r2, [r3, #0]
}
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	200007d4 	.word	0x200007d4
 8003be4:	20000c34 	.word	0x20000c34
 8003be8:	20000c48 	.word	0x20000c48
 8003bec:	20000c64 	.word	0x20000c64
 8003bf0:	20000c78 	.word	0x20000c78
 8003bf4:	20000c90 	.word	0x20000c90
 8003bf8:	20000c5c 	.word	0x20000c5c
 8003bfc:	20000c60 	.word	0x20000c60

08003c00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c06:	e019      	b.n	8003c3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c08:	f000 fde6 	bl	80047d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c0c:	4b10      	ldr	r3, [pc, #64]	@ (8003c50 <prvCheckTasksWaitingTermination+0x50>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3304      	adds	r3, #4
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fe fcb9 	bl	8002590 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c54 <prvCheckTasksWaitingTermination+0x54>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	4a0b      	ldr	r2, [pc, #44]	@ (8003c54 <prvCheckTasksWaitingTermination+0x54>)
 8003c26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c28:	4b0b      	ldr	r3, [pc, #44]	@ (8003c58 <prvCheckTasksWaitingTermination+0x58>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c58 <prvCheckTasksWaitingTermination+0x58>)
 8003c30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c32:	f000 fe03 	bl	800483c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f810 	bl	8003c5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c3c:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <prvCheckTasksWaitingTermination+0x58>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1e1      	bne.n	8003c08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000c78 	.word	0x20000c78
 8003c54:	20000ca4 	.word	0x20000ca4
 8003c58:	20000c8c 	.word	0x20000c8c

08003c5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d108      	bne.n	8003c80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 ffa0 	bl	8004bb8 <vPortFree>
				vPortFree( pxTCB );
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 ff9d 	bl	8004bb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c7e:	e019      	b.n	8003cb4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d103      	bne.n	8003c92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 ff94 	bl	8004bb8 <vPortFree>
	}
 8003c90:	e010      	b.n	8003cb4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d00b      	beq.n	8003cb4 <prvDeleteTCB+0x58>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	60fb      	str	r3, [r7, #12]
}
 8003cae:	bf00      	nop
 8003cb0:	bf00      	nop
 8003cb2:	e7fd      	b.n	8003cb0 <prvDeleteTCB+0x54>
	}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf4 <prvResetNextTaskUnblockTime+0x38>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d104      	bne.n	8003cd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf8 <prvResetNextTaskUnblockTime+0x3c>)
 8003cce:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cd4:	e008      	b.n	8003ce8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cd6:	4b07      	ldr	r3, [pc, #28]	@ (8003cf4 <prvResetNextTaskUnblockTime+0x38>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4a04      	ldr	r2, [pc, #16]	@ (8003cf8 <prvResetNextTaskUnblockTime+0x3c>)
 8003ce6:	6013      	str	r3, [r2, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	20000c5c 	.word	0x20000c5c
 8003cf8:	20000cc4 	.word	0x20000cc4

08003cfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d02:	4b0b      	ldr	r3, [pc, #44]	@ (8003d30 <xTaskGetSchedulerState+0x34>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d102      	bne.n	8003d10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	607b      	str	r3, [r7, #4]
 8003d0e:	e008      	b.n	8003d22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d10:	4b08      	ldr	r3, [pc, #32]	@ (8003d34 <xTaskGetSchedulerState+0x38>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d102      	bne.n	8003d1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	607b      	str	r3, [r7, #4]
 8003d1c:	e001      	b.n	8003d22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d22:	687b      	ldr	r3, [r7, #4]
	}
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	20000cb0 	.word	0x20000cb0
 8003d34:	20000ccc 	.word	0x20000ccc

08003d38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d058      	beq.n	8003e00 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e0c <xTaskPriorityDisinherit+0xd4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d00b      	beq.n	8003d70 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	60fb      	str	r3, [r7, #12]
}
 8003d6a:	bf00      	nop
 8003d6c:	bf00      	nop
 8003d6e:	e7fd      	b.n	8003d6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10b      	bne.n	8003d90 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	60bb      	str	r3, [r7, #8]
}
 8003d8a:	bf00      	nop
 8003d8c:	bf00      	nop
 8003d8e:	e7fd      	b.n	8003d8c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d94:	1e5a      	subs	r2, r3, #1
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d02c      	beq.n	8003e00 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d128      	bne.n	8003e00 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	3304      	adds	r3, #4
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe fbec 	bl	8002590 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e10 <xTaskPriorityDisinherit+0xd8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d903      	bls.n	8003de0 <xTaskPriorityDisinherit+0xa8>
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ddc:	4a0c      	ldr	r2, [pc, #48]	@ (8003e10 <xTaskPriorityDisinherit+0xd8>)
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4a09      	ldr	r2, [pc, #36]	@ (8003e14 <xTaskPriorityDisinherit+0xdc>)
 8003dee:	441a      	add	r2, r3
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f7fe fb6d 	bl	80024d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e00:	697b      	ldr	r3, [r7, #20]
	}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	200007d0 	.word	0x200007d0
 8003e10:	20000cac 	.word	0x20000cac
 8003e14:	200007d4 	.word	0x200007d4

08003e18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e22:	4b21      	ldr	r3, [pc, #132]	@ (8003ea8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e28:	4b20      	ldr	r3, [pc, #128]	@ (8003eac <prvAddCurrentTaskToDelayedList+0x94>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe fbae 	bl	8002590 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3a:	d10a      	bne.n	8003e52 <prvAddCurrentTaskToDelayedList+0x3a>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e42:	4b1a      	ldr	r3, [pc, #104]	@ (8003eac <prvAddCurrentTaskToDelayedList+0x94>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3304      	adds	r3, #4
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4819      	ldr	r0, [pc, #100]	@ (8003eb0 <prvAddCurrentTaskToDelayedList+0x98>)
 8003e4c:	f7fe fb43 	bl	80024d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e50:	e026      	b.n	8003ea0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4413      	add	r3, r2
 8003e58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e5a:	4b14      	ldr	r3, [pc, #80]	@ (8003eac <prvAddCurrentTaskToDelayedList+0x94>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d209      	bcs.n	8003e7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e6a:	4b12      	ldr	r3, [pc, #72]	@ (8003eb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003eac <prvAddCurrentTaskToDelayedList+0x94>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3304      	adds	r3, #4
 8003e74:	4619      	mov	r1, r3
 8003e76:	4610      	mov	r0, r2
 8003e78:	f7fe fb51 	bl	800251e <vListInsert>
}
 8003e7c:	e010      	b.n	8003ea0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4b0a      	ldr	r3, [pc, #40]	@ (8003eac <prvAddCurrentTaskToDelayedList+0x94>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3304      	adds	r3, #4
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	f7fe fb47 	bl	800251e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e90:	4b0a      	ldr	r3, [pc, #40]	@ (8003ebc <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d202      	bcs.n	8003ea0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003e9a:	4a08      	ldr	r2, [pc, #32]	@ (8003ebc <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	6013      	str	r3, [r2, #0]
}
 8003ea0:	bf00      	nop
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000ca8 	.word	0x20000ca8
 8003eac:	200007d0 	.word	0x200007d0
 8003eb0:	20000c90 	.word	0x20000c90
 8003eb4:	20000c60 	.word	0x20000c60
 8003eb8:	20000c5c 	.word	0x20000c5c
 8003ebc:	20000cc4 	.word	0x20000cc4

08003ec0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08a      	sub	sp, #40	@ 0x28
 8003ec4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003eca:	f000 fb13 	bl	80044f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003ece:	4b1d      	ldr	r3, [pc, #116]	@ (8003f44 <xTimerCreateTimerTask+0x84>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d021      	beq.n	8003f1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003ede:	1d3a      	adds	r2, r7, #4
 8003ee0:	f107 0108 	add.w	r1, r7, #8
 8003ee4:	f107 030c 	add.w	r3, r7, #12
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fe faad 	bl	8002448 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	9202      	str	r2, [sp, #8]
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	2302      	movs	r3, #2
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	2300      	movs	r3, #0
 8003efe:	460a      	mov	r2, r1
 8003f00:	4911      	ldr	r1, [pc, #68]	@ (8003f48 <xTimerCreateTimerTask+0x88>)
 8003f02:	4812      	ldr	r0, [pc, #72]	@ (8003f4c <xTimerCreateTimerTask+0x8c>)
 8003f04:	f7ff f868 	bl	8002fd8 <xTaskCreateStatic>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	4a11      	ldr	r2, [pc, #68]	@ (8003f50 <xTimerCreateTimerTask+0x90>)
 8003f0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003f0e:	4b10      	ldr	r3, [pc, #64]	@ (8003f50 <xTimerCreateTimerTask+0x90>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003f16:	2301      	movs	r3, #1
 8003f18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10b      	bne.n	8003f38 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	613b      	str	r3, [r7, #16]
}
 8003f32:	bf00      	nop
 8003f34:	bf00      	nop
 8003f36:	e7fd      	b.n	8003f34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f38:	697b      	ldr	r3, [r7, #20]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20000d00 	.word	0x20000d00
 8003f48:	08004ecc 	.word	0x08004ecc
 8003f4c:	0800408d 	.word	0x0800408d
 8003f50:	20000d04 	.word	0x20000d04

08003f54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08a      	sub	sp, #40	@ 0x28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10b      	bne.n	8003f84 <xTimerGenericCommand+0x30>
	__asm volatile
 8003f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	623b      	str	r3, [r7, #32]
}
 8003f7e:	bf00      	nop
 8003f80:	bf00      	nop
 8003f82:	e7fd      	b.n	8003f80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f84:	4b19      	ldr	r3, [pc, #100]	@ (8003fec <xTimerGenericCommand+0x98>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d02a      	beq.n	8003fe2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b05      	cmp	r3, #5
 8003f9c:	dc18      	bgt.n	8003fd0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f9e:	f7ff fead 	bl	8003cfc <xTaskGetSchedulerState>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d109      	bne.n	8003fbc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003fa8:	4b10      	ldr	r3, [pc, #64]	@ (8003fec <xTimerGenericCommand+0x98>)
 8003faa:	6818      	ldr	r0, [r3, #0]
 8003fac:	f107 0110 	add.w	r1, r7, #16
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fb4:	f7fe fc20 	bl	80027f8 <xQueueGenericSend>
 8003fb8:	6278      	str	r0, [r7, #36]	@ 0x24
 8003fba:	e012      	b.n	8003fe2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003fec <xTimerGenericCommand+0x98>)
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	f107 0110 	add.w	r1, r7, #16
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f7fe fc16 	bl	80027f8 <xQueueGenericSend>
 8003fcc:	6278      	str	r0, [r7, #36]	@ 0x24
 8003fce:	e008      	b.n	8003fe2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003fd0:	4b06      	ldr	r3, [pc, #24]	@ (8003fec <xTimerGenericCommand+0x98>)
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	f107 0110 	add.w	r1, r7, #16
 8003fd8:	2300      	movs	r3, #0
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	f7fe fd0e 	bl	80029fc <xQueueGenericSendFromISR>
 8003fe0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3728      	adds	r7, #40	@ 0x28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20000d00 	.word	0x20000d00

08003ff0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ffa:	4b23      	ldr	r3, [pc, #140]	@ (8004088 <prvProcessExpiredTimer+0x98>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	3304      	adds	r3, #4
 8004008:	4618      	mov	r0, r3
 800400a:	f7fe fac1 	bl	8002590 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d023      	beq.n	8004064 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	699a      	ldr	r2, [r3, #24]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	18d1      	adds	r1, r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	6978      	ldr	r0, [r7, #20]
 800402a:	f000 f8d5 	bl	80041d8 <prvInsertTimerInActiveList>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d020      	beq.n	8004076 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004034:	2300      	movs	r3, #0
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	2300      	movs	r3, #0
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	2100      	movs	r1, #0
 800403e:	6978      	ldr	r0, [r7, #20]
 8004040:	f7ff ff88 	bl	8003f54 <xTimerGenericCommand>
 8004044:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d114      	bne.n	8004076 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	60fb      	str	r3, [r7, #12]
}
 800405e:	bf00      	nop
 8004060:	bf00      	nop
 8004062:	e7fd      	b.n	8004060 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800406a:	f023 0301 	bic.w	r3, r3, #1
 800406e:	b2da      	uxtb	r2, r3
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	6978      	ldr	r0, [r7, #20]
 800407c:	4798      	blx	r3
}
 800407e:	bf00      	nop
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20000cf8 	.word	0x20000cf8

0800408c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004094:	f107 0308 	add.w	r3, r7, #8
 8004098:	4618      	mov	r0, r3
 800409a:	f000 f859 	bl	8004150 <prvGetNextExpireTime>
 800409e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	4619      	mov	r1, r3
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f805 	bl	80040b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80040aa:	f000 f8d7 	bl	800425c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040ae:	bf00      	nop
 80040b0:	e7f0      	b.n	8004094 <prvTimerTask+0x8>
	...

080040b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80040be:	f7ff fa37 	bl	8003530 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040c2:	f107 0308 	add.w	r3, r7, #8
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 f866 	bl	8004198 <prvSampleTimeNow>
 80040cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d130      	bne.n	8004136 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10a      	bne.n	80040f0 <prvProcessTimerOrBlockTask+0x3c>
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d806      	bhi.n	80040f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80040e2:	f7ff fa33 	bl	800354c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040e6:	68f9      	ldr	r1, [r7, #12]
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff ff81 	bl	8003ff0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80040ee:	e024      	b.n	800413a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040f6:	4b13      	ldr	r3, [pc, #76]	@ (8004144 <prvProcessTimerOrBlockTask+0x90>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <prvProcessTimerOrBlockTask+0x50>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <prvProcessTimerOrBlockTask+0x52>
 8004104:	2300      	movs	r3, #0
 8004106:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004108:	4b0f      	ldr	r3, [pc, #60]	@ (8004148 <prvProcessTimerOrBlockTask+0x94>)
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	4619      	mov	r1, r3
 8004116:	f7fe ff2b 	bl	8002f70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800411a:	f7ff fa17 	bl	800354c <xTaskResumeAll>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10a      	bne.n	800413a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004124:	4b09      	ldr	r3, [pc, #36]	@ (800414c <prvProcessTimerOrBlockTask+0x98>)
 8004126:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	f3bf 8f6f 	isb	sy
}
 8004134:	e001      	b.n	800413a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004136:	f7ff fa09 	bl	800354c <xTaskResumeAll>
}
 800413a:	bf00      	nop
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20000cfc 	.word	0x20000cfc
 8004148:	20000d00 	.word	0x20000d00
 800414c:	e000ed04 	.word	0xe000ed04

08004150 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004158:	4b0e      	ldr	r3, [pc, #56]	@ (8004194 <prvGetNextExpireTime+0x44>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <prvGetNextExpireTime+0x16>
 8004162:	2201      	movs	r2, #1
 8004164:	e000      	b.n	8004168 <prvGetNextExpireTime+0x18>
 8004166:	2200      	movs	r2, #0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d105      	bne.n	8004180 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004174:	4b07      	ldr	r3, [pc, #28]	@ (8004194 <prvGetNextExpireTime+0x44>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	e001      	b.n	8004184 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004184:	68fb      	ldr	r3, [r7, #12]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20000cf8 	.word	0x20000cf8

08004198 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80041a0:	f7ff fa72 	bl	8003688 <xTaskGetTickCount>
 80041a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80041a6:	4b0b      	ldr	r3, [pc, #44]	@ (80041d4 <prvSampleTimeNow+0x3c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d205      	bcs.n	80041bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80041b0:	f000 f93a 	bl	8004428 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	e002      	b.n	80041c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80041c2:	4a04      	ldr	r2, [pc, #16]	@ (80041d4 <prvSampleTimeNow+0x3c>)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80041c8:	68fb      	ldr	r3, [r7, #12]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000d08 	.word	0x20000d08

080041d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d812      	bhi.n	8004224 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	1ad2      	subs	r2, r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	429a      	cmp	r2, r3
 800420a:	d302      	bcc.n	8004212 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800420c:	2301      	movs	r3, #1
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	e01b      	b.n	800424a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004212:	4b10      	ldr	r3, [pc, #64]	@ (8004254 <prvInsertTimerInActiveList+0x7c>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3304      	adds	r3, #4
 800421a:	4619      	mov	r1, r3
 800421c:	4610      	mov	r0, r2
 800421e:	f7fe f97e 	bl	800251e <vListInsert>
 8004222:	e012      	b.n	800424a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d206      	bcs.n	800423a <prvInsertTimerInActiveList+0x62>
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d302      	bcc.n	800423a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004234:	2301      	movs	r3, #1
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	e007      	b.n	800424a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800423a:	4b07      	ldr	r3, [pc, #28]	@ (8004258 <prvInsertTimerInActiveList+0x80>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	3304      	adds	r3, #4
 8004242:	4619      	mov	r1, r3
 8004244:	4610      	mov	r0, r2
 8004246:	f7fe f96a 	bl	800251e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800424a:	697b      	ldr	r3, [r7, #20]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	20000cfc 	.word	0x20000cfc
 8004258:	20000cf8 	.word	0x20000cf8

0800425c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08e      	sub	sp, #56	@ 0x38
 8004260:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004262:	e0ce      	b.n	8004402 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	da19      	bge.n	800429e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800426a:	1d3b      	adds	r3, r7, #4
 800426c:	3304      	adds	r3, #4
 800426e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10b      	bne.n	800428e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	61fb      	str	r3, [r7, #28]
}
 8004288:	bf00      	nop
 800428a:	bf00      	nop
 800428c:	e7fd      	b.n	800428a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800428e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004294:	6850      	ldr	r0, [r2, #4]
 8004296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004298:	6892      	ldr	r2, [r2, #8]
 800429a:	4611      	mov	r1, r2
 800429c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f2c0 80ae 	blt.w	8004402 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d004      	beq.n	80042bc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b4:	3304      	adds	r3, #4
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fe f96a 	bl	8002590 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042bc:	463b      	mov	r3, r7
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff ff6a 	bl	8004198 <prvSampleTimeNow>
 80042c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b09      	cmp	r3, #9
 80042ca:	f200 8097 	bhi.w	80043fc <prvProcessReceivedCommands+0x1a0>
 80042ce:	a201      	add	r2, pc, #4	@ (adr r2, 80042d4 <prvProcessReceivedCommands+0x78>)
 80042d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d4:	080042fd 	.word	0x080042fd
 80042d8:	080042fd 	.word	0x080042fd
 80042dc:	080042fd 	.word	0x080042fd
 80042e0:	08004373 	.word	0x08004373
 80042e4:	08004387 	.word	0x08004387
 80042e8:	080043d3 	.word	0x080043d3
 80042ec:	080042fd 	.word	0x080042fd
 80042f0:	080042fd 	.word	0x080042fd
 80042f4:	08004373 	.word	0x08004373
 80042f8:	08004387 	.word	0x08004387
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	b2da      	uxtb	r2, r3
 8004308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	18d1      	adds	r1, r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800431a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800431c:	f7ff ff5c 	bl	80041d8 <prvInsertTimerInActiveList>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d06c      	beq.n	8004400 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800432c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800432e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004330:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d061      	beq.n	8004400 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	441a      	add	r2, r3
 8004344:	2300      	movs	r3, #0
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	2300      	movs	r3, #0
 800434a:	2100      	movs	r1, #0
 800434c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800434e:	f7ff fe01 	bl	8003f54 <xTimerGenericCommand>
 8004352:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d152      	bne.n	8004400 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	61bb      	str	r3, [r7, #24]
}
 800436c:	bf00      	nop
 800436e:	bf00      	nop
 8004370:	e7fd      	b.n	800436e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004374:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004378:	f023 0301 	bic.w	r3, r3, #1
 800437c:	b2da      	uxtb	r2, r3
 800437e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004380:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004384:	e03d      	b.n	8004402 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004388:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	b2da      	uxtb	r2, r3
 8004392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004394:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800439e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10b      	bne.n	80043be <prvProcessReceivedCommands+0x162>
	__asm volatile
 80043a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	617b      	str	r3, [r7, #20]
}
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop
 80043bc:	e7fd      	b.n	80043ba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c4:	18d1      	adds	r1, r2, r3
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043cc:	f7ff ff04 	bl	80041d8 <prvInsertTimerInActiveList>
					break;
 80043d0:	e017      	b.n	8004402 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80043d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d103      	bne.n	80043e8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80043e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043e2:	f000 fbe9 	bl	8004bb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80043e6:	e00c      	b.n	8004402 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043ee:	f023 0301 	bic.w	r3, r3, #1
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80043fa:	e002      	b.n	8004402 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80043fc:	bf00      	nop
 80043fe:	e000      	b.n	8004402 <prvProcessReceivedCommands+0x1a6>
					break;
 8004400:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004402:	4b08      	ldr	r3, [pc, #32]	@ (8004424 <prvProcessReceivedCommands+0x1c8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	1d39      	adds	r1, r7, #4
 8004408:	2200      	movs	r2, #0
 800440a:	4618      	mov	r0, r3
 800440c:	f7fe fb94 	bl	8002b38 <xQueueReceive>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	f47f af26 	bne.w	8004264 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004418:	bf00      	nop
 800441a:	bf00      	nop
 800441c:	3730      	adds	r7, #48	@ 0x30
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000d00 	.word	0x20000d00

08004428 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b088      	sub	sp, #32
 800442c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800442e:	e049      	b.n	80044c4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004430:	4b2e      	ldr	r3, [pc, #184]	@ (80044ec <prvSwitchTimerLists+0xc4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800443a:	4b2c      	ldr	r3, [pc, #176]	@ (80044ec <prvSwitchTimerLists+0xc4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	3304      	adds	r3, #4
 8004448:	4618      	mov	r0, r3
 800444a:	f7fe f8a1 	bl	8002590 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02f      	beq.n	80044c4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4413      	add	r3, r2
 800446c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	429a      	cmp	r2, r3
 8004474:	d90e      	bls.n	8004494 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004482:	4b1a      	ldr	r3, [pc, #104]	@ (80044ec <prvSwitchTimerLists+0xc4>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3304      	adds	r3, #4
 800448a:	4619      	mov	r1, r3
 800448c:	4610      	mov	r0, r2
 800448e:	f7fe f846 	bl	800251e <vListInsert>
 8004492:	e017      	b.n	80044c4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004494:	2300      	movs	r3, #0
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	2300      	movs	r3, #0
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	2100      	movs	r1, #0
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f7ff fd58 	bl	8003f54 <xTimerGenericCommand>
 80044a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10b      	bne.n	80044c4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80044ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	603b      	str	r3, [r7, #0]
}
 80044be:	bf00      	nop
 80044c0:	bf00      	nop
 80044c2:	e7fd      	b.n	80044c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044c4:	4b09      	ldr	r3, [pc, #36]	@ (80044ec <prvSwitchTimerLists+0xc4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1b0      	bne.n	8004430 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80044ce:	4b07      	ldr	r3, [pc, #28]	@ (80044ec <prvSwitchTimerLists+0xc4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80044d4:	4b06      	ldr	r3, [pc, #24]	@ (80044f0 <prvSwitchTimerLists+0xc8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a04      	ldr	r2, [pc, #16]	@ (80044ec <prvSwitchTimerLists+0xc4>)
 80044da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80044dc:	4a04      	ldr	r2, [pc, #16]	@ (80044f0 <prvSwitchTimerLists+0xc8>)
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	6013      	str	r3, [r2, #0]
}
 80044e2:	bf00      	nop
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000cf8 	.word	0x20000cf8
 80044f0:	20000cfc 	.word	0x20000cfc

080044f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80044fa:	f000 f96d 	bl	80047d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80044fe:	4b15      	ldr	r3, [pc, #84]	@ (8004554 <prvCheckForValidListAndQueue+0x60>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d120      	bne.n	8004548 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004506:	4814      	ldr	r0, [pc, #80]	@ (8004558 <prvCheckForValidListAndQueue+0x64>)
 8004508:	f7fd ffb8 	bl	800247c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800450c:	4813      	ldr	r0, [pc, #76]	@ (800455c <prvCheckForValidListAndQueue+0x68>)
 800450e:	f7fd ffb5 	bl	800247c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004512:	4b13      	ldr	r3, [pc, #76]	@ (8004560 <prvCheckForValidListAndQueue+0x6c>)
 8004514:	4a10      	ldr	r2, [pc, #64]	@ (8004558 <prvCheckForValidListAndQueue+0x64>)
 8004516:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004518:	4b12      	ldr	r3, [pc, #72]	@ (8004564 <prvCheckForValidListAndQueue+0x70>)
 800451a:	4a10      	ldr	r2, [pc, #64]	@ (800455c <prvCheckForValidListAndQueue+0x68>)
 800451c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800451e:	2300      	movs	r3, #0
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	4b11      	ldr	r3, [pc, #68]	@ (8004568 <prvCheckForValidListAndQueue+0x74>)
 8004524:	4a11      	ldr	r2, [pc, #68]	@ (800456c <prvCheckForValidListAndQueue+0x78>)
 8004526:	2110      	movs	r1, #16
 8004528:	200a      	movs	r0, #10
 800452a:	f7fe f8c5 	bl	80026b8 <xQueueGenericCreateStatic>
 800452e:	4603      	mov	r3, r0
 8004530:	4a08      	ldr	r2, [pc, #32]	@ (8004554 <prvCheckForValidListAndQueue+0x60>)
 8004532:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004534:	4b07      	ldr	r3, [pc, #28]	@ (8004554 <prvCheckForValidListAndQueue+0x60>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800453c:	4b05      	ldr	r3, [pc, #20]	@ (8004554 <prvCheckForValidListAndQueue+0x60>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	490b      	ldr	r1, [pc, #44]	@ (8004570 <prvCheckForValidListAndQueue+0x7c>)
 8004542:	4618      	mov	r0, r3
 8004544:	f7fe fcea 	bl	8002f1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004548:	f000 f978 	bl	800483c <vPortExitCritical>
}
 800454c:	bf00      	nop
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000d00 	.word	0x20000d00
 8004558:	20000cd0 	.word	0x20000cd0
 800455c:	20000ce4 	.word	0x20000ce4
 8004560:	20000cf8 	.word	0x20000cf8
 8004564:	20000cfc 	.word	0x20000cfc
 8004568:	20000dac 	.word	0x20000dac
 800456c:	20000d0c 	.word	0x20000d0c
 8004570:	08004ed4 	.word	0x08004ed4

08004574 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3b04      	subs	r3, #4
 8004584:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800458c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3b04      	subs	r3, #4
 8004592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f023 0201 	bic.w	r2, r3, #1
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3b04      	subs	r3, #4
 80045a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045a4:	4a0c      	ldr	r2, [pc, #48]	@ (80045d8 <pxPortInitialiseStack+0x64>)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3b14      	subs	r3, #20
 80045ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3b04      	subs	r3, #4
 80045ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f06f 0202 	mvn.w	r2, #2
 80045c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3b20      	subs	r3, #32
 80045c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045ca:	68fb      	ldr	r3, [r7, #12]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	080045dd 	.word	0x080045dd

080045dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045e6:	4b13      	ldr	r3, [pc, #76]	@ (8004634 <prvTaskExitError+0x58>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d00b      	beq.n	8004608 <prvTaskExitError+0x2c>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	60fb      	str	r3, [r7, #12]
}
 8004602:	bf00      	nop
 8004604:	bf00      	nop
 8004606:	e7fd      	b.n	8004604 <prvTaskExitError+0x28>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	60bb      	str	r3, [r7, #8]
}
 800461a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800461c:	bf00      	nop
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0fc      	beq.n	800461e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004624:	bf00      	nop
 8004626:	bf00      	nop
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	2000000c 	.word	0x2000000c
	...

08004640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004640:	4b07      	ldr	r3, [pc, #28]	@ (8004660 <pxCurrentTCBConst2>)
 8004642:	6819      	ldr	r1, [r3, #0]
 8004644:	6808      	ldr	r0, [r1, #0]
 8004646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800464a:	f380 8809 	msr	PSP, r0
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f04f 0000 	mov.w	r0, #0
 8004656:	f380 8811 	msr	BASEPRI, r0
 800465a:	4770      	bx	lr
 800465c:	f3af 8000 	nop.w

08004660 <pxCurrentTCBConst2>:
 8004660:	200007d0 	.word	0x200007d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop

08004668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004668:	4808      	ldr	r0, [pc, #32]	@ (800468c <prvPortStartFirstTask+0x24>)
 800466a:	6800      	ldr	r0, [r0, #0]
 800466c:	6800      	ldr	r0, [r0, #0]
 800466e:	f380 8808 	msr	MSP, r0
 8004672:	f04f 0000 	mov.w	r0, #0
 8004676:	f380 8814 	msr	CONTROL, r0
 800467a:	b662      	cpsie	i
 800467c:	b661      	cpsie	f
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	df00      	svc	0
 8004688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800468a:	bf00      	nop
 800468c:	e000ed08 	.word	0xe000ed08

08004690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004696:	4b47      	ldr	r3, [pc, #284]	@ (80047b4 <xPortStartScheduler+0x124>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a47      	ldr	r2, [pc, #284]	@ (80047b8 <xPortStartScheduler+0x128>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d10b      	bne.n	80046b8 <xPortStartScheduler+0x28>
	__asm volatile
 80046a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	613b      	str	r3, [r7, #16]
}
 80046b2:	bf00      	nop
 80046b4:	bf00      	nop
 80046b6:	e7fd      	b.n	80046b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046b8:	4b3e      	ldr	r3, [pc, #248]	@ (80047b4 <xPortStartScheduler+0x124>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a3f      	ldr	r2, [pc, #252]	@ (80047bc <xPortStartScheduler+0x12c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d10b      	bne.n	80046da <xPortStartScheduler+0x4a>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	60fb      	str	r3, [r7, #12]
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop
 80046d8:	e7fd      	b.n	80046d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046da:	4b39      	ldr	r3, [pc, #228]	@ (80047c0 <xPortStartScheduler+0x130>)
 80046dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	22ff      	movs	r2, #255	@ 0xff
 80046ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	4b31      	ldr	r3, [pc, #196]	@ (80047c4 <xPortStartScheduler+0x134>)
 8004700:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004702:	4b31      	ldr	r3, [pc, #196]	@ (80047c8 <xPortStartScheduler+0x138>)
 8004704:	2207      	movs	r2, #7
 8004706:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004708:	e009      	b.n	800471e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800470a:	4b2f      	ldr	r3, [pc, #188]	@ (80047c8 <xPortStartScheduler+0x138>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3b01      	subs	r3, #1
 8004710:	4a2d      	ldr	r2, [pc, #180]	@ (80047c8 <xPortStartScheduler+0x138>)
 8004712:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	b2db      	uxtb	r3, r3
 800471c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004726:	2b80      	cmp	r3, #128	@ 0x80
 8004728:	d0ef      	beq.n	800470a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800472a:	4b27      	ldr	r3, [pc, #156]	@ (80047c8 <xPortStartScheduler+0x138>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f1c3 0307 	rsb	r3, r3, #7
 8004732:	2b04      	cmp	r3, #4
 8004734:	d00b      	beq.n	800474e <xPortStartScheduler+0xbe>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	60bb      	str	r3, [r7, #8]
}
 8004748:	bf00      	nop
 800474a:	bf00      	nop
 800474c:	e7fd      	b.n	800474a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800474e:	4b1e      	ldr	r3, [pc, #120]	@ (80047c8 <xPortStartScheduler+0x138>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	021b      	lsls	r3, r3, #8
 8004754:	4a1c      	ldr	r2, [pc, #112]	@ (80047c8 <xPortStartScheduler+0x138>)
 8004756:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004758:	4b1b      	ldr	r3, [pc, #108]	@ (80047c8 <xPortStartScheduler+0x138>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004760:	4a19      	ldr	r2, [pc, #100]	@ (80047c8 <xPortStartScheduler+0x138>)
 8004762:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	b2da      	uxtb	r2, r3
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800476c:	4b17      	ldr	r3, [pc, #92]	@ (80047cc <xPortStartScheduler+0x13c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a16      	ldr	r2, [pc, #88]	@ (80047cc <xPortStartScheduler+0x13c>)
 8004772:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004776:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004778:	4b14      	ldr	r3, [pc, #80]	@ (80047cc <xPortStartScheduler+0x13c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a13      	ldr	r2, [pc, #76]	@ (80047cc <xPortStartScheduler+0x13c>)
 800477e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004782:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004784:	f000 f8da 	bl	800493c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004788:	4b11      	ldr	r3, [pc, #68]	@ (80047d0 <xPortStartScheduler+0x140>)
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800478e:	f000 f8f9 	bl	8004984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004792:	4b10      	ldr	r3, [pc, #64]	@ (80047d4 <xPortStartScheduler+0x144>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a0f      	ldr	r2, [pc, #60]	@ (80047d4 <xPortStartScheduler+0x144>)
 8004798:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800479c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800479e:	f7ff ff63 	bl	8004668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047a2:	f7ff f83b 	bl	800381c <vTaskSwitchContext>
	prvTaskExitError();
 80047a6:	f7ff ff19 	bl	80045dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	e000ed00 	.word	0xe000ed00
 80047b8:	410fc271 	.word	0x410fc271
 80047bc:	410fc270 	.word	0x410fc270
 80047c0:	e000e400 	.word	0xe000e400
 80047c4:	20000dfc 	.word	0x20000dfc
 80047c8:	20000e00 	.word	0x20000e00
 80047cc:	e000ed20 	.word	0xe000ed20
 80047d0:	2000000c 	.word	0x2000000c
 80047d4:	e000ef34 	.word	0xe000ef34

080047d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	607b      	str	r3, [r7, #4]
}
 80047f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047f2:	4b10      	ldr	r3, [pc, #64]	@ (8004834 <vPortEnterCritical+0x5c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3301      	adds	r3, #1
 80047f8:	4a0e      	ldr	r2, [pc, #56]	@ (8004834 <vPortEnterCritical+0x5c>)
 80047fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004834 <vPortEnterCritical+0x5c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d110      	bne.n	8004826 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004804:	4b0c      	ldr	r3, [pc, #48]	@ (8004838 <vPortEnterCritical+0x60>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00b      	beq.n	8004826 <vPortEnterCritical+0x4e>
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	603b      	str	r3, [r7, #0]
}
 8004820:	bf00      	nop
 8004822:	bf00      	nop
 8004824:	e7fd      	b.n	8004822 <vPortEnterCritical+0x4a>
	}
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	2000000c 	.word	0x2000000c
 8004838:	e000ed04 	.word	0xe000ed04

0800483c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004842:	4b12      	ldr	r3, [pc, #72]	@ (800488c <vPortExitCritical+0x50>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10b      	bne.n	8004862 <vPortExitCritical+0x26>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	607b      	str	r3, [r7, #4]
}
 800485c:	bf00      	nop
 800485e:	bf00      	nop
 8004860:	e7fd      	b.n	800485e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004862:	4b0a      	ldr	r3, [pc, #40]	@ (800488c <vPortExitCritical+0x50>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3b01      	subs	r3, #1
 8004868:	4a08      	ldr	r2, [pc, #32]	@ (800488c <vPortExitCritical+0x50>)
 800486a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800486c:	4b07      	ldr	r3, [pc, #28]	@ (800488c <vPortExitCritical+0x50>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d105      	bne.n	8004880 <vPortExitCritical+0x44>
 8004874:	2300      	movs	r3, #0
 8004876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	f383 8811 	msr	BASEPRI, r3
}
 800487e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	2000000c 	.word	0x2000000c

08004890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004890:	f3ef 8009 	mrs	r0, PSP
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	4b15      	ldr	r3, [pc, #84]	@ (80048f0 <pxCurrentTCBConst>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	f01e 0f10 	tst.w	lr, #16
 80048a0:	bf08      	it	eq
 80048a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048aa:	6010      	str	r0, [r2, #0]
 80048ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80048b4:	f380 8811 	msr	BASEPRI, r0
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f7fe ffac 	bl	800381c <vTaskSwitchContext>
 80048c4:	f04f 0000 	mov.w	r0, #0
 80048c8:	f380 8811 	msr	BASEPRI, r0
 80048cc:	bc09      	pop	{r0, r3}
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	6808      	ldr	r0, [r1, #0]
 80048d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d6:	f01e 0f10 	tst.w	lr, #16
 80048da:	bf08      	it	eq
 80048dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048e0:	f380 8809 	msr	PSP, r0
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	f3af 8000 	nop.w

080048f0 <pxCurrentTCBConst>:
 80048f0:	200007d0 	.word	0x200007d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop

080048f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
	__asm volatile
 80048fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	607b      	str	r3, [r7, #4]
}
 8004910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004912:	f7fe fec9 	bl	80036a8 <xTaskIncrementTick>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800491c:	4b06      	ldr	r3, [pc, #24]	@ (8004938 <xPortSysTickHandler+0x40>)
 800491e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	2300      	movs	r3, #0
 8004926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	f383 8811 	msr	BASEPRI, r3
}
 800492e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004930:	bf00      	nop
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	e000ed04 	.word	0xe000ed04

0800493c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004940:	4b0b      	ldr	r3, [pc, #44]	@ (8004970 <vPortSetupTimerInterrupt+0x34>)
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004946:	4b0b      	ldr	r3, [pc, #44]	@ (8004974 <vPortSetupTimerInterrupt+0x38>)
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800494c:	4b0a      	ldr	r3, [pc, #40]	@ (8004978 <vPortSetupTimerInterrupt+0x3c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a0a      	ldr	r2, [pc, #40]	@ (800497c <vPortSetupTimerInterrupt+0x40>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	099b      	lsrs	r3, r3, #6
 8004958:	4a09      	ldr	r2, [pc, #36]	@ (8004980 <vPortSetupTimerInterrupt+0x44>)
 800495a:	3b01      	subs	r3, #1
 800495c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800495e:	4b04      	ldr	r3, [pc, #16]	@ (8004970 <vPortSetupTimerInterrupt+0x34>)
 8004960:	2207      	movs	r2, #7
 8004962:	601a      	str	r2, [r3, #0]
}
 8004964:	bf00      	nop
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	e000e010 	.word	0xe000e010
 8004974:	e000e018 	.word	0xe000e018
 8004978:	20000000 	.word	0x20000000
 800497c:	10624dd3 	.word	0x10624dd3
 8004980:	e000e014 	.word	0xe000e014

08004984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004984:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004994 <vPortEnableVFP+0x10>
 8004988:	6801      	ldr	r1, [r0, #0]
 800498a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800498e:	6001      	str	r1, [r0, #0]
 8004990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004992:	bf00      	nop
 8004994:	e000ed88 	.word	0xe000ed88

08004998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800499e:	f3ef 8305 	mrs	r3, IPSR
 80049a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b0f      	cmp	r3, #15
 80049a8:	d915      	bls.n	80049d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049aa:	4a18      	ldr	r2, [pc, #96]	@ (8004a0c <vPortValidateInterruptPriority+0x74>)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4413      	add	r3, r2
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049b4:	4b16      	ldr	r3, [pc, #88]	@ (8004a10 <vPortValidateInterruptPriority+0x78>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	7afa      	ldrb	r2, [r7, #11]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d20b      	bcs.n	80049d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	607b      	str	r3, [r7, #4]
}
 80049d0:	bf00      	nop
 80049d2:	bf00      	nop
 80049d4:	e7fd      	b.n	80049d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004a14 <vPortValidateInterruptPriority+0x7c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80049de:	4b0e      	ldr	r3, [pc, #56]	@ (8004a18 <vPortValidateInterruptPriority+0x80>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d90b      	bls.n	80049fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	603b      	str	r3, [r7, #0]
}
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop
 80049fc:	e7fd      	b.n	80049fa <vPortValidateInterruptPriority+0x62>
	}
 80049fe:	bf00      	nop
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	e000e3f0 	.word	0xe000e3f0
 8004a10:	20000dfc 	.word	0x20000dfc
 8004a14:	e000ed0c 	.word	0xe000ed0c
 8004a18:	20000e00 	.word	0x20000e00

08004a1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	@ 0x28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a28:	f7fe fd82 	bl	8003530 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a2c:	4b5c      	ldr	r3, [pc, #368]	@ (8004ba0 <pvPortMalloc+0x184>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a34:	f000 f924 	bl	8004c80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a38:	4b5a      	ldr	r3, [pc, #360]	@ (8004ba4 <pvPortMalloc+0x188>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f040 8095 	bne.w	8004b70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01e      	beq.n	8004a8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4413      	add	r3, r2
 8004a52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d015      	beq.n	8004a8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f023 0307 	bic.w	r3, r3, #7
 8004a64:	3308      	adds	r3, #8
 8004a66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00b      	beq.n	8004a8a <pvPortMalloc+0x6e>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	617b      	str	r3, [r7, #20]
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop
 8004a88:	e7fd      	b.n	8004a86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d06f      	beq.n	8004b70 <pvPortMalloc+0x154>
 8004a90:	4b45      	ldr	r3, [pc, #276]	@ (8004ba8 <pvPortMalloc+0x18c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d86a      	bhi.n	8004b70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a9a:	4b44      	ldr	r3, [pc, #272]	@ (8004bac <pvPortMalloc+0x190>)
 8004a9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a9e:	4b43      	ldr	r3, [pc, #268]	@ (8004bac <pvPortMalloc+0x190>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aa4:	e004      	b.n	8004ab0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d903      	bls.n	8004ac2 <pvPortMalloc+0xa6>
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1f1      	bne.n	8004aa6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ac2:	4b37      	ldr	r3, [pc, #220]	@ (8004ba0 <pvPortMalloc+0x184>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d051      	beq.n	8004b70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	4413      	add	r3, r2
 8004ad4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	1ad2      	subs	r2, r2, r3
 8004ae6:	2308      	movs	r3, #8
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d920      	bls.n	8004b30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4413      	add	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00b      	beq.n	8004b18 <pvPortMalloc+0xfc>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	613b      	str	r3, [r7, #16]
}
 8004b12:	bf00      	nop
 8004b14:	bf00      	nop
 8004b16:	e7fd      	b.n	8004b14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	1ad2      	subs	r2, r2, r3
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b2a:	69b8      	ldr	r0, [r7, #24]
 8004b2c:	f000 f90a 	bl	8004d44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b30:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba8 <pvPortMalloc+0x18c>)
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ba8 <pvPortMalloc+0x18c>)
 8004b3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba8 <pvPortMalloc+0x18c>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb0 <pvPortMalloc+0x194>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d203      	bcs.n	8004b52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b4a:	4b17      	ldr	r3, [pc, #92]	@ (8004ba8 <pvPortMalloc+0x18c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a18      	ldr	r2, [pc, #96]	@ (8004bb0 <pvPortMalloc+0x194>)
 8004b50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	4b13      	ldr	r3, [pc, #76]	@ (8004ba4 <pvPortMalloc+0x188>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b66:	4b13      	ldr	r3, [pc, #76]	@ (8004bb4 <pvPortMalloc+0x198>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	4a11      	ldr	r2, [pc, #68]	@ (8004bb4 <pvPortMalloc+0x198>)
 8004b6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b70:	f7fe fcec 	bl	800354c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00b      	beq.n	8004b96 <pvPortMalloc+0x17a>
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	60fb      	str	r3, [r7, #12]
}
 8004b90:	bf00      	nop
 8004b92:	bf00      	nop
 8004b94:	e7fd      	b.n	8004b92 <pvPortMalloc+0x176>
	return pvReturn;
 8004b96:	69fb      	ldr	r3, [r7, #28]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3728      	adds	r7, #40	@ 0x28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	20004a0c 	.word	0x20004a0c
 8004ba4:	20004a20 	.word	0x20004a20
 8004ba8:	20004a10 	.word	0x20004a10
 8004bac:	20004a04 	.word	0x20004a04
 8004bb0:	20004a14 	.word	0x20004a14
 8004bb4:	20004a18 	.word	0x20004a18

08004bb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d04f      	beq.n	8004c6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bca:	2308      	movs	r3, #8
 8004bcc:	425b      	negs	r3, r3
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	4b25      	ldr	r3, [pc, #148]	@ (8004c74 <vPortFree+0xbc>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4013      	ands	r3, r2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10b      	bne.n	8004bfe <vPortFree+0x46>
	__asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	60fb      	str	r3, [r7, #12]
}
 8004bf8:	bf00      	nop
 8004bfa:	bf00      	nop
 8004bfc:	e7fd      	b.n	8004bfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00b      	beq.n	8004c1e <vPortFree+0x66>
	__asm volatile
 8004c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	60bb      	str	r3, [r7, #8]
}
 8004c18:	bf00      	nop
 8004c1a:	bf00      	nop
 8004c1c:	e7fd      	b.n	8004c1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	4b14      	ldr	r3, [pc, #80]	@ (8004c74 <vPortFree+0xbc>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01e      	beq.n	8004c6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d11a      	bne.n	8004c6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	4b0e      	ldr	r3, [pc, #56]	@ (8004c74 <vPortFree+0xbc>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	401a      	ands	r2, r3
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c44:	f7fe fc74 	bl	8003530 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c78 <vPortFree+0xc0>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4413      	add	r3, r2
 8004c52:	4a09      	ldr	r2, [pc, #36]	@ (8004c78 <vPortFree+0xc0>)
 8004c54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c56:	6938      	ldr	r0, [r7, #16]
 8004c58:	f000 f874 	bl	8004d44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c5c:	4b07      	ldr	r3, [pc, #28]	@ (8004c7c <vPortFree+0xc4>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3301      	adds	r3, #1
 8004c62:	4a06      	ldr	r2, [pc, #24]	@ (8004c7c <vPortFree+0xc4>)
 8004c64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c66:	f7fe fc71 	bl	800354c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c6a:	bf00      	nop
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20004a20 	.word	0x20004a20
 8004c78:	20004a10 	.word	0x20004a10
 8004c7c:	20004a1c 	.word	0x20004a1c

08004c80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004c8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c8c:	4b27      	ldr	r3, [pc, #156]	@ (8004d2c <prvHeapInit+0xac>)
 8004c8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00c      	beq.n	8004cb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3307      	adds	r3, #7
 8004c9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0307 	bic.w	r3, r3, #7
 8004ca6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	4a1f      	ldr	r2, [pc, #124]	@ (8004d2c <prvHeapInit+0xac>)
 8004cb0:	4413      	add	r3, r2
 8004cb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d30 <prvHeapInit+0xb0>)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8004d30 <prvHeapInit+0xb0>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	4413      	add	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ccc:	2208      	movs	r2, #8
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1a9b      	subs	r3, r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0307 	bic.w	r3, r3, #7
 8004cda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4a15      	ldr	r2, [pc, #84]	@ (8004d34 <prvHeapInit+0xb4>)
 8004ce0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ce2:	4b14      	ldr	r3, [pc, #80]	@ (8004d34 <prvHeapInit+0xb4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cea:	4b12      	ldr	r3, [pc, #72]	@ (8004d34 <prvHeapInit+0xb4>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	1ad2      	subs	r2, r2, r3
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d00:	4b0c      	ldr	r3, [pc, #48]	@ (8004d34 <prvHeapInit+0xb4>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8004d38 <prvHeapInit+0xb8>)
 8004d0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	4a09      	ldr	r2, [pc, #36]	@ (8004d3c <prvHeapInit+0xbc>)
 8004d16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d18:	4b09      	ldr	r3, [pc, #36]	@ (8004d40 <prvHeapInit+0xc0>)
 8004d1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004d1e:	601a      	str	r2, [r3, #0]
}
 8004d20:	bf00      	nop
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	20000e04 	.word	0x20000e04
 8004d30:	20004a04 	.word	0x20004a04
 8004d34:	20004a0c 	.word	0x20004a0c
 8004d38:	20004a14 	.word	0x20004a14
 8004d3c:	20004a10 	.word	0x20004a10
 8004d40:	20004a20 	.word	0x20004a20

08004d44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d4c:	4b28      	ldr	r3, [pc, #160]	@ (8004df0 <prvInsertBlockIntoFreeList+0xac>)
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	e002      	b.n	8004d58 <prvInsertBlockIntoFreeList+0x14>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d8f7      	bhi.n	8004d52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d108      	bne.n	8004d86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	441a      	add	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	441a      	add	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d118      	bne.n	8004dcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	4b15      	ldr	r3, [pc, #84]	@ (8004df4 <prvInsertBlockIntoFreeList+0xb0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d00d      	beq.n	8004dc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	441a      	add	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	e008      	b.n	8004dd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8004df4 <prvInsertBlockIntoFreeList+0xb0>)
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	e003      	b.n	8004dd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d002      	beq.n	8004de2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004de2:	bf00      	nop
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	20004a04 	.word	0x20004a04
 8004df4:	20004a0c 	.word	0x20004a0c

08004df8 <memset>:
 8004df8:	4402      	add	r2, r0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d100      	bne.n	8004e02 <memset+0xa>
 8004e00:	4770      	bx	lr
 8004e02:	f803 1b01 	strb.w	r1, [r3], #1
 8004e06:	e7f9      	b.n	8004dfc <memset+0x4>

08004e08 <__libc_init_array>:
 8004e08:	b570      	push	{r4, r5, r6, lr}
 8004e0a:	4d0d      	ldr	r5, [pc, #52]	@ (8004e40 <__libc_init_array+0x38>)
 8004e0c:	4c0d      	ldr	r4, [pc, #52]	@ (8004e44 <__libc_init_array+0x3c>)
 8004e0e:	1b64      	subs	r4, r4, r5
 8004e10:	10a4      	asrs	r4, r4, #2
 8004e12:	2600      	movs	r6, #0
 8004e14:	42a6      	cmp	r6, r4
 8004e16:	d109      	bne.n	8004e2c <__libc_init_array+0x24>
 8004e18:	4d0b      	ldr	r5, [pc, #44]	@ (8004e48 <__libc_init_array+0x40>)
 8004e1a:	4c0c      	ldr	r4, [pc, #48]	@ (8004e4c <__libc_init_array+0x44>)
 8004e1c:	f000 f826 	bl	8004e6c <_init>
 8004e20:	1b64      	subs	r4, r4, r5
 8004e22:	10a4      	asrs	r4, r4, #2
 8004e24:	2600      	movs	r6, #0
 8004e26:	42a6      	cmp	r6, r4
 8004e28:	d105      	bne.n	8004e36 <__libc_init_array+0x2e>
 8004e2a:	bd70      	pop	{r4, r5, r6, pc}
 8004e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e30:	4798      	blx	r3
 8004e32:	3601      	adds	r6, #1
 8004e34:	e7ee      	b.n	8004e14 <__libc_init_array+0xc>
 8004e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e3a:	4798      	blx	r3
 8004e3c:	3601      	adds	r6, #1
 8004e3e:	e7f2      	b.n	8004e26 <__libc_init_array+0x1e>
 8004e40:	08004efc 	.word	0x08004efc
 8004e44:	08004efc 	.word	0x08004efc
 8004e48:	08004efc 	.word	0x08004efc
 8004e4c:	08004f00 	.word	0x08004f00

08004e50 <memcpy>:
 8004e50:	440a      	add	r2, r1
 8004e52:	4291      	cmp	r1, r2
 8004e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e58:	d100      	bne.n	8004e5c <memcpy+0xc>
 8004e5a:	4770      	bx	lr
 8004e5c:	b510      	push	{r4, lr}
 8004e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e66:	4291      	cmp	r1, r2
 8004e68:	d1f9      	bne.n	8004e5e <memcpy+0xe>
 8004e6a:	bd10      	pop	{r4, pc}

08004e6c <_init>:
 8004e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6e:	bf00      	nop
 8004e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e72:	bc08      	pop	{r3}
 8004e74:	469e      	mov	lr, r3
 8004e76:	4770      	bx	lr

08004e78 <_fini>:
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	bf00      	nop
 8004e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7e:	bc08      	pop	{r3}
 8004e80:	469e      	mov	lr, r3
 8004e82:	4770      	bx	lr


9_Resuming_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004fe4  08004fe4  00005fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005054  08005054  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005054  08005054  00006054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800505c  0800505c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800505c  0800505c  0000605c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005060  08005060  00006060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005064  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00004a20  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004a30  20004a30  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016118  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000303a  00000000  00000000  0001d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  00020198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f61  00000000  00000000  00021558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003a5a  00000000  00000000  000224b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000157c9  00000000  00000000  00025f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5646  00000000  00000000  0003b6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00110d22  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053ac  00000000  00000000  00110d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00116114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004fcc 	.word	0x08004fcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004fcc 	.word	0x08004fcc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:


//------------------------------------------------------------------------------

int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af02      	add	r7, sp, #8

  HAL_Init();
 80004c6:	f000 faef 	bl	8000aa8 <HAL_Init>
  SystemClock_Config();
 80004ca:	f000 f8b5 	bl	8000638 <SystemClock_Config>
  MX_GPIO_Init();
 80004ce:	f000 f959 	bl	8000784 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d2:	f000 f91b 	bl	800070c <MX_USART2_UART_Init>

  xTaskCreate(vBlueLedControllerTask,
 80004d6:	4b11      	ldr	r3, [pc, #68]	@ (800051c <main+0x5c>)
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	2301      	movs	r3, #1
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2300      	movs	r3, #0
 80004e0:	2264      	movs	r2, #100	@ 0x64
 80004e2:	490f      	ldr	r1, [pc, #60]	@ (8000520 <main+0x60>)
 80004e4:	480f      	ldr	r0, [pc, #60]	@ (8000524 <main+0x64>)
 80004e6:	f002 fe1b 	bl	8003120 <xTaskCreate>
			  100,
			  NULL,
			  1,
			  &blue_handle);

  xTaskCreate(vRedLedControllerTask,
 80004ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000528 <main+0x68>)
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	2301      	movs	r3, #1
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	2300      	movs	r3, #0
 80004f4:	2264      	movs	r2, #100	@ 0x64
 80004f6:	490d      	ldr	r1, [pc, #52]	@ (800052c <main+0x6c>)
 80004f8:	480d      	ldr	r0, [pc, #52]	@ (8000530 <main+0x70>)
 80004fa:	f002 fe11 	bl	8003120 <xTaskCreate>
			  100,
			  NULL,
			  1,
			  &red_handle);

  xTaskCreate(vGreenLedControllerTask,
 80004fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <main+0x74>)
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2301      	movs	r3, #1
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2300      	movs	r3, #0
 8000508:	2264      	movs	r2, #100	@ 0x64
 800050a:	490b      	ldr	r1, [pc, #44]	@ (8000538 <main+0x78>)
 800050c:	480b      	ldr	r0, [pc, #44]	@ (800053c <main+0x7c>)
 800050e:	f002 fe07 	bl	8003120 <xTaskCreate>
			  100,
			  NULL,
			  1,
			  &green_handle);

  vTaskStartScheduler();
 8000512:	f003 f853 	bl	80035bc <vTaskStartScheduler>

  while (1)
 8000516:	bf00      	nop
 8000518:	e7fd      	b.n	8000516 <main+0x56>
 800051a:	bf00      	nop
 800051c:	20000080 	.word	0x20000080
 8000520:	08004fe4 	.word	0x08004fe4
 8000524:	08000541 	.word	0x08000541
 8000528:	20000084 	.word	0x20000084
 800052c:	08004ff8 	.word	0x08004ff8
 8000530:	08000571 	.word	0x08000571
 8000534:	20000088 	.word	0x20000088
 8000538:	0800500c 	.word	0x0800500c
 800053c:	080005cd 	.word	0x080005cd

08000540 <vBlueLedControllerTask>:
}

//-----------------------------------------------------------------------------

void vBlueLedControllerTask(void *pvParameters)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	while(1)
	{

			BlueTaskProfiler++;
 8000548:	4b07      	ldr	r3, [pc, #28]	@ (8000568 <vBlueLedControllerTask+0x28>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	3301      	adds	r3, #1
 800054e:	4a06      	ldr	r2, [pc, #24]	@ (8000568 <vBlueLedControllerTask+0x28>)
 8000550:	6013      	str	r3, [r2, #0]
			for(int i=0; i<100000; i++){}
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	e002      	b.n	800055e <vBlueLedControllerTask+0x1e>
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	3301      	adds	r3, #1
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	4a02      	ldr	r2, [pc, #8]	@ (800056c <vBlueLedControllerTask+0x2c>)
 8000562:	4293      	cmp	r3, r2
 8000564:	ddf8      	ble.n	8000558 <vBlueLedControllerTask+0x18>
			BlueTaskProfiler++;
 8000566:	e7ef      	b.n	8000548 <vBlueLedControllerTask+0x8>
 8000568:	20000074 	.word	0x20000074
 800056c:	0001869f 	.word	0x0001869f

08000570 <vRedLedControllerTask>:

	};
}

void vRedLedControllerTask(void *pvParameters)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	while(1)
	{
			RedTaskProfiler++;
 8000578:	4b10      	ldr	r3, [pc, #64]	@ (80005bc <vRedLedControllerTask+0x4c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	4a0f      	ldr	r2, [pc, #60]	@ (80005bc <vRedLedControllerTask+0x4c>)
 8000580:	6013      	str	r3, [r2, #0]
			for(int i=0; i<100000; i++){}
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	e002      	b.n	800058e <vRedLedControllerTask+0x1e>
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	3301      	adds	r3, #1
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	4a0b      	ldr	r2, [pc, #44]	@ (80005c0 <vRedLedControllerTask+0x50>)
 8000592:	4293      	cmp	r3, r2
 8000594:	ddf8      	ble.n	8000588 <vRedLedControllerTask+0x18>

			suspend_monitor++;
 8000596:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <vRedLedControllerTask+0x54>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	3301      	adds	r3, #1
 800059c:	4a09      	ldr	r2, [pc, #36]	@ (80005c4 <vRedLedControllerTask+0x54>)
 800059e:	6013      	str	r3, [r2, #0]

			if(suspend_monitor >=50)
 80005a0:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <vRedLedControllerTask+0x54>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b31      	cmp	r3, #49	@ 0x31
 80005a6:	d9e7      	bls.n	8000578 <vRedLedControllerTask+0x8>
			{
				is_suspended = true;
 80005a8:	4b07      	ldr	r3, [pc, #28]	@ (80005c8 <vRedLedControllerTask+0x58>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	701a      	strb	r2, [r3, #0]
				suspend_monitor = 0;
 80005ae:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <vRedLedControllerTask+0x54>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
				vTaskSuspend(NULL);
 80005b4:	2000      	movs	r0, #0
 80005b6:	f002 fef9 	bl	80033ac <vTaskSuspend>
			RedTaskProfiler++;
 80005ba:	e7dd      	b.n	8000578 <vRedLedControllerTask+0x8>
 80005bc:	20000078 	.word	0x20000078
 80005c0:	0001869f 	.word	0x0001869f
 80005c4:	2000008c 	.word	0x2000008c
 80005c8:	20000094 	.word	0x20000094

080005cc <vGreenLedControllerTask>:

	};
}

void vGreenLedControllerTask(void *pvParameters)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	while(1)
	{
			GreenTaskProfiler++;
 80005d4:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <vGreenLedControllerTask+0x58>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	4a12      	ldr	r2, [pc, #72]	@ (8000624 <vGreenLedControllerTask+0x58>)
 80005dc:	6013      	str	r3, [r2, #0]
			for(int i=0; i<100000; i++){}
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	e002      	b.n	80005ea <vGreenLedControllerTask+0x1e>
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	3301      	adds	r3, #1
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000628 <vGreenLedControllerTask+0x5c>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	ddf8      	ble.n	80005e4 <vGreenLedControllerTask+0x18>

			if (is_suspended)
 80005f2:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <vGreenLedControllerTask+0x60>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0ec      	beq.n	80005d4 <vGreenLedControllerTask+0x8>
			{
				resume_monitor++;
 80005fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <vGreenLedControllerTask+0x64>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	3301      	adds	r3, #1
 8000600:	4a0b      	ldr	r2, [pc, #44]	@ (8000630 <vGreenLedControllerTask+0x64>)
 8000602:	6013      	str	r3, [r2, #0]
				if(resume_monitor >= 30)
 8000604:	4b0a      	ldr	r3, [pc, #40]	@ (8000630 <vGreenLedControllerTask+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b1d      	cmp	r3, #29
 800060a:	d9e3      	bls.n	80005d4 <vGreenLedControllerTask+0x8>
				{
					vTaskResume(red_handle);
 800060c:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <vGreenLedControllerTask+0x68>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f002 ff73 	bl	80034fc <vTaskResume>
					resume_monitor=0;
 8000616:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <vGreenLedControllerTask+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
					is_suspended = false;
 800061c:	4b03      	ldr	r3, [pc, #12]	@ (800062c <vGreenLedControllerTask+0x60>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
			GreenTaskProfiler++;
 8000622:	e7d7      	b.n	80005d4 <vGreenLedControllerTask+0x8>
 8000624:	2000007c 	.word	0x2000007c
 8000628:	0001869f 	.word	0x0001869f
 800062c:	20000094 	.word	0x20000094
 8000630:	20000090 	.word	0x20000090
 8000634:	20000084 	.word	0x20000084

08000638 <SystemClock_Config>:
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
  return ch;
}

void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	@ 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	@ 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f004 fc86 	bl	8004f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b28      	ldr	r3, [pc, #160]	@ (8000704 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	4a27      	ldr	r2, [pc, #156]	@ (8000704 <SystemClock_Config+0xcc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	@ 0x40
 800066c:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b22      	ldr	r3, [pc, #136]	@ (8000708 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a21      	ldr	r2, [pc, #132]	@ (8000708 <SystemClock_Config+0xd0>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	@ (8000708 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;  // Changed to HSI
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;                   // Changed to HSI_ON
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;  // Added
 800069c:	2310      	movs	r3, #16
 800069e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;       // Changed to HSI
 80006a4:	2300      	movs	r3, #0
 80006a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a8:	2308      	movs	r3, #8
 80006aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;  // Changed from 336 to 168 for HSI
 80006ac:	23a8      	movs	r3, #168	@ 0xa8
 80006ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b4:	2307      	movs	r3, #7
 80006b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fcb3 	bl	8001028 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 f89e 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2105      	movs	r1, #5
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 ff14 	bl	8001518 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f6:	f000 f887 	bl	8000808 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	@ 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
  __HAL_RCC_USART2_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <MX_USART2_UART_Init+0x6c>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071a:	4a17      	ldr	r2, [pc, #92]	@ (8000778 <MX_USART2_UART_Init+0x6c>)
 800071c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000720:	6413      	str	r3, [r2, #64]	@ 0x40
 8000722:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <MX_USART2_UART_Init+0x6c>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  huart2.Instance = USART2;
 800072e:	4b13      	ldr	r3, [pc, #76]	@ (800077c <MX_USART2_UART_Init+0x70>)
 8000730:	4a13      	ldr	r2, [pc, #76]	@ (8000780 <MX_USART2_UART_Init+0x74>)
 8000732:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_USART2_UART_Init+0x70>)
 8000736:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800073a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_USART2_UART_Init+0x70>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_USART2_UART_Init+0x70>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_USART2_UART_Init+0x70>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_USART2_UART_Init+0x70>)
 8000750:	220c      	movs	r2, #12
 8000752:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_USART2_UART_Init+0x70>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_USART2_UART_Init+0x70>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000760:	4806      	ldr	r0, [pc, #24]	@ (800077c <MX_USART2_UART_Init+0x70>)
 8000762:	f001 fbc7 	bl	8001ef4 <HAL_UART_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_USART2_UART_Init+0x64>
  {
    Error_Handler();
 800076c:	f000 f84c 	bl	8000808 <Error_Handler>
  }
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	2000002c 	.word	0x2000002c
 8000780:	40004400 	.word	0x40004400

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <MX_GPIO_Init+0x58>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a12      	ldr	r2, [pc, #72]	@ (80007dc <MX_GPIO_Init+0x58>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_GPIO_Init+0x58>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007b4:	230c      	movs	r3, #12
 80007b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007c4:	2307      	movs	r3, #7
 80007c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	4619      	mov	r1, r3
 80007cc:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <MX_GPIO_Init+0x5c>)
 80007ce:	f000 fa8f 	bl	8000cf0 <HAL_GPIO_Init>
}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020000 	.word	0x40020000

080007e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a04      	ldr	r2, [pc, #16]	@ (8000804 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d101      	bne.n	80007fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007f6:	f000 f979 	bl	8000aec <HAL_IncTick>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40010000 	.word	0x40010000

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  __disable_irq();
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <Error_Handler+0x8>

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <HAL_MspInit+0x54>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000822:	4a11      	ldr	r2, [pc, #68]	@ (8000868 <HAL_MspInit+0x54>)
 8000824:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000828:	6453      	str	r3, [r2, #68]	@ 0x44
 800082a:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <HAL_MspInit+0x54>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <HAL_MspInit+0x54>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083e:	4a0a      	ldr	r2, [pc, #40]	@ (8000868 <HAL_MspInit+0x54>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000844:	6413      	str	r3, [r2, #64]	@ 0x40
 8000846:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <HAL_MspInit+0x54>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	210f      	movs	r1, #15
 8000856:	f06f 0001 	mvn.w	r0, #1
 800085a:	f000 fa1f 	bl	8000c9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800

0800086c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	@ 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a19      	ldr	r2, [pc, #100]	@ (80008f0 <HAL_UART_MspInit+0x84>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d12b      	bne.n	80008e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <HAL_UART_MspInit+0x88>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000896:	4a17      	ldr	r2, [pc, #92]	@ (80008f4 <HAL_UART_MspInit+0x88>)
 8000898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800089c:	6413      	str	r3, [r2, #64]	@ 0x40
 800089e:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <HAL_UART_MspInit+0x88>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <HAL_UART_MspInit+0x88>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a10      	ldr	r2, [pc, #64]	@ (80008f4 <HAL_UART_MspInit+0x88>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <HAL_UART_MspInit+0x88>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008c6:	230c      	movs	r3, #12
 80008c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d6:	2307      	movs	r3, #7
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <HAL_UART_MspInit+0x8c>)
 80008e2:	f000 fa05 	bl	8000cf0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008e6:	bf00      	nop
 80008e8:	3728      	adds	r7, #40	@ 0x28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40004400 	.word	0x40004400
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000

080008fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	@ 0x30
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	4b2f      	ldr	r3, [pc, #188]	@ (80009d0 <HAL_InitTick+0xd4>)
 8000912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000914:	4a2e      	ldr	r2, [pc, #184]	@ (80009d0 <HAL_InitTick+0xd4>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	6453      	str	r3, [r2, #68]	@ 0x44
 800091c:	4b2c      	ldr	r3, [pc, #176]	@ (80009d0 <HAL_InitTick+0xd4>)
 800091e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000928:	f107 020c 	add.w	r2, r7, #12
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	4611      	mov	r1, r2
 8000932:	4618      	mov	r0, r3
 8000934:	f001 f810 	bl	8001958 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000938:	f000 fffa 	bl	8001930 <HAL_RCC_GetPCLK2Freq>
 800093c:	4603      	mov	r3, r0
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000944:	4a23      	ldr	r2, [pc, #140]	@ (80009d4 <HAL_InitTick+0xd8>)
 8000946:	fba2 2303 	umull	r2, r3, r2, r3
 800094a:	0c9b      	lsrs	r3, r3, #18
 800094c:	3b01      	subs	r3, #1
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000950:	4b21      	ldr	r3, [pc, #132]	@ (80009d8 <HAL_InitTick+0xdc>)
 8000952:	4a22      	ldr	r2, [pc, #136]	@ (80009dc <HAL_InitTick+0xe0>)
 8000954:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000956:	4b20      	ldr	r3, [pc, #128]	@ (80009d8 <HAL_InitTick+0xdc>)
 8000958:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800095c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800095e:	4a1e      	ldr	r2, [pc, #120]	@ (80009d8 <HAL_InitTick+0xdc>)
 8000960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000962:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000964:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <HAL_InitTick+0xdc>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b1b      	ldr	r3, [pc, #108]	@ (80009d8 <HAL_InitTick+0xdc>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000970:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <HAL_InitTick+0xdc>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000976:	4818      	ldr	r0, [pc, #96]	@ (80009d8 <HAL_InitTick+0xdc>)
 8000978:	f001 f820 	bl	80019bc <HAL_TIM_Base_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000982:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000986:	2b00      	cmp	r3, #0
 8000988:	d11b      	bne.n	80009c2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800098a:	4813      	ldr	r0, [pc, #76]	@ (80009d8 <HAL_InitTick+0xdc>)
 800098c:	f001 f870 	bl	8001a70 <HAL_TIM_Base_Start_IT>
 8000990:	4603      	mov	r3, r0
 8000992:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000996:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800099a:	2b00      	cmp	r3, #0
 800099c:	d111      	bne.n	80009c2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800099e:	2019      	movs	r0, #25
 80009a0:	f000 f998 	bl	8000cd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b0f      	cmp	r3, #15
 80009a8:	d808      	bhi.n	80009bc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80009aa:	2200      	movs	r2, #0
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	2019      	movs	r0, #25
 80009b0:	f000 f974 	bl	8000c9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009b4:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <HAL_InitTick+0xe4>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
 80009ba:	e002      	b.n	80009c2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80009bc:	2301      	movs	r3, #1
 80009be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3730      	adds	r7, #48	@ 0x30
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800
 80009d4:	431bde83 	.word	0x431bde83
 80009d8:	20000098 	.word	0x20000098
 80009dc:	40010000 	.word	0x40010000
 80009e0:	20000004 	.word	0x20000004

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <NMI_Handler+0x4>

080009ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <MemManage_Handler+0x4>

080009fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a20:	4802      	ldr	r0, [pc, #8]	@ (8000a2c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a22:	f001 f895 	bl	8001b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000098 	.word	0x20000098

08000a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <SystemInit+0x20>)
 8000a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a3a:	4a05      	ldr	r2, [pc, #20]	@ (8000a50 <SystemInit+0x20>)
 8000a3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a58:	f7ff ffea 	bl	8000a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a5c:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a5e:	490d      	ldr	r1, [pc, #52]	@ (8000a94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a60:	4a0d      	ldr	r2, [pc, #52]	@ (8000a98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a72:	4a0a      	ldr	r2, [pc, #40]	@ (8000a9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a74:	4c0a      	ldr	r4, [pc, #40]	@ (8000aa0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a82:	f004 fa71 	bl	8004f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a86:	f7ff fd1b 	bl	80004c0 <main>
  bx  lr    
 8000a8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a98:	08005064 	.word	0x08005064
  ldr r2, =_sbss
 8000a9c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000aa0:	20004a30 	.word	0x20004a30

08000aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae8 <HAL_Init+0x40>)
 8000ab2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <HAL_Init+0x40>)
 8000abe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	@ (8000ae8 <HAL_Init+0x40>)
 8000aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f8d8 	bl	8000c86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad6:	200f      	movs	r0, #15
 8000ad8:	f7ff ff10 	bl	80008fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000adc:	f7ff fe9a 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023c00 	.word	0x40023c00

08000aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af0:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_IncTick+0x20>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <HAL_IncTick+0x24>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	4a04      	ldr	r2, [pc, #16]	@ (8000b10 <HAL_IncTick+0x24>)
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	200000e0 	.word	0x200000e0

08000b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b03      	ldr	r3, [pc, #12]	@ (8000b28 <HAL_GetTick+0x14>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	200000e0 	.word	0x200000e0

08000b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5e:	4a04      	ldr	r2, [pc, #16]	@ (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	60d3      	str	r3, [r2, #12]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b78:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <__NVIC_GetPriorityGrouping+0x18>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	f003 0307 	and.w	r3, r3, #7
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db0b      	blt.n	8000bba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 021f 	and.w	r2, r3, #31
 8000ba8:	4907      	ldr	r1, [pc, #28]	@ (8000bc8 <__NVIC_EnableIRQ+0x38>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	490c      	ldr	r1, [pc, #48]	@ (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4908      	ldr	r1, [pc, #32]	@ (8000c1c <__NVIC_SetPriority+0x50>)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	3b04      	subs	r3, #4
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	@ 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43d9      	mvns	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	4313      	orrs	r3, r2
         );
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3724      	adds	r7, #36	@ 0x24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ff4c 	bl	8000b2c <__NVIC_SetPriorityGrouping>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cae:	f7ff ff61 	bl	8000b74 <__NVIC_GetPriorityGrouping>
 8000cb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	68b9      	ldr	r1, [r7, #8]
 8000cb8:	6978      	ldr	r0, [r7, #20]
 8000cba:	f7ff ffb1 	bl	8000c20 <NVIC_EncodePriority>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ff80 	bl	8000bcc <__NVIC_SetPriority>
}
 8000ccc:	bf00      	nop
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ff54 	bl	8000b90 <__NVIC_EnableIRQ>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	@ 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
 8000d0a:	e16b      	b.n	8000fe4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	f040 815a 	bne.w	8000fde <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d005      	beq.n	8000d42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d130      	bne.n	8000da4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4013      	ands	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	68da      	ldr	r2, [r3, #12]
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d78:	2201      	movs	r2, #1
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	091b      	lsrs	r3, r3, #4
 8000d8e:	f003 0201 	and.w	r2, r3, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	2b03      	cmp	r3, #3
 8000dae:	d017      	beq.n	8000de0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2203      	movs	r2, #3
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d123      	bne.n	8000e34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	08da      	lsrs	r2, r3, #3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3208      	adds	r2, #8
 8000df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	f003 0307 	and.w	r3, r3, #7
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	220f      	movs	r2, #15
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	691a      	ldr	r2, [r3, #16]
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	08da      	lsrs	r2, r3, #3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3208      	adds	r2, #8
 8000e2e:	69b9      	ldr	r1, [r7, #24]
 8000e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0203 	and.w	r2, r3, #3
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f000 80b4 	beq.w	8000fde <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b60      	ldr	r3, [pc, #384]	@ (8000ffc <HAL_GPIO_Init+0x30c>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7e:	4a5f      	ldr	r2, [pc, #380]	@ (8000ffc <HAL_GPIO_Init+0x30c>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e86:	4b5d      	ldr	r3, [pc, #372]	@ (8000ffc <HAL_GPIO_Init+0x30c>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e92:	4a5b      	ldr	r2, [pc, #364]	@ (8001000 <HAL_GPIO_Init+0x310>)
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	089b      	lsrs	r3, r3, #2
 8000e98:	3302      	adds	r3, #2
 8000e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	220f      	movs	r2, #15
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a52      	ldr	r2, [pc, #328]	@ (8001004 <HAL_GPIO_Init+0x314>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d02b      	beq.n	8000f16 <HAL_GPIO_Init+0x226>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a51      	ldr	r2, [pc, #324]	@ (8001008 <HAL_GPIO_Init+0x318>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d025      	beq.n	8000f12 <HAL_GPIO_Init+0x222>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a50      	ldr	r2, [pc, #320]	@ (800100c <HAL_GPIO_Init+0x31c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d01f      	beq.n	8000f0e <HAL_GPIO_Init+0x21e>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4f      	ldr	r2, [pc, #316]	@ (8001010 <HAL_GPIO_Init+0x320>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d019      	beq.n	8000f0a <HAL_GPIO_Init+0x21a>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4e      	ldr	r2, [pc, #312]	@ (8001014 <HAL_GPIO_Init+0x324>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d013      	beq.n	8000f06 <HAL_GPIO_Init+0x216>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4d      	ldr	r2, [pc, #308]	@ (8001018 <HAL_GPIO_Init+0x328>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d00d      	beq.n	8000f02 <HAL_GPIO_Init+0x212>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4c      	ldr	r2, [pc, #304]	@ (800101c <HAL_GPIO_Init+0x32c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d007      	beq.n	8000efe <HAL_GPIO_Init+0x20e>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4b      	ldr	r2, [pc, #300]	@ (8001020 <HAL_GPIO_Init+0x330>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d101      	bne.n	8000efa <HAL_GPIO_Init+0x20a>
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	e00e      	b.n	8000f18 <HAL_GPIO_Init+0x228>
 8000efa:	2308      	movs	r3, #8
 8000efc:	e00c      	b.n	8000f18 <HAL_GPIO_Init+0x228>
 8000efe:	2306      	movs	r3, #6
 8000f00:	e00a      	b.n	8000f18 <HAL_GPIO_Init+0x228>
 8000f02:	2305      	movs	r3, #5
 8000f04:	e008      	b.n	8000f18 <HAL_GPIO_Init+0x228>
 8000f06:	2304      	movs	r3, #4
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x228>
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e004      	b.n	8000f18 <HAL_GPIO_Init+0x228>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e002      	b.n	8000f18 <HAL_GPIO_Init+0x228>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <HAL_GPIO_Init+0x228>
 8000f16:	2300      	movs	r3, #0
 8000f18:	69fa      	ldr	r2, [r7, #28]
 8000f1a:	f002 0203 	and.w	r2, r2, #3
 8000f1e:	0092      	lsls	r2, r2, #2
 8000f20:	4093      	lsls	r3, r2
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f28:	4935      	ldr	r1, [pc, #212]	@ (8001000 <HAL_GPIO_Init+0x310>)
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	3302      	adds	r3, #2
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f36:	4b3b      	ldr	r3, [pc, #236]	@ (8001024 <HAL_GPIO_Init+0x334>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f5a:	4a32      	ldr	r2, [pc, #200]	@ (8001024 <HAL_GPIO_Init+0x334>)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f60:	4b30      	ldr	r3, [pc, #192]	@ (8001024 <HAL_GPIO_Init+0x334>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f84:	4a27      	ldr	r2, [pc, #156]	@ (8001024 <HAL_GPIO_Init+0x334>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f8a:	4b26      	ldr	r3, [pc, #152]	@ (8001024 <HAL_GPIO_Init+0x334>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fae:	4a1d      	ldr	r2, [pc, #116]	@ (8001024 <HAL_GPIO_Init+0x334>)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001024 <HAL_GPIO_Init+0x334>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd8:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <HAL_GPIO_Init+0x334>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	61fb      	str	r3, [r7, #28]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	2b0f      	cmp	r3, #15
 8000fe8:	f67f ae90 	bls.w	8000d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3724      	adds	r7, #36	@ 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40013800 	.word	0x40013800
 8001004:	40020000 	.word	0x40020000
 8001008:	40020400 	.word	0x40020400
 800100c:	40020800 	.word	0x40020800
 8001010:	40020c00 	.word	0x40020c00
 8001014:	40021000 	.word	0x40021000
 8001018:	40021400 	.word	0x40021400
 800101c:	40021800 	.word	0x40021800
 8001020:	40021c00 	.word	0x40021c00
 8001024:	40013c00 	.word	0x40013c00

08001028 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e267      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b00      	cmp	r3, #0
 8001044:	d075      	beq.n	8001132 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001046:	4b88      	ldr	r3, [pc, #544]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 030c 	and.w	r3, r3, #12
 800104e:	2b04      	cmp	r3, #4
 8001050:	d00c      	beq.n	800106c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001052:	4b85      	ldr	r3, [pc, #532]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800105a:	2b08      	cmp	r3, #8
 800105c:	d112      	bne.n	8001084 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800105e:	4b82      	ldr	r3, [pc, #520]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001066:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800106a:	d10b      	bne.n	8001084 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106c:	4b7e      	ldr	r3, [pc, #504]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d05b      	beq.n	8001130 <HAL_RCC_OscConfig+0x108>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d157      	bne.n	8001130 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e242      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800108c:	d106      	bne.n	800109c <HAL_RCC_OscConfig+0x74>
 800108e:	4b76      	ldr	r3, [pc, #472]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a75      	ldr	r2, [pc, #468]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 8001094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	e01d      	b.n	80010d8 <HAL_RCC_OscConfig+0xb0>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010a4:	d10c      	bne.n	80010c0 <HAL_RCC_OscConfig+0x98>
 80010a6:	4b70      	ldr	r3, [pc, #448]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a6f      	ldr	r2, [pc, #444]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 80010ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a6c      	ldr	r2, [pc, #432]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 80010b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	e00b      	b.n	80010d8 <HAL_RCC_OscConfig+0xb0>
 80010c0:	4b69      	ldr	r3, [pc, #420]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a68      	ldr	r2, [pc, #416]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 80010c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	4b66      	ldr	r3, [pc, #408]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a65      	ldr	r2, [pc, #404]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 80010d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d013      	beq.n	8001108 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e0:	f7ff fd18 	bl	8000b14 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e8:	f7ff fd14 	bl	8000b14 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b64      	cmp	r3, #100	@ 0x64
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e207      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f0      	beq.n	80010e8 <HAL_RCC_OscConfig+0xc0>
 8001106:	e014      	b.n	8001132 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001108:	f7ff fd04 	bl	8000b14 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001110:	f7ff fd00 	bl	8000b14 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b64      	cmp	r3, #100	@ 0x64
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e1f3      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001122:	4b51      	ldr	r3, [pc, #324]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f0      	bne.n	8001110 <HAL_RCC_OscConfig+0xe8>
 800112e:	e000      	b.n	8001132 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d063      	beq.n	8001206 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800113e:	4b4a      	ldr	r3, [pc, #296]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f003 030c 	and.w	r3, r3, #12
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00b      	beq.n	8001162 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800114a:	4b47      	ldr	r3, [pc, #284]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001152:	2b08      	cmp	r3, #8
 8001154:	d11c      	bne.n	8001190 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001156:	4b44      	ldr	r3, [pc, #272]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d116      	bne.n	8001190 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001162:	4b41      	ldr	r3, [pc, #260]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d005      	beq.n	800117a <HAL_RCC_OscConfig+0x152>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d001      	beq.n	800117a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e1c7      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117a:	4b3b      	ldr	r3, [pc, #236]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	4937      	ldr	r1, [pc, #220]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 800118a:	4313      	orrs	r3, r2
 800118c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118e:	e03a      	b.n	8001206 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d020      	beq.n	80011da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001198:	4b34      	ldr	r3, [pc, #208]	@ (800126c <HAL_RCC_OscConfig+0x244>)
 800119a:	2201      	movs	r2, #1
 800119c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119e:	f7ff fcb9 	bl	8000b14 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a6:	f7ff fcb5 	bl	8000b14 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e1a8      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f0      	beq.n	80011a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c4:	4b28      	ldr	r3, [pc, #160]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	4925      	ldr	r1, [pc, #148]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	600b      	str	r3, [r1, #0]
 80011d8:	e015      	b.n	8001206 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011da:	4b24      	ldr	r3, [pc, #144]	@ (800126c <HAL_RCC_OscConfig+0x244>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e0:	f7ff fc98 	bl	8000b14 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011e8:	f7ff fc94 	bl	8000b14 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e187      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d036      	beq.n	8001280 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d016      	beq.n	8001248 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800121a:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <HAL_RCC_OscConfig+0x248>)
 800121c:	2201      	movs	r2, #1
 800121e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001220:	f7ff fc78 	bl	8000b14 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001228:	f7ff fc74 	bl	8000b14 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e167      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123a:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <HAL_RCC_OscConfig+0x240>)
 800123c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f0      	beq.n	8001228 <HAL_RCC_OscConfig+0x200>
 8001246:	e01b      	b.n	8001280 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001248:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <HAL_RCC_OscConfig+0x248>)
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124e:	f7ff fc61 	bl	8000b14 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001254:	e00e      	b.n	8001274 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001256:	f7ff fc5d 	bl	8000b14 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d907      	bls.n	8001274 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e150      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
 8001268:	40023800 	.word	0x40023800
 800126c:	42470000 	.word	0x42470000
 8001270:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001274:	4b88      	ldr	r3, [pc, #544]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 8001276:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1ea      	bne.n	8001256 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8097 	beq.w	80013bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001292:	4b81      	ldr	r3, [pc, #516]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10f      	bne.n	80012be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	4b7d      	ldr	r3, [pc, #500]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	4a7c      	ldr	r2, [pc, #496]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ae:	4b7a      	ldr	r3, [pc, #488]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ba:	2301      	movs	r3, #1
 80012bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012be:	4b77      	ldr	r3, [pc, #476]	@ (800149c <HAL_RCC_OscConfig+0x474>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d118      	bne.n	80012fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ca:	4b74      	ldr	r3, [pc, #464]	@ (800149c <HAL_RCC_OscConfig+0x474>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a73      	ldr	r2, [pc, #460]	@ (800149c <HAL_RCC_OscConfig+0x474>)
 80012d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012d6:	f7ff fc1d 	bl	8000b14 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012de:	f7ff fc19 	bl	8000b14 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e10c      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f0:	4b6a      	ldr	r3, [pc, #424]	@ (800149c <HAL_RCC_OscConfig+0x474>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f0      	beq.n	80012de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d106      	bne.n	8001312 <HAL_RCC_OscConfig+0x2ea>
 8001304:	4b64      	ldr	r3, [pc, #400]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 8001306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001308:	4a63      	ldr	r2, [pc, #396]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001310:	e01c      	b.n	800134c <HAL_RCC_OscConfig+0x324>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b05      	cmp	r3, #5
 8001318:	d10c      	bne.n	8001334 <HAL_RCC_OscConfig+0x30c>
 800131a:	4b5f      	ldr	r3, [pc, #380]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 800131c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800131e:	4a5e      	ldr	r2, [pc, #376]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	6713      	str	r3, [r2, #112]	@ 0x70
 8001326:	4b5c      	ldr	r3, [pc, #368]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 8001328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800132a:	4a5b      	ldr	r2, [pc, #364]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6713      	str	r3, [r2, #112]	@ 0x70
 8001332:	e00b      	b.n	800134c <HAL_RCC_OscConfig+0x324>
 8001334:	4b58      	ldr	r3, [pc, #352]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 8001336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001338:	4a57      	ldr	r2, [pc, #348]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 800133a:	f023 0301 	bic.w	r3, r3, #1
 800133e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001340:	4b55      	ldr	r3, [pc, #340]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 8001342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001344:	4a54      	ldr	r2, [pc, #336]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 8001346:	f023 0304 	bic.w	r3, r3, #4
 800134a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d015      	beq.n	8001380 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001354:	f7ff fbde 	bl	8000b14 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800135a:	e00a      	b.n	8001372 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800135c:	f7ff fbda 	bl	8000b14 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800136a:	4293      	cmp	r3, r2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e0cb      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001372:	4b49      	ldr	r3, [pc, #292]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 8001374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0ee      	beq.n	800135c <HAL_RCC_OscConfig+0x334>
 800137e:	e014      	b.n	80013aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001380:	f7ff fbc8 	bl	8000b14 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001386:	e00a      	b.n	800139e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001388:	f7ff fbc4 	bl	8000b14 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001396:	4293      	cmp	r3, r2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e0b5      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800139e:	4b3e      	ldr	r3, [pc, #248]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 80013a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1ee      	bne.n	8001388 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d105      	bne.n	80013bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b0:	4b39      	ldr	r3, [pc, #228]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	4a38      	ldr	r2, [pc, #224]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 80013b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 80a1 	beq.w	8001508 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013c6:	4b34      	ldr	r3, [pc, #208]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d05c      	beq.n	800148c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d141      	bne.n	800145e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013da:	4b31      	ldr	r3, [pc, #196]	@ (80014a0 <HAL_RCC_OscConfig+0x478>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff fb98 	bl	8000b14 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e8:	f7ff fb94 	bl	8000b14 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e087      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013fa:	4b27      	ldr	r3, [pc, #156]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69da      	ldr	r2, [r3, #28]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001414:	019b      	lsls	r3, r3, #6
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800141c:	085b      	lsrs	r3, r3, #1
 800141e:	3b01      	subs	r3, #1
 8001420:	041b      	lsls	r3, r3, #16
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001428:	061b      	lsls	r3, r3, #24
 800142a:	491b      	ldr	r1, [pc, #108]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001430:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <HAL_RCC_OscConfig+0x478>)
 8001432:	2201      	movs	r2, #1
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff fb6d 	bl	8000b14 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143e:	f7ff fb69 	bl	8000b14 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e05c      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001450:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x416>
 800145c:	e054      	b.n	8001508 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <HAL_RCC_OscConfig+0x478>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fb56 	bl	8000b14 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146c:	f7ff fb52 	bl	8000b14 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e045      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147e:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <HAL_RCC_OscConfig+0x470>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x444>
 800148a:	e03d      	b.n	8001508 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d107      	bne.n	80014a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e038      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
 8001498:	40023800 	.word	0x40023800
 800149c:	40007000 	.word	0x40007000
 80014a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <HAL_RCC_OscConfig+0x4ec>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d028      	beq.n	8001504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014bc:	429a      	cmp	r2, r3
 80014be:	d121      	bne.n	8001504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d11a      	bne.n	8001504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80014d4:	4013      	ands	r3, r2
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80014da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014dc:	4293      	cmp	r3, r2
 80014de:	d111      	bne.n	8001504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ea:	085b      	lsrs	r3, r3, #1
 80014ec:	3b01      	subs	r3, #1
 80014ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d107      	bne.n	8001504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001500:	429a      	cmp	r2, r3
 8001502:	d001      	beq.n	8001508 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800

08001518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0cc      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800152c:	4b68      	ldr	r3, [pc, #416]	@ (80016d0 <HAL_RCC_ClockConfig+0x1b8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d90c      	bls.n	8001554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153a:	4b65      	ldr	r3, [pc, #404]	@ (80016d0 <HAL_RCC_ClockConfig+0x1b8>)
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001542:	4b63      	ldr	r3, [pc, #396]	@ (80016d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	429a      	cmp	r2, r3
 800154e:	d001      	beq.n	8001554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e0b8      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d020      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800156c:	4b59      	ldr	r3, [pc, #356]	@ (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	4a58      	ldr	r2, [pc, #352]	@ (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001576:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001584:	4b53      	ldr	r3, [pc, #332]	@ (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	4a52      	ldr	r2, [pc, #328]	@ (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800158e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001590:	4b50      	ldr	r3, [pc, #320]	@ (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	494d      	ldr	r1, [pc, #308]	@ (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d044      	beq.n	8001638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d107      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b6:	4b47      	ldr	r3, [pc, #284]	@ (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d119      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e07f      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d003      	beq.n	80015d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d107      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d6:	4b3f      	ldr	r3, [pc, #252]	@ (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d109      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e06f      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e6:	4b3b      	ldr	r3, [pc, #236]	@ (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e067      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f6:	4b37      	ldr	r3, [pc, #220]	@ (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f023 0203 	bic.w	r2, r3, #3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4934      	ldr	r1, [pc, #208]	@ (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	4313      	orrs	r3, r2
 8001606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001608:	f7ff fa84 	bl	8000b14 <HAL_GetTick>
 800160c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160e:	e00a      	b.n	8001626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001610:	f7ff fa80 	bl	8000b14 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800161e:	4293      	cmp	r3, r2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e04f      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001626:	4b2b      	ldr	r3, [pc, #172]	@ (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 020c 	and.w	r2, r3, #12
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	429a      	cmp	r2, r3
 8001636:	d1eb      	bne.n	8001610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001638:	4b25      	ldr	r3, [pc, #148]	@ (80016d0 <HAL_RCC_ClockConfig+0x1b8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d20c      	bcs.n	8001660 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001646:	4b22      	ldr	r3, [pc, #136]	@ (80016d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800164e:	4b20      	ldr	r3, [pc, #128]	@ (80016d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d001      	beq.n	8001660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e032      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d008      	beq.n	800167e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800166c:	4b19      	ldr	r3, [pc, #100]	@ (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	4916      	ldr	r1, [pc, #88]	@ (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	2b00      	cmp	r3, #0
 8001688:	d009      	beq.n	800169e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800168a:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	490e      	ldr	r1, [pc, #56]	@ (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	4313      	orrs	r3, r2
 800169c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800169e:	f000 f821 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
 80016a2:	4602      	mov	r2, r0
 80016a4:	4b0b      	ldr	r3, [pc, #44]	@ (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	091b      	lsrs	r3, r3, #4
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	490a      	ldr	r1, [pc, #40]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c0>)
 80016b0:	5ccb      	ldrb	r3, [r1, r3]
 80016b2:	fa22 f303 	lsr.w	r3, r2, r3
 80016b6:	4a09      	ldr	r2, [pc, #36]	@ (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <HAL_RCC_ClockConfig+0x1c8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff f91c 	bl	80008fc <HAL_InitTick>

  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023c00 	.word	0x40023c00
 80016d4:	40023800 	.word	0x40023800
 80016d8:	0800503c 	.word	0x0800503c
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000004 	.word	0x20000004

080016e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016e8:	b094      	sub	sp, #80	@ 0x50
 80016ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016fc:	4b79      	ldr	r3, [pc, #484]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 030c 	and.w	r3, r3, #12
 8001704:	2b08      	cmp	r3, #8
 8001706:	d00d      	beq.n	8001724 <HAL_RCC_GetSysClockFreq+0x40>
 8001708:	2b08      	cmp	r3, #8
 800170a:	f200 80e1 	bhi.w	80018d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800170e:	2b00      	cmp	r3, #0
 8001710:	d002      	beq.n	8001718 <HAL_RCC_GetSysClockFreq+0x34>
 8001712:	2b04      	cmp	r3, #4
 8001714:	d003      	beq.n	800171e <HAL_RCC_GetSysClockFreq+0x3a>
 8001716:	e0db      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001718:	4b73      	ldr	r3, [pc, #460]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800171a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800171c:	e0db      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800171e:	4b73      	ldr	r3, [pc, #460]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x208>)
 8001720:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001722:	e0d8      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001724:	4b6f      	ldr	r3, [pc, #444]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800172c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800172e:	4b6d      	ldr	r3, [pc, #436]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d063      	beq.n	8001802 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800173a:	4b6a      	ldr	r3, [pc, #424]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	099b      	lsrs	r3, r3, #6
 8001740:	2200      	movs	r2, #0
 8001742:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001744:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800174c:	633b      	str	r3, [r7, #48]	@ 0x30
 800174e:	2300      	movs	r3, #0
 8001750:	637b      	str	r3, [r7, #52]	@ 0x34
 8001752:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001756:	4622      	mov	r2, r4
 8001758:	462b      	mov	r3, r5
 800175a:	f04f 0000 	mov.w	r0, #0
 800175e:	f04f 0100 	mov.w	r1, #0
 8001762:	0159      	lsls	r1, r3, #5
 8001764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001768:	0150      	lsls	r0, r2, #5
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4621      	mov	r1, r4
 8001770:	1a51      	subs	r1, r2, r1
 8001772:	6139      	str	r1, [r7, #16]
 8001774:	4629      	mov	r1, r5
 8001776:	eb63 0301 	sbc.w	r3, r3, r1
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001788:	4659      	mov	r1, fp
 800178a:	018b      	lsls	r3, r1, #6
 800178c:	4651      	mov	r1, sl
 800178e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001792:	4651      	mov	r1, sl
 8001794:	018a      	lsls	r2, r1, #6
 8001796:	4651      	mov	r1, sl
 8001798:	ebb2 0801 	subs.w	r8, r2, r1
 800179c:	4659      	mov	r1, fp
 800179e:	eb63 0901 	sbc.w	r9, r3, r1
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017b6:	4690      	mov	r8, r2
 80017b8:	4699      	mov	r9, r3
 80017ba:	4623      	mov	r3, r4
 80017bc:	eb18 0303 	adds.w	r3, r8, r3
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	462b      	mov	r3, r5
 80017c4:	eb49 0303 	adc.w	r3, r9, r3
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017d6:	4629      	mov	r1, r5
 80017d8:	024b      	lsls	r3, r1, #9
 80017da:	4621      	mov	r1, r4
 80017dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017e0:	4621      	mov	r1, r4
 80017e2:	024a      	lsls	r2, r1, #9
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017ea:	2200      	movs	r2, #0
 80017ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80017f4:	f7fe fcec 	bl	80001d0 <__aeabi_uldivmod>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4613      	mov	r3, r2
 80017fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001800:	e058      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001802:	4b38      	ldr	r3, [pc, #224]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	099b      	lsrs	r3, r3, #6
 8001808:	2200      	movs	r2, #0
 800180a:	4618      	mov	r0, r3
 800180c:	4611      	mov	r1, r2
 800180e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001812:	623b      	str	r3, [r7, #32]
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	@ 0x24
 8001818:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800181c:	4642      	mov	r2, r8
 800181e:	464b      	mov	r3, r9
 8001820:	f04f 0000 	mov.w	r0, #0
 8001824:	f04f 0100 	mov.w	r1, #0
 8001828:	0159      	lsls	r1, r3, #5
 800182a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800182e:	0150      	lsls	r0, r2, #5
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4641      	mov	r1, r8
 8001836:	ebb2 0a01 	subs.w	sl, r2, r1
 800183a:	4649      	mov	r1, r9
 800183c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800184c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001850:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001854:	ebb2 040a 	subs.w	r4, r2, sl
 8001858:	eb63 050b 	sbc.w	r5, r3, fp
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	00eb      	lsls	r3, r5, #3
 8001866:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800186a:	00e2      	lsls	r2, r4, #3
 800186c:	4614      	mov	r4, r2
 800186e:	461d      	mov	r5, r3
 8001870:	4643      	mov	r3, r8
 8001872:	18e3      	adds	r3, r4, r3
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	464b      	mov	r3, r9
 8001878:	eb45 0303 	adc.w	r3, r5, r3
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	e9d7 4500 	ldrd	r4, r5, [r7]
 800188a:	4629      	mov	r1, r5
 800188c:	028b      	lsls	r3, r1, #10
 800188e:	4621      	mov	r1, r4
 8001890:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001894:	4621      	mov	r1, r4
 8001896:	028a      	lsls	r2, r1, #10
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800189e:	2200      	movs	r2, #0
 80018a0:	61bb      	str	r3, [r7, #24]
 80018a2:	61fa      	str	r2, [r7, #28]
 80018a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018a8:	f7fe fc92 	bl	80001d0 <__aeabi_uldivmod>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4613      	mov	r3, r2
 80018b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	0c1b      	lsrs	r3, r3, #16
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	3301      	adds	r3, #1
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80018c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018ce:	e002      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018d0:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80018d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3750      	adds	r7, #80	@ 0x50
 80018dc:	46bd      	mov	sp, r7
 80018de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	00f42400 	.word	0x00f42400
 80018ec:	007a1200 	.word	0x007a1200

080018f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f4:	4b03      	ldr	r3, [pc, #12]	@ (8001904 <HAL_RCC_GetHCLKFreq+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000000 	.word	0x20000000

08001908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800190c:	f7ff fff0 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 8001910:	4602      	mov	r2, r0
 8001912:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	0a9b      	lsrs	r3, r3, #10
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	4903      	ldr	r1, [pc, #12]	@ (800192c <HAL_RCC_GetPCLK1Freq+0x24>)
 800191e:	5ccb      	ldrb	r3, [r1, r3]
 8001920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40023800 	.word	0x40023800
 800192c:	0800504c 	.word	0x0800504c

08001930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001934:	f7ff ffdc 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	0b5b      	lsrs	r3, r3, #13
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	4903      	ldr	r1, [pc, #12]	@ (8001954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	0800504c 	.word	0x0800504c

08001958 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	220f      	movs	r2, #15
 8001966:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001968:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 0203 	and.w	r2, r3, #3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001974:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001980:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800198c:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	08db      	lsrs	r3, r3, #3
 8001992:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800199a:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <HAL_RCC_GetClockConfig+0x60>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0207 	and.w	r2, r3, #7
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	601a      	str	r2, [r3, #0]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40023c00 	.word	0x40023c00

080019bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e041      	b.n	8001a52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d106      	bne.n	80019e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f839 	bl	8001a5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3304      	adds	r3, #4
 80019f8:	4619      	mov	r1, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f000 f9c0 	bl	8001d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d001      	beq.n	8001a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e04e      	b.n	8001b26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a23      	ldr	r2, [pc, #140]	@ (8001b34 <HAL_TIM_Base_Start_IT+0xc4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d022      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ab2:	d01d      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a1f      	ldr	r2, [pc, #124]	@ (8001b38 <HAL_TIM_Base_Start_IT+0xc8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d018      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b3c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d013      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a1c      	ldr	r2, [pc, #112]	@ (8001b40 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d00e      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b44 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d009      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a19      	ldr	r2, [pc, #100]	@ (8001b48 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d004      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a18      	ldr	r2, [pc, #96]	@ (8001b4c <HAL_TIM_Base_Start_IT+0xdc>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d111      	bne.n	8001b14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d010      	beq.n	8001b24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 0201 	orr.w	r2, r2, #1
 8001b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b12:	e007      	b.n	8001b24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40010000 	.word	0x40010000
 8001b38:	40000400 	.word	0x40000400
 8001b3c:	40000800 	.word	0x40000800
 8001b40:	40000c00 	.word	0x40000c00
 8001b44:	40010400 	.word	0x40010400
 8001b48:	40014000 	.word	0x40014000
 8001b4c:	40001800 	.word	0x40001800

08001b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d020      	beq.n	8001bb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d01b      	beq.n	8001bb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f06f 0202 	mvn.w	r2, #2
 8001b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f8d2 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 8001ba0:	e005      	b.n	8001bae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f8c4 	bl	8001d30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f8d5 	bl	8001d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d020      	beq.n	8001c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d01b      	beq.n	8001c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0204 	mvn.w	r2, #4
 8001bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f8ac 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 8001bec:	e005      	b.n	8001bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f89e 	bl	8001d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f8af 	bl	8001d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d020      	beq.n	8001c4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d01b      	beq.n	8001c4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0208 	mvn.w	r2, #8
 8001c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2204      	movs	r2, #4
 8001c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f886 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 8001c38:	e005      	b.n	8001c46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f878 	bl	8001d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f889 	bl	8001d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d020      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d01b      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0210 	mvn.w	r2, #16
 8001c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2208      	movs	r2, #8
 8001c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f860 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 8001c84:	e005      	b.n	8001c92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f852 	bl	8001d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f863 	bl	8001d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00c      	beq.n	8001cbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d007      	beq.n	8001cbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0201 	mvn.w	r2, #1
 8001cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7fe fd94 	bl	80007e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00c      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d007      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f900 	bl	8001ee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00c      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d007      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f834 	bl	8001d6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0320 	and.w	r3, r3, #32
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0220 	mvn.w	r2, #32
 8001d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f8d2 	bl	8001ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a43      	ldr	r2, [pc, #268]	@ (8001ea0 <TIM_Base_SetConfig+0x120>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d013      	beq.n	8001dc0 <TIM_Base_SetConfig+0x40>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d9e:	d00f      	beq.n	8001dc0 <TIM_Base_SetConfig+0x40>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a40      	ldr	r2, [pc, #256]	@ (8001ea4 <TIM_Base_SetConfig+0x124>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00b      	beq.n	8001dc0 <TIM_Base_SetConfig+0x40>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a3f      	ldr	r2, [pc, #252]	@ (8001ea8 <TIM_Base_SetConfig+0x128>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d007      	beq.n	8001dc0 <TIM_Base_SetConfig+0x40>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a3e      	ldr	r2, [pc, #248]	@ (8001eac <TIM_Base_SetConfig+0x12c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d003      	beq.n	8001dc0 <TIM_Base_SetConfig+0x40>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a3d      	ldr	r2, [pc, #244]	@ (8001eb0 <TIM_Base_SetConfig+0x130>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d108      	bne.n	8001dd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a32      	ldr	r2, [pc, #200]	@ (8001ea0 <TIM_Base_SetConfig+0x120>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d02b      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001de0:	d027      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a2f      	ldr	r2, [pc, #188]	@ (8001ea4 <TIM_Base_SetConfig+0x124>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d023      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a2e      	ldr	r2, [pc, #184]	@ (8001ea8 <TIM_Base_SetConfig+0x128>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01f      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a2d      	ldr	r2, [pc, #180]	@ (8001eac <TIM_Base_SetConfig+0x12c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01b      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a2c      	ldr	r2, [pc, #176]	@ (8001eb0 <TIM_Base_SetConfig+0x130>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d017      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a2b      	ldr	r2, [pc, #172]	@ (8001eb4 <TIM_Base_SetConfig+0x134>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001eb8 <TIM_Base_SetConfig+0x138>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00f      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a29      	ldr	r2, [pc, #164]	@ (8001ebc <TIM_Base_SetConfig+0x13c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00b      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a28      	ldr	r2, [pc, #160]	@ (8001ec0 <TIM_Base_SetConfig+0x140>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d007      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a27      	ldr	r2, [pc, #156]	@ (8001ec4 <TIM_Base_SetConfig+0x144>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d003      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a26      	ldr	r2, [pc, #152]	@ (8001ec8 <TIM_Base_SetConfig+0x148>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d108      	bne.n	8001e44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a0e      	ldr	r2, [pc, #56]	@ (8001ea0 <TIM_Base_SetConfig+0x120>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d003      	beq.n	8001e72 <TIM_Base_SetConfig+0xf2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a10      	ldr	r2, [pc, #64]	@ (8001eb0 <TIM_Base_SetConfig+0x130>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d103      	bne.n	8001e7a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f043 0204 	orr.w	r2, r3, #4
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	601a      	str	r2, [r3, #0]
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40010000 	.word	0x40010000
 8001ea4:	40000400 	.word	0x40000400
 8001ea8:	40000800 	.word	0x40000800
 8001eac:	40000c00 	.word	0x40000c00
 8001eb0:	40010400 	.word	0x40010400
 8001eb4:	40014000 	.word	0x40014000
 8001eb8:	40014400 	.word	0x40014400
 8001ebc:	40014800 	.word	0x40014800
 8001ec0:	40001800 	.word	0x40001800
 8001ec4:	40001c00 	.word	0x40001c00
 8001ec8:	40002000 	.word	0x40002000

08001ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e042      	b.n	8001f8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7fe fca6 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2224      	movs	r2, #36	@ 0x24
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f82b 	bl	8001f94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f98:	b0c0      	sub	sp, #256	@ 0x100
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb0:	68d9      	ldr	r1, [r3, #12]
 8001fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	ea40 0301 	orr.w	r3, r0, r1
 8001fbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001fec:	f021 010c 	bic.w	r1, r1, #12
 8001ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001ffa:	430b      	orrs	r3, r1
 8001ffc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800200a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800200e:	6999      	ldr	r1, [r3, #24]
 8002010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	ea40 0301 	orr.w	r3, r0, r1
 800201a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800201c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	4b8f      	ldr	r3, [pc, #572]	@ (8002260 <UART_SetConfig+0x2cc>)
 8002024:	429a      	cmp	r2, r3
 8002026:	d005      	beq.n	8002034 <UART_SetConfig+0xa0>
 8002028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4b8d      	ldr	r3, [pc, #564]	@ (8002264 <UART_SetConfig+0x2d0>)
 8002030:	429a      	cmp	r2, r3
 8002032:	d104      	bne.n	800203e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002034:	f7ff fc7c 	bl	8001930 <HAL_RCC_GetPCLK2Freq>
 8002038:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800203c:	e003      	b.n	8002046 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800203e:	f7ff fc63 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 8002042:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002050:	f040 810c 	bne.w	800226c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002058:	2200      	movs	r2, #0
 800205a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800205e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002062:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002066:	4622      	mov	r2, r4
 8002068:	462b      	mov	r3, r5
 800206a:	1891      	adds	r1, r2, r2
 800206c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800206e:	415b      	adcs	r3, r3
 8002070:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002072:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002076:	4621      	mov	r1, r4
 8002078:	eb12 0801 	adds.w	r8, r2, r1
 800207c:	4629      	mov	r1, r5
 800207e:	eb43 0901 	adc.w	r9, r3, r1
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800208e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002096:	4690      	mov	r8, r2
 8002098:	4699      	mov	r9, r3
 800209a:	4623      	mov	r3, r4
 800209c:	eb18 0303 	adds.w	r3, r8, r3
 80020a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80020a4:	462b      	mov	r3, r5
 80020a6:	eb49 0303 	adc.w	r3, r9, r3
 80020aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80020ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80020ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80020be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80020c2:	460b      	mov	r3, r1
 80020c4:	18db      	adds	r3, r3, r3
 80020c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80020c8:	4613      	mov	r3, r2
 80020ca:	eb42 0303 	adc.w	r3, r2, r3
 80020ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80020d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80020d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80020d8:	f7fe f87a 	bl	80001d0 <__aeabi_uldivmod>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4b61      	ldr	r3, [pc, #388]	@ (8002268 <UART_SetConfig+0x2d4>)
 80020e2:	fba3 2302 	umull	r2, r3, r3, r2
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	011c      	lsls	r4, r3, #4
 80020ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020ee:	2200      	movs	r2, #0
 80020f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80020f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80020f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80020fc:	4642      	mov	r2, r8
 80020fe:	464b      	mov	r3, r9
 8002100:	1891      	adds	r1, r2, r2
 8002102:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002104:	415b      	adcs	r3, r3
 8002106:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002108:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800210c:	4641      	mov	r1, r8
 800210e:	eb12 0a01 	adds.w	sl, r2, r1
 8002112:	4649      	mov	r1, r9
 8002114:	eb43 0b01 	adc.w	fp, r3, r1
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002124:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002128:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800212c:	4692      	mov	sl, r2
 800212e:	469b      	mov	fp, r3
 8002130:	4643      	mov	r3, r8
 8002132:	eb1a 0303 	adds.w	r3, sl, r3
 8002136:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800213a:	464b      	mov	r3, r9
 800213c:	eb4b 0303 	adc.w	r3, fp, r3
 8002140:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002150:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002154:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002158:	460b      	mov	r3, r1
 800215a:	18db      	adds	r3, r3, r3
 800215c:	643b      	str	r3, [r7, #64]	@ 0x40
 800215e:	4613      	mov	r3, r2
 8002160:	eb42 0303 	adc.w	r3, r2, r3
 8002164:	647b      	str	r3, [r7, #68]	@ 0x44
 8002166:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800216a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800216e:	f7fe f82f 	bl	80001d0 <__aeabi_uldivmod>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4611      	mov	r1, r2
 8002178:	4b3b      	ldr	r3, [pc, #236]	@ (8002268 <UART_SetConfig+0x2d4>)
 800217a:	fba3 2301 	umull	r2, r3, r3, r1
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	2264      	movs	r2, #100	@ 0x64
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	1acb      	subs	r3, r1, r3
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800218e:	4b36      	ldr	r3, [pc, #216]	@ (8002268 <UART_SetConfig+0x2d4>)
 8002190:	fba3 2302 	umull	r2, r3, r3, r2
 8002194:	095b      	lsrs	r3, r3, #5
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800219c:	441c      	add	r4, r3
 800219e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021a2:	2200      	movs	r2, #0
 80021a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80021a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80021ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80021b0:	4642      	mov	r2, r8
 80021b2:	464b      	mov	r3, r9
 80021b4:	1891      	adds	r1, r2, r2
 80021b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80021b8:	415b      	adcs	r3, r3
 80021ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80021c0:	4641      	mov	r1, r8
 80021c2:	1851      	adds	r1, r2, r1
 80021c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80021c6:	4649      	mov	r1, r9
 80021c8:	414b      	adcs	r3, r1
 80021ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80021d8:	4659      	mov	r1, fp
 80021da:	00cb      	lsls	r3, r1, #3
 80021dc:	4651      	mov	r1, sl
 80021de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021e2:	4651      	mov	r1, sl
 80021e4:	00ca      	lsls	r2, r1, #3
 80021e6:	4610      	mov	r0, r2
 80021e8:	4619      	mov	r1, r3
 80021ea:	4603      	mov	r3, r0
 80021ec:	4642      	mov	r2, r8
 80021ee:	189b      	adds	r3, r3, r2
 80021f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80021f4:	464b      	mov	r3, r9
 80021f6:	460a      	mov	r2, r1
 80021f8:	eb42 0303 	adc.w	r3, r2, r3
 80021fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800220c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002210:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002214:	460b      	mov	r3, r1
 8002216:	18db      	adds	r3, r3, r3
 8002218:	62bb      	str	r3, [r7, #40]	@ 0x28
 800221a:	4613      	mov	r3, r2
 800221c:	eb42 0303 	adc.w	r3, r2, r3
 8002220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002222:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002226:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800222a:	f7fd ffd1 	bl	80001d0 <__aeabi_uldivmod>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4b0d      	ldr	r3, [pc, #52]	@ (8002268 <UART_SetConfig+0x2d4>)
 8002234:	fba3 1302 	umull	r1, r3, r3, r2
 8002238:	095b      	lsrs	r3, r3, #5
 800223a:	2164      	movs	r1, #100	@ 0x64
 800223c:	fb01 f303 	mul.w	r3, r1, r3
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	3332      	adds	r3, #50	@ 0x32
 8002246:	4a08      	ldr	r2, [pc, #32]	@ (8002268 <UART_SetConfig+0x2d4>)
 8002248:	fba2 2303 	umull	r2, r3, r2, r3
 800224c:	095b      	lsrs	r3, r3, #5
 800224e:	f003 0207 	and.w	r2, r3, #7
 8002252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4422      	add	r2, r4
 800225a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800225c:	e106      	b.n	800246c <UART_SetConfig+0x4d8>
 800225e:	bf00      	nop
 8002260:	40011000 	.word	0x40011000
 8002264:	40011400 	.word	0x40011400
 8002268:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800226c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002270:	2200      	movs	r2, #0
 8002272:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002276:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800227a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800227e:	4642      	mov	r2, r8
 8002280:	464b      	mov	r3, r9
 8002282:	1891      	adds	r1, r2, r2
 8002284:	6239      	str	r1, [r7, #32]
 8002286:	415b      	adcs	r3, r3
 8002288:	627b      	str	r3, [r7, #36]	@ 0x24
 800228a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800228e:	4641      	mov	r1, r8
 8002290:	1854      	adds	r4, r2, r1
 8002292:	4649      	mov	r1, r9
 8002294:	eb43 0501 	adc.w	r5, r3, r1
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	00eb      	lsls	r3, r5, #3
 80022a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022a6:	00e2      	lsls	r2, r4, #3
 80022a8:	4614      	mov	r4, r2
 80022aa:	461d      	mov	r5, r3
 80022ac:	4643      	mov	r3, r8
 80022ae:	18e3      	adds	r3, r4, r3
 80022b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022b4:	464b      	mov	r3, r9
 80022b6:	eb45 0303 	adc.w	r3, r5, r3
 80022ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80022be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022da:	4629      	mov	r1, r5
 80022dc:	008b      	lsls	r3, r1, #2
 80022de:	4621      	mov	r1, r4
 80022e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022e4:	4621      	mov	r1, r4
 80022e6:	008a      	lsls	r2, r1, #2
 80022e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80022ec:	f7fd ff70 	bl	80001d0 <__aeabi_uldivmod>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4b60      	ldr	r3, [pc, #384]	@ (8002478 <UART_SetConfig+0x4e4>)
 80022f6:	fba3 2302 	umull	r2, r3, r3, r2
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	011c      	lsls	r4, r3, #4
 80022fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002302:	2200      	movs	r2, #0
 8002304:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002308:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800230c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002310:	4642      	mov	r2, r8
 8002312:	464b      	mov	r3, r9
 8002314:	1891      	adds	r1, r2, r2
 8002316:	61b9      	str	r1, [r7, #24]
 8002318:	415b      	adcs	r3, r3
 800231a:	61fb      	str	r3, [r7, #28]
 800231c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002320:	4641      	mov	r1, r8
 8002322:	1851      	adds	r1, r2, r1
 8002324:	6139      	str	r1, [r7, #16]
 8002326:	4649      	mov	r1, r9
 8002328:	414b      	adcs	r3, r1
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002338:	4659      	mov	r1, fp
 800233a:	00cb      	lsls	r3, r1, #3
 800233c:	4651      	mov	r1, sl
 800233e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002342:	4651      	mov	r1, sl
 8002344:	00ca      	lsls	r2, r1, #3
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	4603      	mov	r3, r0
 800234c:	4642      	mov	r2, r8
 800234e:	189b      	adds	r3, r3, r2
 8002350:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002354:	464b      	mov	r3, r9
 8002356:	460a      	mov	r2, r1
 8002358:	eb42 0303 	adc.w	r3, r2, r3
 800235c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	67bb      	str	r3, [r7, #120]	@ 0x78
 800236a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002378:	4649      	mov	r1, r9
 800237a:	008b      	lsls	r3, r1, #2
 800237c:	4641      	mov	r1, r8
 800237e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002382:	4641      	mov	r1, r8
 8002384:	008a      	lsls	r2, r1, #2
 8002386:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800238a:	f7fd ff21 	bl	80001d0 <__aeabi_uldivmod>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4611      	mov	r1, r2
 8002394:	4b38      	ldr	r3, [pc, #224]	@ (8002478 <UART_SetConfig+0x4e4>)
 8002396:	fba3 2301 	umull	r2, r3, r3, r1
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2264      	movs	r2, #100	@ 0x64
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	1acb      	subs	r3, r1, r3
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	3332      	adds	r3, #50	@ 0x32
 80023a8:	4a33      	ldr	r2, [pc, #204]	@ (8002478 <UART_SetConfig+0x4e4>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023b4:	441c      	add	r4, r3
 80023b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023ba:	2200      	movs	r2, #0
 80023bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80023be:	677a      	str	r2, [r7, #116]	@ 0x74
 80023c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80023c4:	4642      	mov	r2, r8
 80023c6:	464b      	mov	r3, r9
 80023c8:	1891      	adds	r1, r2, r2
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	415b      	adcs	r3, r3
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023d4:	4641      	mov	r1, r8
 80023d6:	1851      	adds	r1, r2, r1
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	4649      	mov	r1, r9
 80023dc:	414b      	adcs	r3, r1
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023ec:	4659      	mov	r1, fp
 80023ee:	00cb      	lsls	r3, r1, #3
 80023f0:	4651      	mov	r1, sl
 80023f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023f6:	4651      	mov	r1, sl
 80023f8:	00ca      	lsls	r2, r1, #3
 80023fa:	4610      	mov	r0, r2
 80023fc:	4619      	mov	r1, r3
 80023fe:	4603      	mov	r3, r0
 8002400:	4642      	mov	r2, r8
 8002402:	189b      	adds	r3, r3, r2
 8002404:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002406:	464b      	mov	r3, r9
 8002408:	460a      	mov	r2, r1
 800240a:	eb42 0303 	adc.w	r3, r2, r3
 800240e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	663b      	str	r3, [r7, #96]	@ 0x60
 800241a:	667a      	str	r2, [r7, #100]	@ 0x64
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002428:	4649      	mov	r1, r9
 800242a:	008b      	lsls	r3, r1, #2
 800242c:	4641      	mov	r1, r8
 800242e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002432:	4641      	mov	r1, r8
 8002434:	008a      	lsls	r2, r1, #2
 8002436:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800243a:	f7fd fec9 	bl	80001d0 <__aeabi_uldivmod>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4b0d      	ldr	r3, [pc, #52]	@ (8002478 <UART_SetConfig+0x4e4>)
 8002444:	fba3 1302 	umull	r1, r3, r3, r2
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	2164      	movs	r1, #100	@ 0x64
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	3332      	adds	r3, #50	@ 0x32
 8002456:	4a08      	ldr	r2, [pc, #32]	@ (8002478 <UART_SetConfig+0x4e4>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	f003 020f 	and.w	r2, r3, #15
 8002462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4422      	add	r2, r4
 800246a:	609a      	str	r2, [r3, #8]
}
 800246c:	bf00      	nop
 800246e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002472:	46bd      	mov	sp, r7
 8002474:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002478:	51eb851f 	.word	0x51eb851f

0800247c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002480:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <SysTick_Handler+0x1c>)
 8002482:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002484:	f001 fce8 	bl	8003e58 <xTaskGetSchedulerState>
 8002488:	4603      	mov	r3, r0
 800248a:	2b01      	cmp	r3, #1
 800248c:	d001      	beq.n	8002492 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800248e:	f002 fae3 	bl	8004a58 <xPortSysTickHandler>
  }
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	e000e010 	.word	0xe000e010

0800249c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4a07      	ldr	r2, [pc, #28]	@ (80024c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80024ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	4a06      	ldr	r2, [pc, #24]	@ (80024cc <vApplicationGetIdleTaskMemory+0x30>)
 80024b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2280      	movs	r2, #128	@ 0x80
 80024b8:	601a      	str	r2, [r3, #0]
}
 80024ba:	bf00      	nop
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	200000e4 	.word	0x200000e4
 80024cc:	20000140 	.word	0x20000140

080024d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4a07      	ldr	r2, [pc, #28]	@ (80024fc <vApplicationGetTimerTaskMemory+0x2c>)
 80024e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	4a06      	ldr	r2, [pc, #24]	@ (8002500 <vApplicationGetTimerTaskMemory+0x30>)
 80024e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024ee:	601a      	str	r2, [r3, #0]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	20000340 	.word	0x20000340
 8002500:	2000039c 	.word	0x2000039c

08002504 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f103 0208 	add.w	r2, r3, #8
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f04f 32ff 	mov.w	r2, #4294967295
 800251c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f103 0208 	add.w	r2, r3, #8
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f103 0208 	add.w	r2, r3, #8
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800255e:	b480      	push	{r7}
 8002560:	b085      	sub	sp, #20
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	601a      	str	r2, [r3, #0]
}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d103      	bne.n	80025c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	e00c      	b.n	80025e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3308      	adds	r3, #8
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	e002      	b.n	80025d4 <vListInsert+0x2e>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d2f6      	bcs.n	80025ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	601a      	str	r2, [r3, #0]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6892      	ldr	r2, [r2, #8]
 800262e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6852      	ldr	r2, [r2, #4]
 8002638:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	429a      	cmp	r2, r3
 8002642:	d103      	bne.n	800264c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	1e5a      	subs	r2, r3, #1
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10b      	bne.n	8002698 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002684:	f383 8811 	msr	BASEPRI, r3
 8002688:	f3bf 8f6f 	isb	sy
 800268c:	f3bf 8f4f 	dsb	sy
 8002690:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002692:	bf00      	nop
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002698:	f002 f94e 	bl	8004938 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a4:	68f9      	ldr	r1, [r7, #12]
 80026a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	441a      	add	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c8:	3b01      	subs	r3, #1
 80026ca:	68f9      	ldr	r1, [r7, #12]
 80026cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	441a      	add	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	22ff      	movs	r2, #255	@ 0xff
 80026dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	22ff      	movs	r2, #255	@ 0xff
 80026e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d114      	bne.n	8002718 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d01a      	beq.n	800272c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3310      	adds	r3, #16
 80026fa:	4618      	mov	r0, r3
 80026fc:	f001 f9ec 	bl	8003ad8 <xTaskRemoveFromEventList>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d012      	beq.n	800272c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002706:	4b0d      	ldr	r3, [pc, #52]	@ (800273c <xQueueGenericReset+0xd0>)
 8002708:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	f3bf 8f4f 	dsb	sy
 8002712:	f3bf 8f6f 	isb	sy
 8002716:	e009      	b.n	800272c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	3310      	adds	r3, #16
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fef1 	bl	8002504 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3324      	adds	r3, #36	@ 0x24
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff feec 	bl	8002504 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800272c:	f002 f936 	bl	800499c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002730:	2301      	movs	r3, #1
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	e000ed04 	.word	0xe000ed04

08002740 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08e      	sub	sp, #56	@ 0x38
 8002744:	af02      	add	r7, sp, #8
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10b      	bne.n	800276c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
 8002764:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002766:	bf00      	nop
 8002768:	bf00      	nop
 800276a:	e7fd      	b.n	8002768 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10b      	bne.n	800278a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002776:	f383 8811 	msr	BASEPRI, r3
 800277a:	f3bf 8f6f 	isb	sy
 800277e:	f3bf 8f4f 	dsb	sy
 8002782:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop
 8002788:	e7fd      	b.n	8002786 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <xQueueGenericCreateStatic+0x56>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <xQueueGenericCreateStatic+0x5a>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <xQueueGenericCreateStatic+0x5c>
 800279a:	2300      	movs	r3, #0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10b      	bne.n	80027b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80027a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a4:	f383 8811 	msr	BASEPRI, r3
 80027a8:	f3bf 8f6f 	isb	sy
 80027ac:	f3bf 8f4f 	dsb	sy
 80027b0:	623b      	str	r3, [r7, #32]
}
 80027b2:	bf00      	nop
 80027b4:	bf00      	nop
 80027b6:	e7fd      	b.n	80027b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d102      	bne.n	80027c4 <xQueueGenericCreateStatic+0x84>
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <xQueueGenericCreateStatic+0x88>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <xQueueGenericCreateStatic+0x8a>
 80027c8:	2300      	movs	r3, #0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10b      	bne.n	80027e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80027ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027d2:	f383 8811 	msr	BASEPRI, r3
 80027d6:	f3bf 8f6f 	isb	sy
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	61fb      	str	r3, [r7, #28]
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	e7fd      	b.n	80027e2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80027e6:	2350      	movs	r3, #80	@ 0x50
 80027e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b50      	cmp	r3, #80	@ 0x50
 80027ee:	d00b      	beq.n	8002808 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80027f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027f4:	f383 8811 	msr	BASEPRI, r3
 80027f8:	f3bf 8f6f 	isb	sy
 80027fc:	f3bf 8f4f 	dsb	sy
 8002800:	61bb      	str	r3, [r7, #24]
}
 8002802:	bf00      	nop
 8002804:	bf00      	nop
 8002806:	e7fd      	b.n	8002804 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002808:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800280e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00d      	beq.n	8002830 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800281c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	4613      	mov	r3, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f805 	bl	800283a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002832:	4618      	mov	r0, r3
 8002834:	3730      	adds	r7, #48	@ 0x30
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d103      	bne.n	8002856 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e002      	b.n	800285c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002868:	2101      	movs	r1, #1
 800286a:	69b8      	ldr	r0, [r7, #24]
 800286c:	f7ff fefe 	bl	800266c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08e      	sub	sp, #56	@ 0x38
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800288e:	2300      	movs	r3, #0
 8002890:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10b      	bne.n	80028b4 <xQueueGenericSend+0x34>
	__asm volatile
 800289c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a0:	f383 8811 	msr	BASEPRI, r3
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80028ae:	bf00      	nop
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d103      	bne.n	80028c2 <xQueueGenericSend+0x42>
 80028ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <xQueueGenericSend+0x46>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <xQueueGenericSend+0x48>
 80028c6:	2300      	movs	r3, #0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10b      	bne.n	80028e4 <xQueueGenericSend+0x64>
	__asm volatile
 80028cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80028de:	bf00      	nop
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d103      	bne.n	80028f2 <xQueueGenericSend+0x72>
 80028ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <xQueueGenericSend+0x76>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <xQueueGenericSend+0x78>
 80028f6:	2300      	movs	r3, #0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10b      	bne.n	8002914 <xQueueGenericSend+0x94>
	__asm volatile
 80028fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	623b      	str	r3, [r7, #32]
}
 800290e:	bf00      	nop
 8002910:	bf00      	nop
 8002912:	e7fd      	b.n	8002910 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002914:	f001 faa0 	bl	8003e58 <xTaskGetSchedulerState>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d102      	bne.n	8002924 <xQueueGenericSend+0xa4>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <xQueueGenericSend+0xa8>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <xQueueGenericSend+0xaa>
 8002928:	2300      	movs	r3, #0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10b      	bne.n	8002946 <xQueueGenericSend+0xc6>
	__asm volatile
 800292e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002932:	f383 8811 	msr	BASEPRI, r3
 8002936:	f3bf 8f6f 	isb	sy
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	61fb      	str	r3, [r7, #28]
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	e7fd      	b.n	8002942 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002946:	f001 fff7 	bl	8004938 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800294a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800294c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800294e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002952:	429a      	cmp	r2, r3
 8002954:	d302      	bcc.n	800295c <xQueueGenericSend+0xdc>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b02      	cmp	r3, #2
 800295a:	d129      	bne.n	80029b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002962:	f000 fa0f 	bl	8002d84 <prvCopyDataToQueue>
 8002966:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	2b00      	cmp	r3, #0
 800296e:	d010      	beq.n	8002992 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002972:	3324      	adds	r3, #36	@ 0x24
 8002974:	4618      	mov	r0, r3
 8002976:	f001 f8af 	bl	8003ad8 <xTaskRemoveFromEventList>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d013      	beq.n	80029a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002980:	4b3f      	ldr	r3, [pc, #252]	@ (8002a80 <xQueueGenericSend+0x200>)
 8002982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	e00a      	b.n	80029a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d007      	beq.n	80029a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002998:	4b39      	ldr	r3, [pc, #228]	@ (8002a80 <xQueueGenericSend+0x200>)
 800299a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80029a8:	f001 fff8 	bl	800499c <vPortExitCritical>
				return pdPASS;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e063      	b.n	8002a78 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d103      	bne.n	80029be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029b6:	f001 fff1 	bl	800499c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	e05c      	b.n	8002a78 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d106      	bne.n	80029d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	4618      	mov	r0, r3
 80029ca:	f001 f8e9 	bl	8003ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029ce:	2301      	movs	r3, #1
 80029d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029d2:	f001 ffe3 	bl	800499c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029d6:	f000 fe59 	bl	800368c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029da:	f001 ffad 	bl	8004938 <vPortEnterCritical>
 80029de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029e4:	b25b      	sxtb	r3, r3
 80029e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ea:	d103      	bne.n	80029f4 <xQueueGenericSend+0x174>
 80029ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029fa:	b25b      	sxtb	r3, r3
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d103      	bne.n	8002a0a <xQueueGenericSend+0x18a>
 8002a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a0a:	f001 ffc7 	bl	800499c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a0e:	1d3a      	adds	r2, r7, #4
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f001 f8d8 	bl	8003bcc <xTaskCheckForTimeOut>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d124      	bne.n	8002a6c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a24:	f000 faa6 	bl	8002f74 <prvIsQueueFull>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d018      	beq.n	8002a60 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a30:	3310      	adds	r3, #16
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	4611      	mov	r1, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 fffc 	bl	8003a34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a3e:	f000 fa31 	bl	8002ea4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a42:	f000 fe31 	bl	80036a8 <xTaskResumeAll>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f47f af7c 	bne.w	8002946 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a80 <xQueueGenericSend+0x200>)
 8002a50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	f3bf 8f6f 	isb	sy
 8002a5e:	e772      	b.n	8002946 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a62:	f000 fa1f 	bl	8002ea4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a66:	f000 fe1f 	bl	80036a8 <xTaskResumeAll>
 8002a6a:	e76c      	b.n	8002946 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002a6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a6e:	f000 fa19 	bl	8002ea4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a72:	f000 fe19 	bl	80036a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002a76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3738      	adds	r7, #56	@ 0x38
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	e000ed04 	.word	0xe000ed04

08002a84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b090      	sub	sp, #64	@ 0x40
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10b      	bne.n	8002ab4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa0:	f383 8811 	msr	BASEPRI, r3
 8002aa4:	f3bf 8f6f 	isb	sy
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002aae:	bf00      	nop
 8002ab0:	bf00      	nop
 8002ab2:	e7fd      	b.n	8002ab0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d103      	bne.n	8002ac2 <xQueueGenericSendFromISR+0x3e>
 8002aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <xQueueGenericSendFromISR+0x42>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <xQueueGenericSendFromISR+0x44>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10b      	bne.n	8002ae4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad0:	f383 8811 	msr	BASEPRI, r3
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ade:	bf00      	nop
 8002ae0:	bf00      	nop
 8002ae2:	e7fd      	b.n	8002ae0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d103      	bne.n	8002af2 <xQueueGenericSendFromISR+0x6e>
 8002aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <xQueueGenericSendFromISR+0x72>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <xQueueGenericSendFromISR+0x74>
 8002af6:	2300      	movs	r3, #0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10b      	bne.n	8002b14 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b00:	f383 8811 	msr	BASEPRI, r3
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	623b      	str	r3, [r7, #32]
}
 8002b0e:	bf00      	nop
 8002b10:	bf00      	nop
 8002b12:	e7fd      	b.n	8002b10 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b14:	f001 fff0 	bl	8004af8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b18:	f3ef 8211 	mrs	r2, BASEPRI
 8002b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	61fa      	str	r2, [r7, #28]
 8002b2e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b30:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b32:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d302      	bcc.n	8002b46 <xQueueGenericSendFromISR+0xc2>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d12f      	bne.n	8002ba6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002b5c:	f000 f912 	bl	8002d84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002b60:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b68:	d112      	bne.n	8002b90 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d016      	beq.n	8002ba0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b74:	3324      	adds	r3, #36	@ 0x24
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 ffae 	bl	8003ad8 <xTaskRemoveFromEventList>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00e      	beq.n	8002ba0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00b      	beq.n	8002ba0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	e007      	b.n	8002ba0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b94:	3301      	adds	r3, #1
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	b25a      	sxtb	r2, r3
 8002b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002ba4:	e001      	b.n	8002baa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002bb4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3740      	adds	r7, #64	@ 0x40
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08c      	sub	sp, #48	@ 0x30
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10b      	bne.n	8002bf2 <xQueueReceive+0x32>
	__asm volatile
 8002bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bde:	f383 8811 	msr	BASEPRI, r3
 8002be2:	f3bf 8f6f 	isb	sy
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	623b      	str	r3, [r7, #32]
}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	e7fd      	b.n	8002bee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d103      	bne.n	8002c00 <xQueueReceive+0x40>
 8002bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <xQueueReceive+0x44>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <xQueueReceive+0x46>
 8002c04:	2300      	movs	r3, #0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10b      	bne.n	8002c22 <xQueueReceive+0x62>
	__asm volatile
 8002c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c0e:	f383 8811 	msr	BASEPRI, r3
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	61fb      	str	r3, [r7, #28]
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	e7fd      	b.n	8002c1e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c22:	f001 f919 	bl	8003e58 <xTaskGetSchedulerState>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d102      	bne.n	8002c32 <xQueueReceive+0x72>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <xQueueReceive+0x76>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <xQueueReceive+0x78>
 8002c36:	2300      	movs	r3, #0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10b      	bne.n	8002c54 <xQueueReceive+0x94>
	__asm volatile
 8002c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c40:	f383 8811 	msr	BASEPRI, r3
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	61bb      	str	r3, [r7, #24]
}
 8002c4e:	bf00      	nop
 8002c50:	bf00      	nop
 8002c52:	e7fd      	b.n	8002c50 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c54:	f001 fe70 	bl	8004938 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01f      	beq.n	8002ca4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c68:	f000 f8f6 	bl	8002e58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6e:	1e5a      	subs	r2, r3, #1
 8002c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c72:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00f      	beq.n	8002c9c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7e:	3310      	adds	r3, #16
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 ff29 	bl	8003ad8 <xTaskRemoveFromEventList>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d80 <xQueueReceive+0x1c0>)
 8002c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002c9c:	f001 fe7e 	bl	800499c <vPortExitCritical>
				return pdPASS;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e069      	b.n	8002d78 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d103      	bne.n	8002cb2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002caa:	f001 fe77 	bl	800499c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e062      	b.n	8002d78 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d106      	bne.n	8002cc6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002cb8:	f107 0310 	add.w	r3, r7, #16
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 ff6f 	bl	8003ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002cc6:	f001 fe69 	bl	800499c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002cca:	f000 fcdf 	bl	800368c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002cce:	f001 fe33 	bl	8004938 <vPortEnterCritical>
 8002cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002cd8:	b25b      	sxtb	r3, r3
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cde:	d103      	bne.n	8002ce8 <xQueueReceive+0x128>
 8002ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cee:	b25b      	sxtb	r3, r3
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d103      	bne.n	8002cfe <xQueueReceive+0x13e>
 8002cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cfe:	f001 fe4d 	bl	800499c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d02:	1d3a      	adds	r2, r7, #4
 8002d04:	f107 0310 	add.w	r3, r7, #16
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 ff5e 	bl	8003bcc <xTaskCheckForTimeOut>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d123      	bne.n	8002d5e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d18:	f000 f916 	bl	8002f48 <prvIsQueueEmpty>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d017      	beq.n	8002d52 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d24:	3324      	adds	r3, #36	@ 0x24
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fe82 	bl	8003a34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d32:	f000 f8b7 	bl	8002ea4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d36:	f000 fcb7 	bl	80036a8 <xTaskResumeAll>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d189      	bne.n	8002c54 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002d40:	4b0f      	ldr	r3, [pc, #60]	@ (8002d80 <xQueueReceive+0x1c0>)
 8002d42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	e780      	b.n	8002c54 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d54:	f000 f8a6 	bl	8002ea4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d58:	f000 fca6 	bl	80036a8 <xTaskResumeAll>
 8002d5c:	e77a      	b.n	8002c54 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002d5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d60:	f000 f8a0 	bl	8002ea4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d64:	f000 fca0 	bl	80036a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d6a:	f000 f8ed 	bl	8002f48 <prvIsQueueEmpty>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f43f af6f 	beq.w	8002c54 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002d76:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3730      	adds	r7, #48	@ 0x30
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	e000ed04 	.word	0xe000ed04

08002d84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10d      	bne.n	8002dbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d14d      	bne.n	8002e46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f001 f870 	bl	8003e94 <xTaskPriorityDisinherit>
 8002db4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	e043      	b.n	8002e46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d119      	bne.n	8002df8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6858      	ldr	r0, [r3, #4]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dcc:	461a      	mov	r2, r3
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	f002 f8ee 	bl	8004fb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ddc:	441a      	add	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d32b      	bcc.n	8002e46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	e026      	b.n	8002e46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	68d8      	ldr	r0, [r3, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e00:	461a      	mov	r2, r3
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	f002 f8d4 	bl	8004fb0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	425b      	negs	r3, r3
 8002e12:	441a      	add	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d207      	bcs.n	8002e34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2c:	425b      	negs	r3, r3
 8002e2e:	441a      	add	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d105      	bne.n	8002e46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002e4e:	697b      	ldr	r3, [r7, #20]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d018      	beq.n	8002e9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	441a      	add	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d303      	bcc.n	8002e8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68d9      	ldr	r1, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e94:	461a      	mov	r2, r3
 8002e96:	6838      	ldr	r0, [r7, #0]
 8002e98:	f002 f88a 	bl	8004fb0 <memcpy>
	}
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002eac:	f001 fd44 	bl	8004938 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002eb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002eb8:	e011      	b.n	8002ede <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d012      	beq.n	8002ee8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3324      	adds	r3, #36	@ 0x24
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fe06 	bl	8003ad8 <xTaskRemoveFromEventList>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002ed2:	f000 fedf 	bl	8003c94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	dce9      	bgt.n	8002eba <prvUnlockQueue+0x16>
 8002ee6:	e000      	b.n	8002eea <prvUnlockQueue+0x46>
					break;
 8002ee8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	22ff      	movs	r2, #255	@ 0xff
 8002eee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002ef2:	f001 fd53 	bl	800499c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002ef6:	f001 fd1f 	bl	8004938 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f02:	e011      	b.n	8002f28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d012      	beq.n	8002f32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3310      	adds	r3, #16
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 fde1 	bl	8003ad8 <xTaskRemoveFromEventList>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f1c:	f000 feba 	bl	8003c94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f20:	7bbb      	ldrb	r3, [r7, #14]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	dce9      	bgt.n	8002f04 <prvUnlockQueue+0x60>
 8002f30:	e000      	b.n	8002f34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	22ff      	movs	r2, #255	@ 0xff
 8002f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002f3c:	f001 fd2e 	bl	800499c <vPortExitCritical>
}
 8002f40:	bf00      	nop
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f50:	f001 fcf2 	bl	8004938 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	e001      	b.n	8002f66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f66:	f001 fd19 	bl	800499c <vPortExitCritical>

	return xReturn;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f7c:	f001 fcdc 	bl	8004938 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d102      	bne.n	8002f92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e001      	b.n	8002f96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f96:	f001 fd01 	bl	800499c <vPortExitCritical>

	return xReturn;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	e014      	b.n	8002fde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002fb4:	4a0f      	ldr	r2, [pc, #60]	@ (8002ff4 <vQueueAddToRegistry+0x50>)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10b      	bne.n	8002fd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002fc0:	490c      	ldr	r1, [pc, #48]	@ (8002ff4 <vQueueAddToRegistry+0x50>)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002fca:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff4 <vQueueAddToRegistry+0x50>)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002fd6:	e006      	b.n	8002fe6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b07      	cmp	r3, #7
 8002fe2:	d9e7      	bls.n	8002fb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	2000079c 	.word	0x2000079c

08002ff8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003008:	f001 fc96 	bl	8004938 <vPortEnterCritical>
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003012:	b25b      	sxtb	r3, r3
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d103      	bne.n	8003022 <vQueueWaitForMessageRestricted+0x2a>
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003028:	b25b      	sxtb	r3, r3
 800302a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302e:	d103      	bne.n	8003038 <vQueueWaitForMessageRestricted+0x40>
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003038:	f001 fcb0 	bl	800499c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003040:	2b00      	cmp	r3, #0
 8003042:	d106      	bne.n	8003052 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	3324      	adds	r3, #36	@ 0x24
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fd17 	bl	8003a80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003052:	6978      	ldr	r0, [r7, #20]
 8003054:	f7ff ff26 	bl	8002ea4 <prvUnlockQueue>
	}
 8003058:	bf00      	nop
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08e      	sub	sp, #56	@ 0x38
 8003064:	af04      	add	r7, sp, #16
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800306e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10b      	bne.n	800308c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	623b      	str	r3, [r7, #32]
}
 8003086:	bf00      	nop
 8003088:	bf00      	nop
 800308a:	e7fd      	b.n	8003088 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800308c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10b      	bne.n	80030aa <xTaskCreateStatic+0x4a>
	__asm volatile
 8003092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	61fb      	str	r3, [r7, #28]
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	e7fd      	b.n	80030a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80030aa:	235c      	movs	r3, #92	@ 0x5c
 80030ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	2b5c      	cmp	r3, #92	@ 0x5c
 80030b2:	d00b      	beq.n	80030cc <xTaskCreateStatic+0x6c>
	__asm volatile
 80030b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	61bb      	str	r3, [r7, #24]
}
 80030c6:	bf00      	nop
 80030c8:	bf00      	nop
 80030ca:	e7fd      	b.n	80030c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80030cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80030ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01e      	beq.n	8003112 <xTaskCreateStatic+0xb2>
 80030d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d01b      	beq.n	8003112 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80030e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80030ec:	2300      	movs	r3, #0
 80030ee:	9303      	str	r3, [sp, #12]
 80030f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f2:	9302      	str	r3, [sp, #8]
 80030f4:	f107 0314 	add.w	r3, r7, #20
 80030f8:	9301      	str	r3, [sp, #4]
 80030fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f850 	bl	80031aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800310a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800310c:	f000 f8de 	bl	80032cc <prvAddNewTaskToReadyList>
 8003110:	e001      	b.n	8003116 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003116:	697b      	ldr	r3, [r7, #20]
	}
 8003118:	4618      	mov	r0, r3
 800311a:	3728      	adds	r7, #40	@ 0x28
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08c      	sub	sp, #48	@ 0x30
 8003124:	af04      	add	r7, sp, #16
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	4613      	mov	r3, r2
 800312e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4618      	mov	r0, r3
 8003136:	f001 fd21 	bl	8004b7c <pvPortMalloc>
 800313a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00e      	beq.n	8003160 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003142:	205c      	movs	r0, #92	@ 0x5c
 8003144:	f001 fd1a 	bl	8004b7c <pvPortMalloc>
 8003148:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	631a      	str	r2, [r3, #48]	@ 0x30
 8003156:	e005      	b.n	8003164 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003158:	6978      	ldr	r0, [r7, #20]
 800315a:	f001 fddd 	bl	8004d18 <vPortFree>
 800315e:	e001      	b.n	8003164 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003160:	2300      	movs	r3, #0
 8003162:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d017      	beq.n	800319a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003172:	88fa      	ldrh	r2, [r7, #6]
 8003174:	2300      	movs	r3, #0
 8003176:	9303      	str	r3, [sp, #12]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	9302      	str	r3, [sp, #8]
 800317c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f80e 	bl	80031aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800318e:	69f8      	ldr	r0, [r7, #28]
 8003190:	f000 f89c 	bl	80032cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003194:	2301      	movs	r3, #1
 8003196:	61bb      	str	r3, [r7, #24]
 8003198:	e002      	b.n	80031a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800319a:	f04f 33ff 	mov.w	r3, #4294967295
 800319e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031a0:	69bb      	ldr	r3, [r7, #24]
	}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3720      	adds	r7, #32
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b088      	sub	sp, #32
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	607a      	str	r2, [r7, #4]
 80031b6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	461a      	mov	r2, r3
 80031c2:	21a5      	movs	r1, #165	@ 0xa5
 80031c4:	f001 fec8 	bl	8004f58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80031c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031d2:	3b01      	subs	r3, #1
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	f023 0307 	bic.w	r3, r3, #7
 80031e0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00b      	beq.n	8003204 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80031ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	617b      	str	r3, [r7, #20]
}
 80031fe:	bf00      	nop
 8003200:	bf00      	nop
 8003202:	e7fd      	b.n	8003200 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01f      	beq.n	800324a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	e012      	b.n	8003236 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	4413      	add	r3, r2
 8003216:	7819      	ldrb	r1, [r3, #0]
 8003218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	4413      	add	r3, r2
 800321e:	3334      	adds	r3, #52	@ 0x34
 8003220:	460a      	mov	r2, r1
 8003222:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	4413      	add	r3, r2
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d006      	beq.n	800323e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	3301      	adds	r3, #1
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	2b0f      	cmp	r3, #15
 800323a:	d9e9      	bls.n	8003210 <prvInitialiseNewTask+0x66>
 800323c:	e000      	b.n	8003240 <prvInitialiseNewTask+0x96>
			{
				break;
 800323e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003248:	e003      	b.n	8003252 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800324a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003254:	2b37      	cmp	r3, #55	@ 0x37
 8003256:	d901      	bls.n	800325c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003258:	2337      	movs	r3, #55	@ 0x37
 800325a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800325c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003260:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003264:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003266:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326a:	2200      	movs	r2, #0
 800326c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800326e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003270:	3304      	adds	r3, #4
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff f966 	bl	8002544 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327a:	3318      	adds	r3, #24
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff f961 	bl	8002544 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003286:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800328e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003290:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003294:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003296:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329a:	2200      	movs	r2, #0
 800329c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800329e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	68f9      	ldr	r1, [r7, #12]
 80032aa:	69b8      	ldr	r0, [r7, #24]
 80032ac:	f001 fa10 	bl	80046d0 <pxPortInitialiseStack>
 80032b0:	4602      	mov	r2, r0
 80032b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80032b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032c2:	bf00      	nop
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80032d4:	f001 fb30 	bl	8004938 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80032d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003390 <prvAddNewTaskToReadyList+0xc4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3301      	adds	r3, #1
 80032de:	4a2c      	ldr	r2, [pc, #176]	@ (8003390 <prvAddNewTaskToReadyList+0xc4>)
 80032e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80032e2:	4b2c      	ldr	r3, [pc, #176]	@ (8003394 <prvAddNewTaskToReadyList+0xc8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80032ea:	4a2a      	ldr	r2, [pc, #168]	@ (8003394 <prvAddNewTaskToReadyList+0xc8>)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032f0:	4b27      	ldr	r3, [pc, #156]	@ (8003390 <prvAddNewTaskToReadyList+0xc4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d110      	bne.n	800331a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80032f8:	f000 fcf0 	bl	8003cdc <prvInitialiseTaskLists>
 80032fc:	e00d      	b.n	800331a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80032fe:	4b26      	ldr	r3, [pc, #152]	@ (8003398 <prvAddNewTaskToReadyList+0xcc>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d109      	bne.n	800331a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003306:	4b23      	ldr	r3, [pc, #140]	@ (8003394 <prvAddNewTaskToReadyList+0xc8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003310:	429a      	cmp	r2, r3
 8003312:	d802      	bhi.n	800331a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003314:	4a1f      	ldr	r2, [pc, #124]	@ (8003394 <prvAddNewTaskToReadyList+0xc8>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800331a:	4b20      	ldr	r3, [pc, #128]	@ (800339c <prvAddNewTaskToReadyList+0xd0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	3301      	adds	r3, #1
 8003320:	4a1e      	ldr	r2, [pc, #120]	@ (800339c <prvAddNewTaskToReadyList+0xd0>)
 8003322:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003324:	4b1d      	ldr	r3, [pc, #116]	@ (800339c <prvAddNewTaskToReadyList+0xd0>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003330:	4b1b      	ldr	r3, [pc, #108]	@ (80033a0 <prvAddNewTaskToReadyList+0xd4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d903      	bls.n	8003340 <prvAddNewTaskToReadyList+0x74>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333c:	4a18      	ldr	r2, [pc, #96]	@ (80033a0 <prvAddNewTaskToReadyList+0xd4>)
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4a15      	ldr	r2, [pc, #84]	@ (80033a4 <prvAddNewTaskToReadyList+0xd8>)
 800334e:	441a      	add	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3304      	adds	r3, #4
 8003354:	4619      	mov	r1, r3
 8003356:	4610      	mov	r0, r2
 8003358:	f7ff f901 	bl	800255e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800335c:	f001 fb1e 	bl	800499c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003360:	4b0d      	ldr	r3, [pc, #52]	@ (8003398 <prvAddNewTaskToReadyList+0xcc>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00e      	beq.n	8003386 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003368:	4b0a      	ldr	r3, [pc, #40]	@ (8003394 <prvAddNewTaskToReadyList+0xc8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003372:	429a      	cmp	r2, r3
 8003374:	d207      	bcs.n	8003386 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003376:	4b0c      	ldr	r3, [pc, #48]	@ (80033a8 <prvAddNewTaskToReadyList+0xdc>)
 8003378:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000cb0 	.word	0x20000cb0
 8003394:	200007dc 	.word	0x200007dc
 8003398:	20000cbc 	.word	0x20000cbc
 800339c:	20000ccc 	.word	0x20000ccc
 80033a0:	20000cb8 	.word	0x20000cb8
 80033a4:	200007e0 	.word	0x200007e0
 80033a8:	e000ed04 	.word	0xe000ed04

080033ac <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80033b4:	f001 fac0 	bl	8004938 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d102      	bne.n	80033c4 <vTaskSuspend+0x18>
 80033be:	4b30      	ldr	r3, [pc, #192]	@ (8003480 <vTaskSuspend+0xd4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	e000      	b.n	80033c6 <vTaskSuspend+0x1a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3304      	adds	r3, #4
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff f923 	bl	8002618 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d004      	beq.n	80033e4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	3318      	adds	r3, #24
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff f91a 	bl	8002618 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	3304      	adds	r3, #4
 80033e8:	4619      	mov	r1, r3
 80033ea:	4826      	ldr	r0, [pc, #152]	@ (8003484 <vTaskSuspend+0xd8>)
 80033ec:	f7ff f8b7 	bl	800255e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d103      	bne.n	8003404 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003404:	f001 faca 	bl	800499c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003408:	4b1f      	ldr	r3, [pc, #124]	@ (8003488 <vTaskSuspend+0xdc>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003410:	f001 fa92 	bl	8004938 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003414:	f000 fd00 	bl	8003e18 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003418:	f001 fac0 	bl	800499c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800341c:	4b18      	ldr	r3, [pc, #96]	@ (8003480 <vTaskSuspend+0xd4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	429a      	cmp	r2, r3
 8003424:	d128      	bne.n	8003478 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 8003426:	4b18      	ldr	r3, [pc, #96]	@ (8003488 <vTaskSuspend+0xdc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d018      	beq.n	8003460 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800342e:	4b17      	ldr	r3, [pc, #92]	@ (800348c <vTaskSuspend+0xe0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00b      	beq.n	800344e <vTaskSuspend+0xa2>
	__asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	60bb      	str	r3, [r7, #8]
}
 8003448:	bf00      	nop
 800344a:	bf00      	nop
 800344c:	e7fd      	b.n	800344a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800344e:	4b10      	ldr	r3, [pc, #64]	@ (8003490 <vTaskSuspend+0xe4>)
 8003450:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800345e:	e00b      	b.n	8003478 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003460:	4b08      	ldr	r3, [pc, #32]	@ (8003484 <vTaskSuspend+0xd8>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <vTaskSuspend+0xe8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d103      	bne.n	8003474 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800346c:	4b04      	ldr	r3, [pc, #16]	@ (8003480 <vTaskSuspend+0xd4>)
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
	}
 8003472:	e001      	b.n	8003478 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 8003474:	f000 fa80 	bl	8003978 <vTaskSwitchContext>
	}
 8003478:	bf00      	nop
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	200007dc 	.word	0x200007dc
 8003484:	20000c9c 	.word	0x20000c9c
 8003488:	20000cbc 	.word	0x20000cbc
 800348c:	20000cd8 	.word	0x20000cd8
 8003490:	e000ed04 	.word	0xe000ed04
 8003494:	20000cb0 	.word	0x20000cb0

08003498 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10b      	bne.n	80034c6 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 80034ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	60fb      	str	r3, [r7, #12]
}
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop
 80034c4:	e7fd      	b.n	80034c2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	4a0a      	ldr	r2, [pc, #40]	@ (80034f4 <prvTaskIsTaskSuspended+0x5c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d10a      	bne.n	80034e6 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d4:	4a08      	ldr	r2, [pc, #32]	@ (80034f8 <prvTaskIsTaskSuspended+0x60>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d005      	beq.n	80034e6 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 80034e2:	2301      	movs	r3, #1
 80034e4:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80034e6:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80034e8:	4618      	mov	r0, r3
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	20000c9c 	.word	0x20000c9c
 80034f8:	20000c70 	.word	0x20000c70

080034fc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10b      	bne.n	8003526 <vTaskResume+0x2a>
	__asm volatile
 800350e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	60bb      	str	r3, [r7, #8]
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	e7fd      	b.n	8003522 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003526:	4b21      	ldr	r3, [pc, #132]	@ (80035ac <vTaskResume+0xb0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	429a      	cmp	r2, r3
 800352e:	d038      	beq.n	80035a2 <vTaskResume+0xa6>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d035      	beq.n	80035a2 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8003536:	f001 f9ff 	bl	8004938 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f7ff ffac 	bl	8003498 <prvTaskIsTaskSuspended>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d02b      	beq.n	800359e <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3304      	adds	r3, #4
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff f864 	bl	8002618 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003554:	4b16      	ldr	r3, [pc, #88]	@ (80035b0 <vTaskResume+0xb4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d903      	bls.n	8003564 <vTaskResume+0x68>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003560:	4a13      	ldr	r2, [pc, #76]	@ (80035b0 <vTaskResume+0xb4>)
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4a10      	ldr	r2, [pc, #64]	@ (80035b4 <vTaskResume+0xb8>)
 8003572:	441a      	add	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	3304      	adds	r3, #4
 8003578:	4619      	mov	r1, r3
 800357a:	4610      	mov	r0, r2
 800357c:	f7fe ffef 	bl	800255e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003584:	4b09      	ldr	r3, [pc, #36]	@ (80035ac <vTaskResume+0xb0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358a:	429a      	cmp	r2, r3
 800358c:	d307      	bcc.n	800359e <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800358e:	4b0a      	ldr	r3, [pc, #40]	@ (80035b8 <vTaskResume+0xbc>)
 8003590:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800359e:	f001 f9fd 	bl	800499c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	200007dc 	.word	0x200007dc
 80035b0:	20000cb8 	.word	0x20000cb8
 80035b4:	200007e0 	.word	0x200007e0
 80035b8:	e000ed04 	.word	0xe000ed04

080035bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	@ 0x28
 80035c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035ca:	463a      	mov	r2, r7
 80035cc:	1d39      	adds	r1, r7, #4
 80035ce:	f107 0308 	add.w	r3, r7, #8
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe ff62 	bl	800249c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80035d8:	6839      	ldr	r1, [r7, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	9202      	str	r2, [sp, #8]
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	2300      	movs	r3, #0
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	2300      	movs	r3, #0
 80035e8:	460a      	mov	r2, r1
 80035ea:	4922      	ldr	r1, [pc, #136]	@ (8003674 <vTaskStartScheduler+0xb8>)
 80035ec:	4822      	ldr	r0, [pc, #136]	@ (8003678 <vTaskStartScheduler+0xbc>)
 80035ee:	f7ff fd37 	bl	8003060 <xTaskCreateStatic>
 80035f2:	4603      	mov	r3, r0
 80035f4:	4a21      	ldr	r2, [pc, #132]	@ (800367c <vTaskStartScheduler+0xc0>)
 80035f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035f8:	4b20      	ldr	r3, [pc, #128]	@ (800367c <vTaskStartScheduler+0xc0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003600:	2301      	movs	r3, #1
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	e001      	b.n	800360a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d102      	bne.n	8003616 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003610:	f000 fd04 	bl	800401c <xTimerCreateTimerTask>
 8003614:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d116      	bne.n	800364a <vTaskStartScheduler+0x8e>
	__asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	613b      	str	r3, [r7, #16]
}
 800362e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003630:	4b13      	ldr	r3, [pc, #76]	@ (8003680 <vTaskStartScheduler+0xc4>)
 8003632:	f04f 32ff 	mov.w	r2, #4294967295
 8003636:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003638:	4b12      	ldr	r3, [pc, #72]	@ (8003684 <vTaskStartScheduler+0xc8>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800363e:	4b12      	ldr	r3, [pc, #72]	@ (8003688 <vTaskStartScheduler+0xcc>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003644:	f001 f8d4 	bl	80047f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003648:	e00f      	b.n	800366a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d10b      	bne.n	800366a <vTaskStartScheduler+0xae>
	__asm volatile
 8003652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003656:	f383 8811 	msr	BASEPRI, r3
 800365a:	f3bf 8f6f 	isb	sy
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	60fb      	str	r3, [r7, #12]
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop
 8003668:	e7fd      	b.n	8003666 <vTaskStartScheduler+0xaa>
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	08005024 	.word	0x08005024
 8003678:	08003cad 	.word	0x08003cad
 800367c:	20000cd4 	.word	0x20000cd4
 8003680:	20000cd0 	.word	0x20000cd0
 8003684:	20000cbc 	.word	0x20000cbc
 8003688:	20000cb4 	.word	0x20000cb4

0800368c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003690:	4b04      	ldr	r3, [pc, #16]	@ (80036a4 <vTaskSuspendAll+0x18>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	4a03      	ldr	r2, [pc, #12]	@ (80036a4 <vTaskSuspendAll+0x18>)
 8003698:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800369a:	bf00      	nop
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	20000cd8 	.word	0x20000cd8

080036a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036b6:	4b42      	ldr	r3, [pc, #264]	@ (80037c0 <xTaskResumeAll+0x118>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10b      	bne.n	80036d6 <xTaskResumeAll+0x2e>
	__asm volatile
 80036be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	603b      	str	r3, [r7, #0]
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	e7fd      	b.n	80036d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80036d6:	f001 f92f 	bl	8004938 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80036da:	4b39      	ldr	r3, [pc, #228]	@ (80037c0 <xTaskResumeAll+0x118>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3b01      	subs	r3, #1
 80036e0:	4a37      	ldr	r2, [pc, #220]	@ (80037c0 <xTaskResumeAll+0x118>)
 80036e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036e4:	4b36      	ldr	r3, [pc, #216]	@ (80037c0 <xTaskResumeAll+0x118>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d162      	bne.n	80037b2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036ec:	4b35      	ldr	r3, [pc, #212]	@ (80037c4 <xTaskResumeAll+0x11c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d05e      	beq.n	80037b2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036f4:	e02f      	b.n	8003756 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036f6:	4b34      	ldr	r3, [pc, #208]	@ (80037c8 <xTaskResumeAll+0x120>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	3318      	adds	r3, #24
 8003702:	4618      	mov	r0, r3
 8003704:	f7fe ff88 	bl	8002618 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	3304      	adds	r3, #4
 800370c:	4618      	mov	r0, r3
 800370e:	f7fe ff83 	bl	8002618 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003716:	4b2d      	ldr	r3, [pc, #180]	@ (80037cc <xTaskResumeAll+0x124>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d903      	bls.n	8003726 <xTaskResumeAll+0x7e>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003722:	4a2a      	ldr	r2, [pc, #168]	@ (80037cc <xTaskResumeAll+0x124>)
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4a27      	ldr	r2, [pc, #156]	@ (80037d0 <xTaskResumeAll+0x128>)
 8003734:	441a      	add	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	3304      	adds	r3, #4
 800373a:	4619      	mov	r1, r3
 800373c:	4610      	mov	r0, r2
 800373e:	f7fe ff0e 	bl	800255e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003746:	4b23      	ldr	r3, [pc, #140]	@ (80037d4 <xTaskResumeAll+0x12c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374c:	429a      	cmp	r2, r3
 800374e:	d302      	bcc.n	8003756 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003750:	4b21      	ldr	r3, [pc, #132]	@ (80037d8 <xTaskResumeAll+0x130>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003756:	4b1c      	ldr	r3, [pc, #112]	@ (80037c8 <xTaskResumeAll+0x120>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1cb      	bne.n	80036f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003764:	f000 fb58 	bl	8003e18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003768:	4b1c      	ldr	r3, [pc, #112]	@ (80037dc <xTaskResumeAll+0x134>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d010      	beq.n	8003796 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003774:	f000 f846 	bl	8003804 <xTaskIncrementTick>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800377e:	4b16      	ldr	r3, [pc, #88]	@ (80037d8 <xTaskResumeAll+0x130>)
 8003780:	2201      	movs	r2, #1
 8003782:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3b01      	subs	r3, #1
 8003788:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1f1      	bne.n	8003774 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003790:	4b12      	ldr	r3, [pc, #72]	@ (80037dc <xTaskResumeAll+0x134>)
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003796:	4b10      	ldr	r3, [pc, #64]	@ (80037d8 <xTaskResumeAll+0x130>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d009      	beq.n	80037b2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800379e:	2301      	movs	r3, #1
 80037a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037a2:	4b0f      	ldr	r3, [pc, #60]	@ (80037e0 <xTaskResumeAll+0x138>)
 80037a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037b2:	f001 f8f3 	bl	800499c <vPortExitCritical>

	return xAlreadyYielded;
 80037b6:	68bb      	ldr	r3, [r7, #8]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000cd8 	.word	0x20000cd8
 80037c4:	20000cb0 	.word	0x20000cb0
 80037c8:	20000c70 	.word	0x20000c70
 80037cc:	20000cb8 	.word	0x20000cb8
 80037d0:	200007e0 	.word	0x200007e0
 80037d4:	200007dc 	.word	0x200007dc
 80037d8:	20000cc4 	.word	0x20000cc4
 80037dc:	20000cc0 	.word	0x20000cc0
 80037e0:	e000ed04 	.word	0xe000ed04

080037e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80037ea:	4b05      	ldr	r3, [pc, #20]	@ (8003800 <xTaskGetTickCount+0x1c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80037f0:	687b      	ldr	r3, [r7, #4]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20000cb4 	.word	0x20000cb4

08003804 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800380e:	4b4f      	ldr	r3, [pc, #316]	@ (800394c <xTaskIncrementTick+0x148>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	f040 8090 	bne.w	8003938 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003818:	4b4d      	ldr	r3, [pc, #308]	@ (8003950 <xTaskIncrementTick+0x14c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3301      	adds	r3, #1
 800381e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003820:	4a4b      	ldr	r2, [pc, #300]	@ (8003950 <xTaskIncrementTick+0x14c>)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d121      	bne.n	8003870 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800382c:	4b49      	ldr	r3, [pc, #292]	@ (8003954 <xTaskIncrementTick+0x150>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00b      	beq.n	800384e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	603b      	str	r3, [r7, #0]
}
 8003848:	bf00      	nop
 800384a:	bf00      	nop
 800384c:	e7fd      	b.n	800384a <xTaskIncrementTick+0x46>
 800384e:	4b41      	ldr	r3, [pc, #260]	@ (8003954 <xTaskIncrementTick+0x150>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	4b40      	ldr	r3, [pc, #256]	@ (8003958 <xTaskIncrementTick+0x154>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a3e      	ldr	r2, [pc, #248]	@ (8003954 <xTaskIncrementTick+0x150>)
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	4a3e      	ldr	r2, [pc, #248]	@ (8003958 <xTaskIncrementTick+0x154>)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	4b3e      	ldr	r3, [pc, #248]	@ (800395c <xTaskIncrementTick+0x158>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3301      	adds	r3, #1
 8003868:	4a3c      	ldr	r2, [pc, #240]	@ (800395c <xTaskIncrementTick+0x158>)
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	f000 fad4 	bl	8003e18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003870:	4b3b      	ldr	r3, [pc, #236]	@ (8003960 <xTaskIncrementTick+0x15c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	429a      	cmp	r2, r3
 8003878:	d349      	bcc.n	800390e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800387a:	4b36      	ldr	r3, [pc, #216]	@ (8003954 <xTaskIncrementTick+0x150>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d104      	bne.n	800388e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003884:	4b36      	ldr	r3, [pc, #216]	@ (8003960 <xTaskIncrementTick+0x15c>)
 8003886:	f04f 32ff 	mov.w	r2, #4294967295
 800388a:	601a      	str	r2, [r3, #0]
					break;
 800388c:	e03f      	b.n	800390e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800388e:	4b31      	ldr	r3, [pc, #196]	@ (8003954 <xTaskIncrementTick+0x150>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d203      	bcs.n	80038ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003960 <xTaskIncrementTick+0x15c>)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80038ac:	e02f      	b.n	800390e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	3304      	adds	r3, #4
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe feb0 	bl	8002618 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d004      	beq.n	80038ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	3318      	adds	r3, #24
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fe fea7 	bl	8002618 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ce:	4b25      	ldr	r3, [pc, #148]	@ (8003964 <xTaskIncrementTick+0x160>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d903      	bls.n	80038de <xTaskIncrementTick+0xda>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038da:	4a22      	ldr	r2, [pc, #136]	@ (8003964 <xTaskIncrementTick+0x160>)
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003968 <xTaskIncrementTick+0x164>)
 80038ec:	441a      	add	r2, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	3304      	adds	r3, #4
 80038f2:	4619      	mov	r1, r3
 80038f4:	4610      	mov	r0, r2
 80038f6:	f7fe fe32 	bl	800255e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038fe:	4b1b      	ldr	r3, [pc, #108]	@ (800396c <xTaskIncrementTick+0x168>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003904:	429a      	cmp	r2, r3
 8003906:	d3b8      	bcc.n	800387a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003908:	2301      	movs	r3, #1
 800390a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800390c:	e7b5      	b.n	800387a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800390e:	4b17      	ldr	r3, [pc, #92]	@ (800396c <xTaskIncrementTick+0x168>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003914:	4914      	ldr	r1, [pc, #80]	@ (8003968 <xTaskIncrementTick+0x164>)
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d901      	bls.n	800392a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003926:	2301      	movs	r3, #1
 8003928:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800392a:	4b11      	ldr	r3, [pc, #68]	@ (8003970 <xTaskIncrementTick+0x16c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d007      	beq.n	8003942 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003932:	2301      	movs	r3, #1
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	e004      	b.n	8003942 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003938:	4b0e      	ldr	r3, [pc, #56]	@ (8003974 <xTaskIncrementTick+0x170>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3301      	adds	r3, #1
 800393e:	4a0d      	ldr	r2, [pc, #52]	@ (8003974 <xTaskIncrementTick+0x170>)
 8003940:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003942:	697b      	ldr	r3, [r7, #20]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20000cd8 	.word	0x20000cd8
 8003950:	20000cb4 	.word	0x20000cb4
 8003954:	20000c68 	.word	0x20000c68
 8003958:	20000c6c 	.word	0x20000c6c
 800395c:	20000cc8 	.word	0x20000cc8
 8003960:	20000cd0 	.word	0x20000cd0
 8003964:	20000cb8 	.word	0x20000cb8
 8003968:	200007e0 	.word	0x200007e0
 800396c:	200007dc 	.word	0x200007dc
 8003970:	20000cc4 	.word	0x20000cc4
 8003974:	20000cc0 	.word	0x20000cc0

08003978 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800397e:	4b28      	ldr	r3, [pc, #160]	@ (8003a20 <vTaskSwitchContext+0xa8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003986:	4b27      	ldr	r3, [pc, #156]	@ (8003a24 <vTaskSwitchContext+0xac>)
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800398c:	e042      	b.n	8003a14 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800398e:	4b25      	ldr	r3, [pc, #148]	@ (8003a24 <vTaskSwitchContext+0xac>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003994:	4b24      	ldr	r3, [pc, #144]	@ (8003a28 <vTaskSwitchContext+0xb0>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	e011      	b.n	80039c0 <vTaskSwitchContext+0x48>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10b      	bne.n	80039ba <vTaskSwitchContext+0x42>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	607b      	str	r3, [r7, #4]
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop
 80039b8:	e7fd      	b.n	80039b6 <vTaskSwitchContext+0x3e>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3b01      	subs	r3, #1
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	491a      	ldr	r1, [pc, #104]	@ (8003a2c <vTaskSwitchContext+0xb4>)
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0e3      	beq.n	800399c <vTaskSwitchContext+0x24>
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4a13      	ldr	r2, [pc, #76]	@ (8003a2c <vTaskSwitchContext+0xb4>)
 80039e0:	4413      	add	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	3308      	adds	r3, #8
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d104      	bne.n	8003a04 <vTaskSwitchContext+0x8c>
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	605a      	str	r2, [r3, #4]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	4a09      	ldr	r2, [pc, #36]	@ (8003a30 <vTaskSwitchContext+0xb8>)
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	4a06      	ldr	r2, [pc, #24]	@ (8003a28 <vTaskSwitchContext+0xb0>)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6013      	str	r3, [r2, #0]
}
 8003a14:	bf00      	nop
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	20000cd8 	.word	0x20000cd8
 8003a24:	20000cc4 	.word	0x20000cc4
 8003a28:	20000cb8 	.word	0x20000cb8
 8003a2c:	200007e0 	.word	0x200007e0
 8003a30:	200007dc 	.word	0x200007dc

08003a34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10b      	bne.n	8003a5c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	60fb      	str	r3, [r7, #12]
}
 8003a56:	bf00      	nop
 8003a58:	bf00      	nop
 8003a5a:	e7fd      	b.n	8003a58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a5c:	4b07      	ldr	r3, [pc, #28]	@ (8003a7c <vTaskPlaceOnEventList+0x48>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3318      	adds	r3, #24
 8003a62:	4619      	mov	r1, r3
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fe fd9e 	bl	80025a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	6838      	ldr	r0, [r7, #0]
 8003a6e:	f000 fa81 	bl	8003f74 <prvAddCurrentTaskToDelayedList>
}
 8003a72:	bf00      	nop
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	200007dc 	.word	0x200007dc

08003a80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10b      	bne.n	8003aaa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	617b      	str	r3, [r7, #20]
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	e7fd      	b.n	8003aa6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3318      	adds	r3, #24
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f7fe fd53 	bl	800255e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003abe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	68b8      	ldr	r0, [r7, #8]
 8003ac8:	f000 fa54 	bl	8003f74 <prvAddCurrentTaskToDelayedList>
	}
 8003acc:	bf00      	nop
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	200007dc 	.word	0x200007dc

08003ad8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10b      	bne.n	8003b06 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	60fb      	str	r3, [r7, #12]
}
 8003b00:	bf00      	nop
 8003b02:	bf00      	nop
 8003b04:	e7fd      	b.n	8003b02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	3318      	adds	r3, #24
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe fd84 	bl	8002618 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b10:	4b1d      	ldr	r3, [pc, #116]	@ (8003b88 <xTaskRemoveFromEventList+0xb0>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d11d      	bne.n	8003b54 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fe fd7b 	bl	8002618 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b26:	4b19      	ldr	r3, [pc, #100]	@ (8003b8c <xTaskRemoveFromEventList+0xb4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d903      	bls.n	8003b36 <xTaskRemoveFromEventList+0x5e>
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b32:	4a16      	ldr	r2, [pc, #88]	@ (8003b8c <xTaskRemoveFromEventList+0xb4>)
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4a13      	ldr	r2, [pc, #76]	@ (8003b90 <xTaskRemoveFromEventList+0xb8>)
 8003b44:	441a      	add	r2, r3
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	f7fe fd06 	bl	800255e <vListInsertEnd>
 8003b52:	e005      	b.n	8003b60 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	3318      	adds	r3, #24
 8003b58:	4619      	mov	r1, r3
 8003b5a:	480e      	ldr	r0, [pc, #56]	@ (8003b94 <xTaskRemoveFromEventList+0xbc>)
 8003b5c:	f7fe fcff 	bl	800255e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b64:	4b0c      	ldr	r3, [pc, #48]	@ (8003b98 <xTaskRemoveFromEventList+0xc0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d905      	bls.n	8003b7a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b72:	4b0a      	ldr	r3, [pc, #40]	@ (8003b9c <xTaskRemoveFromEventList+0xc4>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	e001      	b.n	8003b7e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003b7e:	697b      	ldr	r3, [r7, #20]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20000cd8 	.word	0x20000cd8
 8003b8c:	20000cb8 	.word	0x20000cb8
 8003b90:	200007e0 	.word	0x200007e0
 8003b94:	20000c70 	.word	0x20000c70
 8003b98:	200007dc 	.word	0x200007dc
 8003b9c:	20000cc4 	.word	0x20000cc4

08003ba0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ba8:	4b06      	ldr	r3, [pc, #24]	@ (8003bc4 <vTaskInternalSetTimeOutState+0x24>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003bb0:	4b05      	ldr	r3, [pc, #20]	@ (8003bc8 <vTaskInternalSetTimeOutState+0x28>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	605a      	str	r2, [r3, #4]
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	20000cc8 	.word	0x20000cc8
 8003bc8:	20000cb4 	.word	0x20000cb4

08003bcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10b      	bne.n	8003bf4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	613b      	str	r3, [r7, #16]
}
 8003bee:	bf00      	nop
 8003bf0:	bf00      	nop
 8003bf2:	e7fd      	b.n	8003bf0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10b      	bne.n	8003c12 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	60fb      	str	r3, [r7, #12]
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	e7fd      	b.n	8003c0e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003c12:	f000 fe91 	bl	8004938 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c16:	4b1d      	ldr	r3, [pc, #116]	@ (8003c8c <xTaskCheckForTimeOut+0xc0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2e:	d102      	bne.n	8003c36 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	e023      	b.n	8003c7e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	4b15      	ldr	r3, [pc, #84]	@ (8003c90 <xTaskCheckForTimeOut+0xc4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d007      	beq.n	8003c52 <xTaskCheckForTimeOut+0x86>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d302      	bcc.n	8003c52 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	61fb      	str	r3, [r7, #28]
 8003c50:	e015      	b.n	8003c7e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d20b      	bcs.n	8003c74 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	1ad2      	subs	r2, r2, r3
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff ff99 	bl	8003ba0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	e004      	b.n	8003c7e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c7e:	f000 fe8d 	bl	800499c <vPortExitCritical>

	return xReturn;
 8003c82:	69fb      	ldr	r3, [r7, #28]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3720      	adds	r7, #32
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20000cb4 	.word	0x20000cb4
 8003c90:	20000cc8 	.word	0x20000cc8

08003c94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c98:	4b03      	ldr	r3, [pc, #12]	@ (8003ca8 <vTaskMissedYield+0x14>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
}
 8003c9e:	bf00      	nop
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	20000cc4 	.word	0x20000cc4

08003cac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003cb4:	f000 f852 	bl	8003d5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003cb8:	4b06      	ldr	r3, [pc, #24]	@ (8003cd4 <prvIdleTask+0x28>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d9f9      	bls.n	8003cb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003cc0:	4b05      	ldr	r3, [pc, #20]	@ (8003cd8 <prvIdleTask+0x2c>)
 8003cc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003cd0:	e7f0      	b.n	8003cb4 <prvIdleTask+0x8>
 8003cd2:	bf00      	nop
 8003cd4:	200007e0 	.word	0x200007e0
 8003cd8:	e000ed04 	.word	0xe000ed04

08003cdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	e00c      	b.n	8003d02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4a12      	ldr	r2, [pc, #72]	@ (8003d3c <prvInitialiseTaskLists+0x60>)
 8003cf4:	4413      	add	r3, r2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe fc04 	bl	8002504 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	607b      	str	r3, [r7, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b37      	cmp	r3, #55	@ 0x37
 8003d06:	d9ef      	bls.n	8003ce8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d08:	480d      	ldr	r0, [pc, #52]	@ (8003d40 <prvInitialiseTaskLists+0x64>)
 8003d0a:	f7fe fbfb 	bl	8002504 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d0e:	480d      	ldr	r0, [pc, #52]	@ (8003d44 <prvInitialiseTaskLists+0x68>)
 8003d10:	f7fe fbf8 	bl	8002504 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d14:	480c      	ldr	r0, [pc, #48]	@ (8003d48 <prvInitialiseTaskLists+0x6c>)
 8003d16:	f7fe fbf5 	bl	8002504 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d1a:	480c      	ldr	r0, [pc, #48]	@ (8003d4c <prvInitialiseTaskLists+0x70>)
 8003d1c:	f7fe fbf2 	bl	8002504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d20:	480b      	ldr	r0, [pc, #44]	@ (8003d50 <prvInitialiseTaskLists+0x74>)
 8003d22:	f7fe fbef 	bl	8002504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d26:	4b0b      	ldr	r3, [pc, #44]	@ (8003d54 <prvInitialiseTaskLists+0x78>)
 8003d28:	4a05      	ldr	r2, [pc, #20]	@ (8003d40 <prvInitialiseTaskLists+0x64>)
 8003d2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d58 <prvInitialiseTaskLists+0x7c>)
 8003d2e:	4a05      	ldr	r2, [pc, #20]	@ (8003d44 <prvInitialiseTaskLists+0x68>)
 8003d30:	601a      	str	r2, [r3, #0]
}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	200007e0 	.word	0x200007e0
 8003d40:	20000c40 	.word	0x20000c40
 8003d44:	20000c54 	.word	0x20000c54
 8003d48:	20000c70 	.word	0x20000c70
 8003d4c:	20000c84 	.word	0x20000c84
 8003d50:	20000c9c 	.word	0x20000c9c
 8003d54:	20000c68 	.word	0x20000c68
 8003d58:	20000c6c 	.word	0x20000c6c

08003d5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d62:	e019      	b.n	8003d98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d64:	f000 fde8 	bl	8004938 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d68:	4b10      	ldr	r3, [pc, #64]	@ (8003dac <prvCheckTasksWaitingTermination+0x50>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3304      	adds	r3, #4
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fe fc4f 	bl	8002618 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003db0 <prvCheckTasksWaitingTermination+0x54>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	4a0b      	ldr	r2, [pc, #44]	@ (8003db0 <prvCheckTasksWaitingTermination+0x54>)
 8003d82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d84:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <prvCheckTasksWaitingTermination+0x58>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003db4 <prvCheckTasksWaitingTermination+0x58>)
 8003d8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d8e:	f000 fe05 	bl	800499c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f810 	bl	8003db8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d98:	4b06      	ldr	r3, [pc, #24]	@ (8003db4 <prvCheckTasksWaitingTermination+0x58>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e1      	bne.n	8003d64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003da0:	bf00      	nop
 8003da2:	bf00      	nop
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	20000c84 	.word	0x20000c84
 8003db0:	20000cb0 	.word	0x20000cb0
 8003db4:	20000c98 	.word	0x20000c98

08003db8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d108      	bne.n	8003ddc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 ffa2 	bl	8004d18 <vPortFree>
				vPortFree( pxTCB );
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 ff9f 	bl	8004d18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003dda:	e019      	b.n	8003e10 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d103      	bne.n	8003dee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 ff96 	bl	8004d18 <vPortFree>
	}
 8003dec:	e010      	b.n	8003e10 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d00b      	beq.n	8003e10 <prvDeleteTCB+0x58>
	__asm volatile
 8003df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfc:	f383 8811 	msr	BASEPRI, r3
 8003e00:	f3bf 8f6f 	isb	sy
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	60fb      	str	r3, [r7, #12]
}
 8003e0a:	bf00      	nop
 8003e0c:	bf00      	nop
 8003e0e:	e7fd      	b.n	8003e0c <prvDeleteTCB+0x54>
	}
 8003e10:	bf00      	nop
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e50 <prvResetNextTaskUnblockTime+0x38>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e28:	4b0a      	ldr	r3, [pc, #40]	@ (8003e54 <prvResetNextTaskUnblockTime+0x3c>)
 8003e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e30:	e008      	b.n	8003e44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e32:	4b07      	ldr	r3, [pc, #28]	@ (8003e50 <prvResetNextTaskUnblockTime+0x38>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	4a04      	ldr	r2, [pc, #16]	@ (8003e54 <prvResetNextTaskUnblockTime+0x3c>)
 8003e42:	6013      	str	r3, [r2, #0]
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	20000c68 	.word	0x20000c68
 8003e54:	20000cd0 	.word	0x20000cd0

08003e58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e8c <xTaskGetSchedulerState+0x34>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d102      	bne.n	8003e6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e66:	2301      	movs	r3, #1
 8003e68:	607b      	str	r3, [r7, #4]
 8003e6a:	e008      	b.n	8003e7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e6c:	4b08      	ldr	r3, [pc, #32]	@ (8003e90 <xTaskGetSchedulerState+0x38>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d102      	bne.n	8003e7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e74:	2302      	movs	r3, #2
 8003e76:	607b      	str	r3, [r7, #4]
 8003e78:	e001      	b.n	8003e7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e7e:	687b      	ldr	r3, [r7, #4]
	}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	20000cbc 	.word	0x20000cbc
 8003e90:	20000cd8 	.word	0x20000cd8

08003e94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d058      	beq.n	8003f5c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003eaa:	4b2f      	ldr	r3, [pc, #188]	@ (8003f68 <xTaskPriorityDisinherit+0xd4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d00b      	beq.n	8003ecc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	60fb      	str	r3, [r7, #12]
}
 8003ec6:	bf00      	nop
 8003ec8:	bf00      	nop
 8003eca:	e7fd      	b.n	8003ec8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10b      	bne.n	8003eec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	60bb      	str	r3, [r7, #8]
}
 8003ee6:	bf00      	nop
 8003ee8:	bf00      	nop
 8003eea:	e7fd      	b.n	8003ee8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ef0:	1e5a      	subs	r2, r3, #1
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d02c      	beq.n	8003f5c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d128      	bne.n	8003f5c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fe fb82 	bl	8002618 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f6c <xTaskPriorityDisinherit+0xd8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d903      	bls.n	8003f3c <xTaskPriorityDisinherit+0xa8>
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f38:	4a0c      	ldr	r2, [pc, #48]	@ (8003f6c <xTaskPriorityDisinherit+0xd8>)
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4a09      	ldr	r2, [pc, #36]	@ (8003f70 <xTaskPriorityDisinherit+0xdc>)
 8003f4a:	441a      	add	r2, r3
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	4619      	mov	r1, r3
 8003f52:	4610      	mov	r0, r2
 8003f54:	f7fe fb03 	bl	800255e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f5c:	697b      	ldr	r3, [r7, #20]
	}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	200007dc 	.word	0x200007dc
 8003f6c:	20000cb8 	.word	0x20000cb8
 8003f70:	200007e0 	.word	0x200007e0

08003f74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f7e:	4b21      	ldr	r3, [pc, #132]	@ (8004004 <prvAddCurrentTaskToDelayedList+0x90>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f84:	4b20      	ldr	r3, [pc, #128]	@ (8004008 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fe fb44 	bl	8002618 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f96:	d10a      	bne.n	8003fae <prvAddCurrentTaskToDelayedList+0x3a>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d007      	beq.n	8003fae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004008 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4819      	ldr	r0, [pc, #100]	@ (800400c <prvAddCurrentTaskToDelayedList+0x98>)
 8003fa8:	f7fe fad9 	bl	800255e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003fac:	e026      	b.n	8003ffc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fb6:	4b14      	ldr	r3, [pc, #80]	@ (8004008 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d209      	bcs.n	8003fda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fc6:	4b12      	ldr	r3, [pc, #72]	@ (8004010 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4b0f      	ldr	r3, [pc, #60]	@ (8004008 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f7fe fae7 	bl	80025a6 <vListInsert>
}
 8003fd8:	e010      	b.n	8003ffc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fda:	4b0e      	ldr	r3, [pc, #56]	@ (8004014 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4b0a      	ldr	r3, [pc, #40]	@ (8004008 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	f7fe fadd 	bl	80025a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003fec:	4b0a      	ldr	r3, [pc, #40]	@ (8004018 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d202      	bcs.n	8003ffc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003ff6:	4a08      	ldr	r2, [pc, #32]	@ (8004018 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	6013      	str	r3, [r2, #0]
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20000cb4 	.word	0x20000cb4
 8004008:	200007dc 	.word	0x200007dc
 800400c:	20000c9c 	.word	0x20000c9c
 8004010:	20000c6c 	.word	0x20000c6c
 8004014:	20000c68 	.word	0x20000c68
 8004018:	20000cd0 	.word	0x20000cd0

0800401c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08a      	sub	sp, #40	@ 0x28
 8004020:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004026:	f000 fb13 	bl	8004650 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800402a:	4b1d      	ldr	r3, [pc, #116]	@ (80040a0 <xTimerCreateTimerTask+0x84>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d021      	beq.n	8004076 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004036:	2300      	movs	r3, #0
 8004038:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800403a:	1d3a      	adds	r2, r7, #4
 800403c:	f107 0108 	add.w	r1, r7, #8
 8004040:	f107 030c 	add.w	r3, r7, #12
 8004044:	4618      	mov	r0, r3
 8004046:	f7fe fa43 	bl	80024d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	9202      	str	r2, [sp, #8]
 8004052:	9301      	str	r3, [sp, #4]
 8004054:	2302      	movs	r3, #2
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	2300      	movs	r3, #0
 800405a:	460a      	mov	r2, r1
 800405c:	4911      	ldr	r1, [pc, #68]	@ (80040a4 <xTimerCreateTimerTask+0x88>)
 800405e:	4812      	ldr	r0, [pc, #72]	@ (80040a8 <xTimerCreateTimerTask+0x8c>)
 8004060:	f7fe fffe 	bl	8003060 <xTaskCreateStatic>
 8004064:	4603      	mov	r3, r0
 8004066:	4a11      	ldr	r2, [pc, #68]	@ (80040ac <xTimerCreateTimerTask+0x90>)
 8004068:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800406a:	4b10      	ldr	r3, [pc, #64]	@ (80040ac <xTimerCreateTimerTask+0x90>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004072:	2301      	movs	r3, #1
 8004074:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10b      	bne.n	8004094 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800407c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	613b      	str	r3, [r7, #16]
}
 800408e:	bf00      	nop
 8004090:	bf00      	nop
 8004092:	e7fd      	b.n	8004090 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004094:	697b      	ldr	r3, [r7, #20]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20000d0c 	.word	0x20000d0c
 80040a4:	0800502c 	.word	0x0800502c
 80040a8:	080041e9 	.word	0x080041e9
 80040ac:	20000d10 	.word	0x20000d10

080040b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08a      	sub	sp, #40	@ 0x28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80040be:	2300      	movs	r3, #0
 80040c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10b      	bne.n	80040e0 <xTimerGenericCommand+0x30>
	__asm volatile
 80040c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040cc:	f383 8811 	msr	BASEPRI, r3
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	623b      	str	r3, [r7, #32]
}
 80040da:	bf00      	nop
 80040dc:	bf00      	nop
 80040de:	e7fd      	b.n	80040dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80040e0:	4b19      	ldr	r3, [pc, #100]	@ (8004148 <xTimerGenericCommand+0x98>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d02a      	beq.n	800413e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b05      	cmp	r3, #5
 80040f8:	dc18      	bgt.n	800412c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80040fa:	f7ff fead 	bl	8003e58 <xTaskGetSchedulerState>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b02      	cmp	r3, #2
 8004102:	d109      	bne.n	8004118 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004104:	4b10      	ldr	r3, [pc, #64]	@ (8004148 <xTimerGenericCommand+0x98>)
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	f107 0110 	add.w	r1, r7, #16
 800410c:	2300      	movs	r3, #0
 800410e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004110:	f7fe fbb6 	bl	8002880 <xQueueGenericSend>
 8004114:	6278      	str	r0, [r7, #36]	@ 0x24
 8004116:	e012      	b.n	800413e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004118:	4b0b      	ldr	r3, [pc, #44]	@ (8004148 <xTimerGenericCommand+0x98>)
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	f107 0110 	add.w	r1, r7, #16
 8004120:	2300      	movs	r3, #0
 8004122:	2200      	movs	r2, #0
 8004124:	f7fe fbac 	bl	8002880 <xQueueGenericSend>
 8004128:	6278      	str	r0, [r7, #36]	@ 0x24
 800412a:	e008      	b.n	800413e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800412c:	4b06      	ldr	r3, [pc, #24]	@ (8004148 <xTimerGenericCommand+0x98>)
 800412e:	6818      	ldr	r0, [r3, #0]
 8004130:	f107 0110 	add.w	r1, r7, #16
 8004134:	2300      	movs	r3, #0
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	f7fe fca4 	bl	8002a84 <xQueueGenericSendFromISR>
 800413c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004140:	4618      	mov	r0, r3
 8004142:	3728      	adds	r7, #40	@ 0x28
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20000d0c 	.word	0x20000d0c

0800414c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af02      	add	r7, sp, #8
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004156:	4b23      	ldr	r3, [pc, #140]	@ (80041e4 <prvProcessExpiredTimer+0x98>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	3304      	adds	r3, #4
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe fa57 	bl	8002618 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d023      	beq.n	80041c0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	699a      	ldr	r2, [r3, #24]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	18d1      	adds	r1, r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	6978      	ldr	r0, [r7, #20]
 8004186:	f000 f8d5 	bl	8004334 <prvInsertTimerInActiveList>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d020      	beq.n	80041d2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004190:	2300      	movs	r3, #0
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	2300      	movs	r3, #0
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	2100      	movs	r1, #0
 800419a:	6978      	ldr	r0, [r7, #20]
 800419c:	f7ff ff88 	bl	80040b0 <xTimerGenericCommand>
 80041a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d114      	bne.n	80041d2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	60fb      	str	r3, [r7, #12]
}
 80041ba:	bf00      	nop
 80041bc:	bf00      	nop
 80041be:	e7fd      	b.n	80041bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	6978      	ldr	r0, [r7, #20]
 80041d8:	4798      	blx	r3
}
 80041da:	bf00      	nop
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000d04 	.word	0x20000d04

080041e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041f0:	f107 0308 	add.w	r3, r7, #8
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 f859 	bl	80042ac <prvGetNextExpireTime>
 80041fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4619      	mov	r1, r3
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f805 	bl	8004210 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004206:	f000 f8d7 	bl	80043b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800420a:	bf00      	nop
 800420c:	e7f0      	b.n	80041f0 <prvTimerTask+0x8>
	...

08004210 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800421a:	f7ff fa37 	bl	800368c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800421e:	f107 0308 	add.w	r3, r7, #8
 8004222:	4618      	mov	r0, r3
 8004224:	f000 f866 	bl	80042f4 <prvSampleTimeNow>
 8004228:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d130      	bne.n	8004292 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10a      	bne.n	800424c <prvProcessTimerOrBlockTask+0x3c>
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	429a      	cmp	r2, r3
 800423c:	d806      	bhi.n	800424c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800423e:	f7ff fa33 	bl	80036a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004242:	68f9      	ldr	r1, [r7, #12]
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff ff81 	bl	800414c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800424a:	e024      	b.n	8004296 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d008      	beq.n	8004264 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004252:	4b13      	ldr	r3, [pc, #76]	@ (80042a0 <prvProcessTimerOrBlockTask+0x90>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <prvProcessTimerOrBlockTask+0x50>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <prvProcessTimerOrBlockTask+0x52>
 8004260:	2300      	movs	r3, #0
 8004262:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004264:	4b0f      	ldr	r3, [pc, #60]	@ (80042a4 <prvProcessTimerOrBlockTask+0x94>)
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	4619      	mov	r1, r3
 8004272:	f7fe fec1 	bl	8002ff8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004276:	f7ff fa17 	bl	80036a8 <xTaskResumeAll>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10a      	bne.n	8004296 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004280:	4b09      	ldr	r3, [pc, #36]	@ (80042a8 <prvProcessTimerOrBlockTask+0x98>)
 8004282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	f3bf 8f6f 	isb	sy
}
 8004290:	e001      	b.n	8004296 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004292:	f7ff fa09 	bl	80036a8 <xTaskResumeAll>
}
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000d08 	.word	0x20000d08
 80042a4:	20000d0c 	.word	0x20000d0c
 80042a8:	e000ed04 	.word	0xe000ed04

080042ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80042b4:	4b0e      	ldr	r3, [pc, #56]	@ (80042f0 <prvGetNextExpireTime+0x44>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <prvGetNextExpireTime+0x16>
 80042be:	2201      	movs	r2, #1
 80042c0:	e000      	b.n	80042c4 <prvGetNextExpireTime+0x18>
 80042c2:	2200      	movs	r2, #0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d105      	bne.n	80042dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042d0:	4b07      	ldr	r3, [pc, #28]	@ (80042f0 <prvGetNextExpireTime+0x44>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	e001      	b.n	80042e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80042e0:	68fb      	ldr	r3, [r7, #12]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	20000d04 	.word	0x20000d04

080042f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80042fc:	f7ff fa72 	bl	80037e4 <xTaskGetTickCount>
 8004300:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004302:	4b0b      	ldr	r3, [pc, #44]	@ (8004330 <prvSampleTimeNow+0x3c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	429a      	cmp	r2, r3
 800430a:	d205      	bcs.n	8004318 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800430c:	f000 f93a 	bl	8004584 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	e002      	b.n	800431e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800431e:	4a04      	ldr	r2, [pc, #16]	@ (8004330 <prvSampleTimeNow+0x3c>)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004324:	68fb      	ldr	r3, [r7, #12]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000d14 	.word	0x20000d14

08004334 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	429a      	cmp	r2, r3
 8004358:	d812      	bhi.n	8004380 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	1ad2      	subs	r2, r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	429a      	cmp	r2, r3
 8004366:	d302      	bcc.n	800436e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004368:	2301      	movs	r3, #1
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	e01b      	b.n	80043a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800436e:	4b10      	ldr	r3, [pc, #64]	@ (80043b0 <prvInsertTimerInActiveList+0x7c>)
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3304      	adds	r3, #4
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f7fe f914 	bl	80025a6 <vListInsert>
 800437e:	e012      	b.n	80043a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d206      	bcs.n	8004396 <prvInsertTimerInActiveList+0x62>
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d302      	bcc.n	8004396 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004390:	2301      	movs	r3, #1
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	e007      	b.n	80043a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004396:	4b07      	ldr	r3, [pc, #28]	@ (80043b4 <prvInsertTimerInActiveList+0x80>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	3304      	adds	r3, #4
 800439e:	4619      	mov	r1, r3
 80043a0:	4610      	mov	r0, r2
 80043a2:	f7fe f900 	bl	80025a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80043a6:	697b      	ldr	r3, [r7, #20]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000d08 	.word	0x20000d08
 80043b4:	20000d04 	.word	0x20000d04

080043b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08e      	sub	sp, #56	@ 0x38
 80043bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043be:	e0ce      	b.n	800455e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	da19      	bge.n	80043fa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80043c6:	1d3b      	adds	r3, r7, #4
 80043c8:	3304      	adds	r3, #4
 80043ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80043cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10b      	bne.n	80043ea <prvProcessReceivedCommands+0x32>
	__asm volatile
 80043d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	61fb      	str	r3, [r7, #28]
}
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop
 80043e8:	e7fd      	b.n	80043e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80043ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043f0:	6850      	ldr	r0, [r2, #4]
 80043f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043f4:	6892      	ldr	r2, [r2, #8]
 80043f6:	4611      	mov	r1, r2
 80043f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f2c0 80ae 	blt.w	800455e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d004      	beq.n	8004418 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800440e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004410:	3304      	adds	r3, #4
 8004412:	4618      	mov	r0, r3
 8004414:	f7fe f900 	bl	8002618 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004418:	463b      	mov	r3, r7
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff ff6a 	bl	80042f4 <prvSampleTimeNow>
 8004420:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b09      	cmp	r3, #9
 8004426:	f200 8097 	bhi.w	8004558 <prvProcessReceivedCommands+0x1a0>
 800442a:	a201      	add	r2, pc, #4	@ (adr r2, 8004430 <prvProcessReceivedCommands+0x78>)
 800442c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004430:	08004459 	.word	0x08004459
 8004434:	08004459 	.word	0x08004459
 8004438:	08004459 	.word	0x08004459
 800443c:	080044cf 	.word	0x080044cf
 8004440:	080044e3 	.word	0x080044e3
 8004444:	0800452f 	.word	0x0800452f
 8004448:	08004459 	.word	0x08004459
 800444c:	08004459 	.word	0x08004459
 8004450:	080044cf 	.word	0x080044cf
 8004454:	080044e3 	.word	0x080044e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800445e:	f043 0301 	orr.w	r3, r3, #1
 8004462:	b2da      	uxtb	r2, r3
 8004464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004466:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	18d1      	adds	r1, r2, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004476:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004478:	f7ff ff5c 	bl	8004334 <prvInsertTimerInActiveList>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d06c      	beq.n	800455c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004488:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800448a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d061      	beq.n	800455c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	441a      	add	r2, r3
 80044a0:	2300      	movs	r3, #0
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	2300      	movs	r3, #0
 80044a6:	2100      	movs	r1, #0
 80044a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044aa:	f7ff fe01 	bl	80040b0 <xTimerGenericCommand>
 80044ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d152      	bne.n	800455c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80044b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	61bb      	str	r3, [r7, #24]
}
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	e7fd      	b.n	80044ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044d4:	f023 0301 	bic.w	r3, r3, #1
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80044e0:	e03d      	b.n	800455e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80044fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10b      	bne.n	800451a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	617b      	str	r3, [r7, #20]
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	e7fd      	b.n	8004516 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800451a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004520:	18d1      	adds	r1, r2, r3
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004528:	f7ff ff04 	bl	8004334 <prvInsertTimerInActiveList>
					break;
 800452c:	e017      	b.n	800455e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800452e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004530:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d103      	bne.n	8004544 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800453c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800453e:	f000 fbeb 	bl	8004d18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004542:	e00c      	b.n	800455e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004546:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800454a:	f023 0301 	bic.w	r3, r3, #1
 800454e:	b2da      	uxtb	r2, r3
 8004550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004552:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004556:	e002      	b.n	800455e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004558:	bf00      	nop
 800455a:	e000      	b.n	800455e <prvProcessReceivedCommands+0x1a6>
					break;
 800455c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800455e:	4b08      	ldr	r3, [pc, #32]	@ (8004580 <prvProcessReceivedCommands+0x1c8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	1d39      	adds	r1, r7, #4
 8004564:	2200      	movs	r2, #0
 8004566:	4618      	mov	r0, r3
 8004568:	f7fe fb2a 	bl	8002bc0 <xQueueReceive>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	f47f af26 	bne.w	80043c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004574:	bf00      	nop
 8004576:	bf00      	nop
 8004578:	3730      	adds	r7, #48	@ 0x30
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	20000d0c 	.word	0x20000d0c

08004584 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800458a:	e049      	b.n	8004620 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800458c:	4b2e      	ldr	r3, [pc, #184]	@ (8004648 <prvSwitchTimerLists+0xc4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004596:	4b2c      	ldr	r3, [pc, #176]	@ (8004648 <prvSwitchTimerLists+0xc4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	3304      	adds	r3, #4
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7fe f837 	bl	8002618 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d02f      	beq.n	8004620 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4413      	add	r3, r2
 80045c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d90e      	bls.n	80045f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045de:	4b1a      	ldr	r3, [pc, #104]	@ (8004648 <prvSwitchTimerLists+0xc4>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	3304      	adds	r3, #4
 80045e6:	4619      	mov	r1, r3
 80045e8:	4610      	mov	r0, r2
 80045ea:	f7fd ffdc 	bl	80025a6 <vListInsert>
 80045ee:	e017      	b.n	8004620 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045f0:	2300      	movs	r3, #0
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	2300      	movs	r3, #0
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	2100      	movs	r1, #0
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7ff fd58 	bl	80040b0 <xTimerGenericCommand>
 8004600:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10b      	bne.n	8004620 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	603b      	str	r3, [r7, #0]
}
 800461a:	bf00      	nop
 800461c:	bf00      	nop
 800461e:	e7fd      	b.n	800461c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004620:	4b09      	ldr	r3, [pc, #36]	@ (8004648 <prvSwitchTimerLists+0xc4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1b0      	bne.n	800458c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800462a:	4b07      	ldr	r3, [pc, #28]	@ (8004648 <prvSwitchTimerLists+0xc4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004630:	4b06      	ldr	r3, [pc, #24]	@ (800464c <prvSwitchTimerLists+0xc8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a04      	ldr	r2, [pc, #16]	@ (8004648 <prvSwitchTimerLists+0xc4>)
 8004636:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004638:	4a04      	ldr	r2, [pc, #16]	@ (800464c <prvSwitchTimerLists+0xc8>)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	6013      	str	r3, [r2, #0]
}
 800463e:	bf00      	nop
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20000d04 	.word	0x20000d04
 800464c:	20000d08 	.word	0x20000d08

08004650 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004656:	f000 f96f 	bl	8004938 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800465a:	4b15      	ldr	r3, [pc, #84]	@ (80046b0 <prvCheckForValidListAndQueue+0x60>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d120      	bne.n	80046a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004662:	4814      	ldr	r0, [pc, #80]	@ (80046b4 <prvCheckForValidListAndQueue+0x64>)
 8004664:	f7fd ff4e 	bl	8002504 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004668:	4813      	ldr	r0, [pc, #76]	@ (80046b8 <prvCheckForValidListAndQueue+0x68>)
 800466a:	f7fd ff4b 	bl	8002504 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800466e:	4b13      	ldr	r3, [pc, #76]	@ (80046bc <prvCheckForValidListAndQueue+0x6c>)
 8004670:	4a10      	ldr	r2, [pc, #64]	@ (80046b4 <prvCheckForValidListAndQueue+0x64>)
 8004672:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004674:	4b12      	ldr	r3, [pc, #72]	@ (80046c0 <prvCheckForValidListAndQueue+0x70>)
 8004676:	4a10      	ldr	r2, [pc, #64]	@ (80046b8 <prvCheckForValidListAndQueue+0x68>)
 8004678:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800467a:	2300      	movs	r3, #0
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	4b11      	ldr	r3, [pc, #68]	@ (80046c4 <prvCheckForValidListAndQueue+0x74>)
 8004680:	4a11      	ldr	r2, [pc, #68]	@ (80046c8 <prvCheckForValidListAndQueue+0x78>)
 8004682:	2110      	movs	r1, #16
 8004684:	200a      	movs	r0, #10
 8004686:	f7fe f85b 	bl	8002740 <xQueueGenericCreateStatic>
 800468a:	4603      	mov	r3, r0
 800468c:	4a08      	ldr	r2, [pc, #32]	@ (80046b0 <prvCheckForValidListAndQueue+0x60>)
 800468e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004690:	4b07      	ldr	r3, [pc, #28]	@ (80046b0 <prvCheckForValidListAndQueue+0x60>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d005      	beq.n	80046a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004698:	4b05      	ldr	r3, [pc, #20]	@ (80046b0 <prvCheckForValidListAndQueue+0x60>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	490b      	ldr	r1, [pc, #44]	@ (80046cc <prvCheckForValidListAndQueue+0x7c>)
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fe fc80 	bl	8002fa4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046a4:	f000 f97a 	bl	800499c <vPortExitCritical>
}
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000d0c 	.word	0x20000d0c
 80046b4:	20000cdc 	.word	0x20000cdc
 80046b8:	20000cf0 	.word	0x20000cf0
 80046bc:	20000d04 	.word	0x20000d04
 80046c0:	20000d08 	.word	0x20000d08
 80046c4:	20000db8 	.word	0x20000db8
 80046c8:	20000d18 	.word	0x20000d18
 80046cc:	08005034 	.word	0x08005034

080046d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3b04      	subs	r3, #4
 80046e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3b04      	subs	r3, #4
 80046ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f023 0201 	bic.w	r2, r3, #1
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3b04      	subs	r3, #4
 80046fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004700:	4a0c      	ldr	r2, [pc, #48]	@ (8004734 <pxPortInitialiseStack+0x64>)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3b14      	subs	r3, #20
 800470a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	3b04      	subs	r3, #4
 8004716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f06f 0202 	mvn.w	r2, #2
 800471e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3b20      	subs	r3, #32
 8004724:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004726:	68fb      	ldr	r3, [r7, #12]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	08004739 	.word	0x08004739

08004738 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800473e:	2300      	movs	r3, #0
 8004740:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004742:	4b13      	ldr	r3, [pc, #76]	@ (8004790 <prvTaskExitError+0x58>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474a:	d00b      	beq.n	8004764 <prvTaskExitError+0x2c>
	__asm volatile
 800474c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004750:	f383 8811 	msr	BASEPRI, r3
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	60fb      	str	r3, [r7, #12]
}
 800475e:	bf00      	nop
 8004760:	bf00      	nop
 8004762:	e7fd      	b.n	8004760 <prvTaskExitError+0x28>
	__asm volatile
 8004764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	60bb      	str	r3, [r7, #8]
}
 8004776:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004778:	bf00      	nop
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0fc      	beq.n	800477a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004780:	bf00      	nop
 8004782:	bf00      	nop
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	2000000c 	.word	0x2000000c
	...

080047a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80047a0:	4b07      	ldr	r3, [pc, #28]	@ (80047c0 <pxCurrentTCBConst2>)
 80047a2:	6819      	ldr	r1, [r3, #0]
 80047a4:	6808      	ldr	r0, [r1, #0]
 80047a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047aa:	f380 8809 	msr	PSP, r0
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f04f 0000 	mov.w	r0, #0
 80047b6:	f380 8811 	msr	BASEPRI, r0
 80047ba:	4770      	bx	lr
 80047bc:	f3af 8000 	nop.w

080047c0 <pxCurrentTCBConst2>:
 80047c0:	200007dc 	.word	0x200007dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop

080047c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80047c8:	4808      	ldr	r0, [pc, #32]	@ (80047ec <prvPortStartFirstTask+0x24>)
 80047ca:	6800      	ldr	r0, [r0, #0]
 80047cc:	6800      	ldr	r0, [r0, #0]
 80047ce:	f380 8808 	msr	MSP, r0
 80047d2:	f04f 0000 	mov.w	r0, #0
 80047d6:	f380 8814 	msr	CONTROL, r0
 80047da:	b662      	cpsie	i
 80047dc:	b661      	cpsie	f
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	df00      	svc	0
 80047e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80047ea:	bf00      	nop
 80047ec:	e000ed08 	.word	0xe000ed08

080047f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047f6:	4b47      	ldr	r3, [pc, #284]	@ (8004914 <xPortStartScheduler+0x124>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a47      	ldr	r2, [pc, #284]	@ (8004918 <xPortStartScheduler+0x128>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d10b      	bne.n	8004818 <xPortStartScheduler+0x28>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	613b      	str	r3, [r7, #16]
}
 8004812:	bf00      	nop
 8004814:	bf00      	nop
 8004816:	e7fd      	b.n	8004814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004818:	4b3e      	ldr	r3, [pc, #248]	@ (8004914 <xPortStartScheduler+0x124>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a3f      	ldr	r2, [pc, #252]	@ (800491c <xPortStartScheduler+0x12c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d10b      	bne.n	800483a <xPortStartScheduler+0x4a>
	__asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	60fb      	str	r3, [r7, #12]
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop
 8004838:	e7fd      	b.n	8004836 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800483a:	4b39      	ldr	r3, [pc, #228]	@ (8004920 <xPortStartScheduler+0x130>)
 800483c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	22ff      	movs	r2, #255	@ 0xff
 800484a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	b2db      	uxtb	r3, r3
 8004858:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800485c:	b2da      	uxtb	r2, r3
 800485e:	4b31      	ldr	r3, [pc, #196]	@ (8004924 <xPortStartScheduler+0x134>)
 8004860:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004862:	4b31      	ldr	r3, [pc, #196]	@ (8004928 <xPortStartScheduler+0x138>)
 8004864:	2207      	movs	r2, #7
 8004866:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004868:	e009      	b.n	800487e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800486a:	4b2f      	ldr	r3, [pc, #188]	@ (8004928 <xPortStartScheduler+0x138>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3b01      	subs	r3, #1
 8004870:	4a2d      	ldr	r2, [pc, #180]	@ (8004928 <xPortStartScheduler+0x138>)
 8004872:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	b2db      	uxtb	r3, r3
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	b2db      	uxtb	r3, r3
 800487c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004886:	2b80      	cmp	r3, #128	@ 0x80
 8004888:	d0ef      	beq.n	800486a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800488a:	4b27      	ldr	r3, [pc, #156]	@ (8004928 <xPortStartScheduler+0x138>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f1c3 0307 	rsb	r3, r3, #7
 8004892:	2b04      	cmp	r3, #4
 8004894:	d00b      	beq.n	80048ae <xPortStartScheduler+0xbe>
	__asm volatile
 8004896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	60bb      	str	r3, [r7, #8]
}
 80048a8:	bf00      	nop
 80048aa:	bf00      	nop
 80048ac:	e7fd      	b.n	80048aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004928 <xPortStartScheduler+0x138>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	021b      	lsls	r3, r3, #8
 80048b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004928 <xPortStartScheduler+0x138>)
 80048b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004928 <xPortStartScheduler+0x138>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80048c0:	4a19      	ldr	r2, [pc, #100]	@ (8004928 <xPortStartScheduler+0x138>)
 80048c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048cc:	4b17      	ldr	r3, [pc, #92]	@ (800492c <xPortStartScheduler+0x13c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a16      	ldr	r2, [pc, #88]	@ (800492c <xPortStartScheduler+0x13c>)
 80048d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80048d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048d8:	4b14      	ldr	r3, [pc, #80]	@ (800492c <xPortStartScheduler+0x13c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a13      	ldr	r2, [pc, #76]	@ (800492c <xPortStartScheduler+0x13c>)
 80048de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80048e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80048e4:	f000 f8da 	bl	8004a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80048e8:	4b11      	ldr	r3, [pc, #68]	@ (8004930 <xPortStartScheduler+0x140>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80048ee:	f000 f8f9 	bl	8004ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80048f2:	4b10      	ldr	r3, [pc, #64]	@ (8004934 <xPortStartScheduler+0x144>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a0f      	ldr	r2, [pc, #60]	@ (8004934 <xPortStartScheduler+0x144>)
 80048f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80048fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048fe:	f7ff ff63 	bl	80047c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004902:	f7ff f839 	bl	8003978 <vTaskSwitchContext>
	prvTaskExitError();
 8004906:	f7ff ff17 	bl	8004738 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	e000ed00 	.word	0xe000ed00
 8004918:	410fc271 	.word	0x410fc271
 800491c:	410fc270 	.word	0x410fc270
 8004920:	e000e400 	.word	0xe000e400
 8004924:	20000e08 	.word	0x20000e08
 8004928:	20000e0c 	.word	0x20000e0c
 800492c:	e000ed20 	.word	0xe000ed20
 8004930:	2000000c 	.word	0x2000000c
 8004934:	e000ef34 	.word	0xe000ef34

08004938 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	607b      	str	r3, [r7, #4]
}
 8004950:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004952:	4b10      	ldr	r3, [pc, #64]	@ (8004994 <vPortEnterCritical+0x5c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3301      	adds	r3, #1
 8004958:	4a0e      	ldr	r2, [pc, #56]	@ (8004994 <vPortEnterCritical+0x5c>)
 800495a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800495c:	4b0d      	ldr	r3, [pc, #52]	@ (8004994 <vPortEnterCritical+0x5c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d110      	bne.n	8004986 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004964:	4b0c      	ldr	r3, [pc, #48]	@ (8004998 <vPortEnterCritical+0x60>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00b      	beq.n	8004986 <vPortEnterCritical+0x4e>
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	603b      	str	r3, [r7, #0]
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop
 8004984:	e7fd      	b.n	8004982 <vPortEnterCritical+0x4a>
	}
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	2000000c 	.word	0x2000000c
 8004998:	e000ed04 	.word	0xe000ed04

0800499c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80049a2:	4b12      	ldr	r3, [pc, #72]	@ (80049ec <vPortExitCritical+0x50>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10b      	bne.n	80049c2 <vPortExitCritical+0x26>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	607b      	str	r3, [r7, #4]
}
 80049bc:	bf00      	nop
 80049be:	bf00      	nop
 80049c0:	e7fd      	b.n	80049be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80049c2:	4b0a      	ldr	r3, [pc, #40]	@ (80049ec <vPortExitCritical+0x50>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	4a08      	ldr	r2, [pc, #32]	@ (80049ec <vPortExitCritical+0x50>)
 80049ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80049cc:	4b07      	ldr	r3, [pc, #28]	@ (80049ec <vPortExitCritical+0x50>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d105      	bne.n	80049e0 <vPortExitCritical+0x44>
 80049d4:	2300      	movs	r3, #0
 80049d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	f383 8811 	msr	BASEPRI, r3
}
 80049de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	2000000c 	.word	0x2000000c

080049f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049f0:	f3ef 8009 	mrs	r0, PSP
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	4b15      	ldr	r3, [pc, #84]	@ (8004a50 <pxCurrentTCBConst>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	f01e 0f10 	tst.w	lr, #16
 8004a00:	bf08      	it	eq
 8004a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0a:	6010      	str	r0, [r2, #0]
 8004a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004a14:	f380 8811 	msr	BASEPRI, r0
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f7fe ffaa 	bl	8003978 <vTaskSwitchContext>
 8004a24:	f04f 0000 	mov.w	r0, #0
 8004a28:	f380 8811 	msr	BASEPRI, r0
 8004a2c:	bc09      	pop	{r0, r3}
 8004a2e:	6819      	ldr	r1, [r3, #0]
 8004a30:	6808      	ldr	r0, [r1, #0]
 8004a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a36:	f01e 0f10 	tst.w	lr, #16
 8004a3a:	bf08      	it	eq
 8004a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a40:	f380 8809 	msr	PSP, r0
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	f3af 8000 	nop.w

08004a50 <pxCurrentTCBConst>:
 8004a50:	200007dc 	.word	0x200007dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop

08004a58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	607b      	str	r3, [r7, #4]
}
 8004a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a72:	f7fe fec7 	bl	8003804 <xTaskIncrementTick>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a7c:	4b06      	ldr	r3, [pc, #24]	@ (8004a98 <xPortSysTickHandler+0x40>)
 8004a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	2300      	movs	r3, #0
 8004a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	f383 8811 	msr	BASEPRI, r3
}
 8004a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	e000ed04 	.word	0xe000ed04

08004a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad0 <vPortSetupTimerInterrupt+0x34>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad4 <vPortSetupTimerInterrupt+0x38>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004aac:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad8 <vPortSetupTimerInterrupt+0x3c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8004adc <vPortSetupTimerInterrupt+0x40>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	099b      	lsrs	r3, r3, #6
 8004ab8:	4a09      	ldr	r2, [pc, #36]	@ (8004ae0 <vPortSetupTimerInterrupt+0x44>)
 8004aba:	3b01      	subs	r3, #1
 8004abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004abe:	4b04      	ldr	r3, [pc, #16]	@ (8004ad0 <vPortSetupTimerInterrupt+0x34>)
 8004ac0:	2207      	movs	r2, #7
 8004ac2:	601a      	str	r2, [r3, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	e000e010 	.word	0xe000e010
 8004ad4:	e000e018 	.word	0xe000e018
 8004ad8:	20000000 	.word	0x20000000
 8004adc:	10624dd3 	.word	0x10624dd3
 8004ae0:	e000e014 	.word	0xe000e014

08004ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004af4 <vPortEnableVFP+0x10>
 8004ae8:	6801      	ldr	r1, [r0, #0]
 8004aea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004aee:	6001      	str	r1, [r0, #0]
 8004af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004af2:	bf00      	nop
 8004af4:	e000ed88 	.word	0xe000ed88

08004af8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004afe:	f3ef 8305 	mrs	r3, IPSR
 8004b02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b0f      	cmp	r3, #15
 8004b08:	d915      	bls.n	8004b36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b0a:	4a18      	ldr	r2, [pc, #96]	@ (8004b6c <vPortValidateInterruptPriority+0x74>)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4413      	add	r3, r2
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004b14:	4b16      	ldr	r3, [pc, #88]	@ (8004b70 <vPortValidateInterruptPriority+0x78>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	7afa      	ldrb	r2, [r7, #11]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d20b      	bcs.n	8004b36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	607b      	str	r3, [r7, #4]
}
 8004b30:	bf00      	nop
 8004b32:	bf00      	nop
 8004b34:	e7fd      	b.n	8004b32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b36:	4b0f      	ldr	r3, [pc, #60]	@ (8004b74 <vPortValidateInterruptPriority+0x7c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b78 <vPortValidateInterruptPriority+0x80>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d90b      	bls.n	8004b5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	603b      	str	r3, [r7, #0]
}
 8004b58:	bf00      	nop
 8004b5a:	bf00      	nop
 8004b5c:	e7fd      	b.n	8004b5a <vPortValidateInterruptPriority+0x62>
	}
 8004b5e:	bf00      	nop
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	e000e3f0 	.word	0xe000e3f0
 8004b70:	20000e08 	.word	0x20000e08
 8004b74:	e000ed0c 	.word	0xe000ed0c
 8004b78:	20000e0c 	.word	0x20000e0c

08004b7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	@ 0x28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b84:	2300      	movs	r3, #0
 8004b86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b88:	f7fe fd80 	bl	800368c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b8c:	4b5c      	ldr	r3, [pc, #368]	@ (8004d00 <pvPortMalloc+0x184>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b94:	f000 f924 	bl	8004de0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b98:	4b5a      	ldr	r3, [pc, #360]	@ (8004d04 <pvPortMalloc+0x188>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f040 8095 	bne.w	8004cd0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d01e      	beq.n	8004bea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004bac:	2208      	movs	r2, #8
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d015      	beq.n	8004bea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f023 0307 	bic.w	r3, r3, #7
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00b      	beq.n	8004bea <pvPortMalloc+0x6e>
	__asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	617b      	str	r3, [r7, #20]
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop
 8004be8:	e7fd      	b.n	8004be6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d06f      	beq.n	8004cd0 <pvPortMalloc+0x154>
 8004bf0:	4b45      	ldr	r3, [pc, #276]	@ (8004d08 <pvPortMalloc+0x18c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d86a      	bhi.n	8004cd0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004bfa:	4b44      	ldr	r3, [pc, #272]	@ (8004d0c <pvPortMalloc+0x190>)
 8004bfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004bfe:	4b43      	ldr	r3, [pc, #268]	@ (8004d0c <pvPortMalloc+0x190>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c04:	e004      	b.n	8004c10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d903      	bls.n	8004c22 <pvPortMalloc+0xa6>
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f1      	bne.n	8004c06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c22:	4b37      	ldr	r3, [pc, #220]	@ (8004d00 <pvPortMalloc+0x184>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d051      	beq.n	8004cd0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2208      	movs	r2, #8
 8004c32:	4413      	add	r3, r2
 8004c34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	1ad2      	subs	r2, r2, r3
 8004c46:	2308      	movs	r3, #8
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d920      	bls.n	8004c90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4413      	add	r3, r2
 8004c54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00b      	beq.n	8004c78 <pvPortMalloc+0xfc>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	613b      	str	r3, [r7, #16]
}
 8004c72:	bf00      	nop
 8004c74:	bf00      	nop
 8004c76:	e7fd      	b.n	8004c74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	1ad2      	subs	r2, r2, r3
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c8a:	69b8      	ldr	r0, [r7, #24]
 8004c8c:	f000 f90a 	bl	8004ea4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c90:	4b1d      	ldr	r3, [pc, #116]	@ (8004d08 <pvPortMalloc+0x18c>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8004d08 <pvPortMalloc+0x18c>)
 8004c9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004d08 <pvPortMalloc+0x18c>)
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d10 <pvPortMalloc+0x194>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d203      	bcs.n	8004cb2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004caa:	4b17      	ldr	r3, [pc, #92]	@ (8004d08 <pvPortMalloc+0x18c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a18      	ldr	r2, [pc, #96]	@ (8004d10 <pvPortMalloc+0x194>)
 8004cb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	4b13      	ldr	r3, [pc, #76]	@ (8004d04 <pvPortMalloc+0x188>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004cc6:	4b13      	ldr	r3, [pc, #76]	@ (8004d14 <pvPortMalloc+0x198>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	4a11      	ldr	r2, [pc, #68]	@ (8004d14 <pvPortMalloc+0x198>)
 8004cce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004cd0:	f7fe fcea 	bl	80036a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00b      	beq.n	8004cf6 <pvPortMalloc+0x17a>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	60fb      	str	r3, [r7, #12]
}
 8004cf0:	bf00      	nop
 8004cf2:	bf00      	nop
 8004cf4:	e7fd      	b.n	8004cf2 <pvPortMalloc+0x176>
	return pvReturn;
 8004cf6:	69fb      	ldr	r3, [r7, #28]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3728      	adds	r7, #40	@ 0x28
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	20004a18 	.word	0x20004a18
 8004d04:	20004a2c 	.word	0x20004a2c
 8004d08:	20004a1c 	.word	0x20004a1c
 8004d0c:	20004a10 	.word	0x20004a10
 8004d10:	20004a20 	.word	0x20004a20
 8004d14:	20004a24 	.word	0x20004a24

08004d18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d04f      	beq.n	8004dca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d2a:	2308      	movs	r3, #8
 8004d2c:	425b      	negs	r3, r3
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4413      	add	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	4b25      	ldr	r3, [pc, #148]	@ (8004dd4 <vPortFree+0xbc>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10b      	bne.n	8004d5e <vPortFree+0x46>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	60fb      	str	r3, [r7, #12]
}
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
 8004d5c:	e7fd      	b.n	8004d5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00b      	beq.n	8004d7e <vPortFree+0x66>
	__asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	60bb      	str	r3, [r7, #8]
}
 8004d78:	bf00      	nop
 8004d7a:	bf00      	nop
 8004d7c:	e7fd      	b.n	8004d7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	4b14      	ldr	r3, [pc, #80]	@ (8004dd4 <vPortFree+0xbc>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4013      	ands	r3, r2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01e      	beq.n	8004dca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d11a      	bne.n	8004dca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	4b0e      	ldr	r3, [pc, #56]	@ (8004dd4 <vPortFree+0xbc>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	401a      	ands	r2, r3
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004da4:	f7fe fc72 	bl	800368c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd8 <vPortFree+0xc0>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4413      	add	r3, r2
 8004db2:	4a09      	ldr	r2, [pc, #36]	@ (8004dd8 <vPortFree+0xc0>)
 8004db4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004db6:	6938      	ldr	r0, [r7, #16]
 8004db8:	f000 f874 	bl	8004ea4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004dbc:	4b07      	ldr	r3, [pc, #28]	@ (8004ddc <vPortFree+0xc4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	4a06      	ldr	r2, [pc, #24]	@ (8004ddc <vPortFree+0xc4>)
 8004dc4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004dc6:	f7fe fc6f 	bl	80036a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004dca:	bf00      	nop
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20004a2c 	.word	0x20004a2c
 8004dd8:	20004a1c 	.word	0x20004a1c
 8004ddc:	20004a28 	.word	0x20004a28

08004de0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004de6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004dea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004dec:	4b27      	ldr	r3, [pc, #156]	@ (8004e8c <prvHeapInit+0xac>)
 8004dee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00c      	beq.n	8004e14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	3307      	adds	r3, #7
 8004dfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0307 	bic.w	r3, r3, #7
 8004e06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8004e8c <prvHeapInit+0xac>)
 8004e10:	4413      	add	r3, r2
 8004e12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e18:	4a1d      	ldr	r2, [pc, #116]	@ (8004e90 <prvHeapInit+0xb0>)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8004e90 <prvHeapInit+0xb0>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	4413      	add	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	1a9b      	subs	r3, r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0307 	bic.w	r3, r3, #7
 8004e3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4a15      	ldr	r2, [pc, #84]	@ (8004e94 <prvHeapInit+0xb4>)
 8004e40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e42:	4b14      	ldr	r3, [pc, #80]	@ (8004e94 <prvHeapInit+0xb4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2200      	movs	r2, #0
 8004e48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e4a:	4b12      	ldr	r3, [pc, #72]	@ (8004e94 <prvHeapInit+0xb4>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	1ad2      	subs	r2, r2, r3
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e60:	4b0c      	ldr	r3, [pc, #48]	@ (8004e94 <prvHeapInit+0xb4>)
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8004e98 <prvHeapInit+0xb8>)
 8004e6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	4a09      	ldr	r2, [pc, #36]	@ (8004e9c <prvHeapInit+0xbc>)
 8004e76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e78:	4b09      	ldr	r3, [pc, #36]	@ (8004ea0 <prvHeapInit+0xc0>)
 8004e7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004e7e:	601a      	str	r2, [r3, #0]
}
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	20000e10 	.word	0x20000e10
 8004e90:	20004a10 	.word	0x20004a10
 8004e94:	20004a18 	.word	0x20004a18
 8004e98:	20004a20 	.word	0x20004a20
 8004e9c:	20004a1c 	.word	0x20004a1c
 8004ea0:	20004a2c 	.word	0x20004a2c

08004ea4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004eac:	4b28      	ldr	r3, [pc, #160]	@ (8004f50 <prvInsertBlockIntoFreeList+0xac>)
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	e002      	b.n	8004eb8 <prvInsertBlockIntoFreeList+0x14>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d8f7      	bhi.n	8004eb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	4413      	add	r3, r2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d108      	bne.n	8004ee6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	441a      	add	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	441a      	add	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d118      	bne.n	8004f2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4b15      	ldr	r3, [pc, #84]	@ (8004f54 <prvInsertBlockIntoFreeList+0xb0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d00d      	beq.n	8004f22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	441a      	add	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	e008      	b.n	8004f34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f22:	4b0c      	ldr	r3, [pc, #48]	@ (8004f54 <prvInsertBlockIntoFreeList+0xb0>)
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	e003      	b.n	8004f34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d002      	beq.n	8004f42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f42:	bf00      	nop
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	20004a10 	.word	0x20004a10
 8004f54:	20004a18 	.word	0x20004a18

08004f58 <memset>:
 8004f58:	4402      	add	r2, r0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d100      	bne.n	8004f62 <memset+0xa>
 8004f60:	4770      	bx	lr
 8004f62:	f803 1b01 	strb.w	r1, [r3], #1
 8004f66:	e7f9      	b.n	8004f5c <memset+0x4>

08004f68 <__libc_init_array>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	4d0d      	ldr	r5, [pc, #52]	@ (8004fa0 <__libc_init_array+0x38>)
 8004f6c:	4c0d      	ldr	r4, [pc, #52]	@ (8004fa4 <__libc_init_array+0x3c>)
 8004f6e:	1b64      	subs	r4, r4, r5
 8004f70:	10a4      	asrs	r4, r4, #2
 8004f72:	2600      	movs	r6, #0
 8004f74:	42a6      	cmp	r6, r4
 8004f76:	d109      	bne.n	8004f8c <__libc_init_array+0x24>
 8004f78:	4d0b      	ldr	r5, [pc, #44]	@ (8004fa8 <__libc_init_array+0x40>)
 8004f7a:	4c0c      	ldr	r4, [pc, #48]	@ (8004fac <__libc_init_array+0x44>)
 8004f7c:	f000 f826 	bl	8004fcc <_init>
 8004f80:	1b64      	subs	r4, r4, r5
 8004f82:	10a4      	asrs	r4, r4, #2
 8004f84:	2600      	movs	r6, #0
 8004f86:	42a6      	cmp	r6, r4
 8004f88:	d105      	bne.n	8004f96 <__libc_init_array+0x2e>
 8004f8a:	bd70      	pop	{r4, r5, r6, pc}
 8004f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f90:	4798      	blx	r3
 8004f92:	3601      	adds	r6, #1
 8004f94:	e7ee      	b.n	8004f74 <__libc_init_array+0xc>
 8004f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f9a:	4798      	blx	r3
 8004f9c:	3601      	adds	r6, #1
 8004f9e:	e7f2      	b.n	8004f86 <__libc_init_array+0x1e>
 8004fa0:	0800505c 	.word	0x0800505c
 8004fa4:	0800505c 	.word	0x0800505c
 8004fa8:	0800505c 	.word	0x0800505c
 8004fac:	08005060 	.word	0x08005060

08004fb0 <memcpy>:
 8004fb0:	440a      	add	r2, r1
 8004fb2:	4291      	cmp	r1, r2
 8004fb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fb8:	d100      	bne.n	8004fbc <memcpy+0xc>
 8004fba:	4770      	bx	lr
 8004fbc:	b510      	push	{r4, lr}
 8004fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fc6:	4291      	cmp	r1, r2
 8004fc8:	d1f9      	bne.n	8004fbe <memcpy+0xe>
 8004fca:	bd10      	pop	{r4, pc}

08004fcc <_init>:
 8004fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fce:	bf00      	nop
 8004fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd2:	bc08      	pop	{r3}
 8004fd4:	469e      	mov	lr, r3
 8004fd6:	4770      	bx	lr

08004fd8 <_fini>:
 8004fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fda:	bf00      	nop
 8004fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fde:	bc08      	pop	{r3}
 8004fe0:	469e      	mov	lr, r3
 8004fe2:	4770      	bx	lr

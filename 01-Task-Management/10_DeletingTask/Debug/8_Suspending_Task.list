
8_Suspending_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ce4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004e74  08004e74  00005e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ee4  08004ee4  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004ee4  08004ee4  00005ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004eec  08004eec  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eec  08004eec  00005eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ef0  08004ef0  00005ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004ef4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          00004a18  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004a28  20004a28  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000160e0  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003038  00000000  00000000  0001c120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  0001f158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f61  00000000  00000000  00020518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003a2f  00000000  00000000  00021479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001579c  00000000  00000000  00024ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d55e6  00000000  00000000  0003a644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010fc2a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053a8  00000000  00000000  0010fc70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00115018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e5c 	.word	0x08004e5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004e5c 	.word	0x08004e5c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:


//------------------------------------------------------------------------------

int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af02      	add	r7, sp, #8

  HAL_Init();
 80004c6:	f000 facd 	bl	8000a64 <HAL_Init>
  SystemClock_Config();
 80004ca:	f000 f893 	bl	80005f4 <SystemClock_Config>
  MX_GPIO_Init();
 80004ce:	f000 f937 	bl	8000740 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d2:	f000 f8f9 	bl	80006c8 <MX_USART2_UART_Init>

  xTaskCreate(vBlueLedControllerTask,
 80004d6:	4b11      	ldr	r3, [pc, #68]	@ (800051c <main+0x5c>)
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	2301      	movs	r3, #1
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2300      	movs	r3, #0
 80004e0:	2264      	movs	r2, #100	@ 0x64
 80004e2:	490f      	ldr	r1, [pc, #60]	@ (8000520 <main+0x60>)
 80004e4:	480f      	ldr	r0, [pc, #60]	@ (8000524 <main+0x64>)
 80004e6:	f002 fdf9 	bl	80030dc <xTaskCreate>
			  100,
			  NULL,
			  1,
			  &blue_handle);

  xTaskCreate(vRedLedControllerTask,
 80004ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000528 <main+0x68>)
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	2301      	movs	r3, #1
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	2300      	movs	r3, #0
 80004f4:	2264      	movs	r2, #100	@ 0x64
 80004f6:	490d      	ldr	r1, [pc, #52]	@ (800052c <main+0x6c>)
 80004f8:	480d      	ldr	r0, [pc, #52]	@ (8000530 <main+0x70>)
 80004fa:	f002 fdef 	bl	80030dc <xTaskCreate>
			  100,
			  NULL,
			  1,
			  &red_handle);

  xTaskCreate(vGreenLedControllerTask,
 80004fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <main+0x74>)
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2301      	movs	r3, #1
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2300      	movs	r3, #0
 8000508:	2264      	movs	r2, #100	@ 0x64
 800050a:	490b      	ldr	r1, [pc, #44]	@ (8000538 <main+0x78>)
 800050c:	480b      	ldr	r0, [pc, #44]	@ (800053c <main+0x7c>)
 800050e:	f002 fde5 	bl	80030dc <xTaskCreate>
			  100,
			  NULL,
			  1,
			  &green_handle);

  vTaskStartScheduler();
 8000512:	f002 ff9f 	bl	8003454 <vTaskStartScheduler>

  while (1)
 8000516:	bf00      	nop
 8000518:	e7fd      	b.n	8000516 <main+0x56>
 800051a:	bf00      	nop
 800051c:	20000080 	.word	0x20000080
 8000520:	08004e74 	.word	0x08004e74
 8000524:	08000541 	.word	0x08000541
 8000528:	20000084 	.word	0x20000084
 800052c:	08004e88 	.word	0x08004e88
 8000530:	08000571 	.word	0x08000571
 8000534:	20000088 	.word	0x20000088
 8000538:	08004e9c 	.word	0x08004e9c
 800053c:	080005c5 	.word	0x080005c5

08000540 <vBlueLedControllerTask>:
}

//-----------------------------------------------------------------------------

void vBlueLedControllerTask(void *pvParameters)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	while(1)
	{

			BlueTaskProfiler++;
 8000548:	4b07      	ldr	r3, [pc, #28]	@ (8000568 <vBlueLedControllerTask+0x28>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	3301      	adds	r3, #1
 800054e:	4a06      	ldr	r2, [pc, #24]	@ (8000568 <vBlueLedControllerTask+0x28>)
 8000550:	6013      	str	r3, [r2, #0]
			for(int i=0; i<100000; i++){}
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	e002      	b.n	800055e <vBlueLedControllerTask+0x1e>
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	3301      	adds	r3, #1
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	4a02      	ldr	r2, [pc, #8]	@ (800056c <vBlueLedControllerTask+0x2c>)
 8000562:	4293      	cmp	r3, r2
 8000564:	ddf8      	ble.n	8000558 <vBlueLedControllerTask+0x18>
			BlueTaskProfiler++;
 8000566:	e7ef      	b.n	8000548 <vBlueLedControllerTask+0x8>
 8000568:	20000074 	.word	0x20000074
 800056c:	0001869f 	.word	0x0001869f

08000570 <vRedLedControllerTask>:
	};
}

uint32_t suspend_monitor;
void vRedLedControllerTask(void *pvParameters)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	while(1)
	{
			RedTaskProfiler++;
 8000578:	4b0e      	ldr	r3, [pc, #56]	@ (80005b4 <vRedLedControllerTask+0x44>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	4a0d      	ldr	r2, [pc, #52]	@ (80005b4 <vRedLedControllerTask+0x44>)
 8000580:	6013      	str	r3, [r2, #0]
			for(int i=0; i<100000; i++){}
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	e002      	b.n	800058e <vRedLedControllerTask+0x1e>
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	3301      	adds	r3, #1
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	4a09      	ldr	r2, [pc, #36]	@ (80005b8 <vRedLedControllerTask+0x48>)
 8000592:	4293      	cmp	r3, r2
 8000594:	ddf8      	ble.n	8000588 <vRedLedControllerTask+0x18>

			suspend_monitor++;
 8000596:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <vRedLedControllerTask+0x4c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	3301      	adds	r3, #1
 800059c:	4a07      	ldr	r2, [pc, #28]	@ (80005bc <vRedLedControllerTask+0x4c>)
 800059e:	6013      	str	r3, [r2, #0]

			if(suspend_monitor >=50)
 80005a0:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <vRedLedControllerTask+0x4c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b31      	cmp	r3, #49	@ 0x31
 80005a6:	d9e7      	bls.n	8000578 <vRedLedControllerTask+0x8>
			{
				vTaskSuspend(blue_handle);
 80005a8:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <vRedLedControllerTask+0x50>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 fedb 	bl	8003368 <vTaskSuspend>
			RedTaskProfiler++;
 80005b2:	e7e1      	b.n	8000578 <vRedLedControllerTask+0x8>
 80005b4:	20000078 	.word	0x20000078
 80005b8:	0001869f 	.word	0x0001869f
 80005bc:	2000008c 	.word	0x2000008c
 80005c0:	20000080 	.word	0x20000080

080005c4 <vGreenLedControllerTask>:

	};
}

void vGreenLedControllerTask(void *pvParameters)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	while(1)
	{
			GreenTaskProfiler++;
 80005cc:	4b07      	ldr	r3, [pc, #28]	@ (80005ec <vGreenLedControllerTask+0x28>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	4a06      	ldr	r2, [pc, #24]	@ (80005ec <vGreenLedControllerTask+0x28>)
 80005d4:	6013      	str	r3, [r2, #0]
			for(int i=0; i<100000; i++){}
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	e002      	b.n	80005e2 <vGreenLedControllerTask+0x1e>
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3301      	adds	r3, #1
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	4a02      	ldr	r2, [pc, #8]	@ (80005f0 <vGreenLedControllerTask+0x2c>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	ddf8      	ble.n	80005dc <vGreenLedControllerTask+0x18>
			GreenTaskProfiler++;
 80005ea:	e7ef      	b.n	80005cc <vGreenLedControllerTask+0x8>
 80005ec:	2000007c 	.word	0x2000007c
 80005f0:	0001869f 	.word	0x0001869f

080005f4 <SystemClock_Config>:
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
  return ch;
}

void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	@ 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	@ 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f004 fbf0 	bl	8004de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b28      	ldr	r3, [pc, #160]	@ (80006c0 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	4a27      	ldr	r2, [pc, #156]	@ (80006c0 <SystemClock_Config+0xcc>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	@ 0x40
 8000628:	4b25      	ldr	r3, [pc, #148]	@ (80006c0 <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a21      	ldr	r2, [pc, #132]	@ (80006c4 <SystemClock_Config+0xd0>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1f      	ldr	r3, [pc, #124]	@ (80006c4 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;  // Changed to HSI
 8000650:	2302      	movs	r3, #2
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;                   // Changed to HSI_ON
 8000654:	2301      	movs	r3, #1
 8000656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;  // Added
 8000658:	2310      	movs	r3, #16
 800065a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;       // Changed to HSI
 8000660:	2300      	movs	r3, #0
 8000662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000664:	2308      	movs	r3, #8
 8000666:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;  // Changed from 336 to 168 for HSI
 8000668:	23a8      	movs	r3, #168	@ 0xa8
 800066a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000670:	2307      	movs	r3, #7
 8000672:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fcb3 	bl	8000fe4 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000684:	f000 f89e 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000694:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800069e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2105      	movs	r1, #5
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 ff14 	bl	80014d4 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006b2:	f000 f887 	bl	80007c4 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	@ 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
  __HAL_RCC_USART2_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <MX_USART2_UART_Init+0x6c>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d6:	4a17      	ldr	r2, [pc, #92]	@ (8000734 <MX_USART2_UART_Init+0x6c>)
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80006de:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <MX_USART2_UART_Init+0x6c>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  huart2.Instance = USART2;
 80006ea:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <MX_USART2_UART_Init+0x70>)
 80006ec:	4a13      	ldr	r2, [pc, #76]	@ (800073c <MX_USART2_UART_Init+0x74>)
 80006ee:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f0:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <MX_USART2_UART_Init+0x70>)
 80006f2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <MX_USART2_UART_Init+0x70>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <MX_USART2_UART_Init+0x70>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000704:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <MX_USART2_UART_Init+0x70>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800070a:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <MX_USART2_UART_Init+0x70>)
 800070c:	220c      	movs	r2, #12
 800070e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000710:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <MX_USART2_UART_Init+0x70>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000716:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <MX_USART2_UART_Init+0x70>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071c:	4806      	ldr	r0, [pc, #24]	@ (8000738 <MX_USART2_UART_Init+0x70>)
 800071e:	f001 fbc7 	bl	8001eb0 <HAL_UART_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_USART2_UART_Init+0x64>
  {
    Error_Handler();
 8000728:	f000 f84c 	bl	80007c4 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	2000002c 	.word	0x2000002c
 800073c:	40004400 	.word	0x40004400

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <MX_GPIO_Init+0x58>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <MX_GPIO_Init+0x58>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <MX_GPIO_Init+0x58>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000770:	230c      	movs	r3, #12
 8000772:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000780:	2307      	movs	r3, #7
 8000782:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	4619      	mov	r1, r3
 8000788:	4804      	ldr	r0, [pc, #16]	@ (800079c <MX_GPIO_Init+0x5c>)
 800078a:	f000 fa8f 	bl	8000cac <HAL_GPIO_Init>
}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40020000 	.word	0x40020000

080007a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a04      	ldr	r2, [pc, #16]	@ (80007c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d101      	bne.n	80007b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007b2:	f000 f979 	bl	8000aa8 <HAL_IncTick>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40010000 	.word	0x40010000

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  __disable_irq();
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <Error_Handler+0x8>

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <HAL_MspInit+0x54>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007de:	4a11      	ldr	r2, [pc, #68]	@ (8000824 <HAL_MspInit+0x54>)
 80007e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <HAL_MspInit+0x54>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <HAL_MspInit+0x54>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000824 <HAL_MspInit+0x54>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000800:	6413      	str	r3, [r2, #64]	@ 0x40
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <HAL_MspInit+0x54>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	210f      	movs	r1, #15
 8000812:	f06f 0001 	mvn.w	r0, #1
 8000816:	f000 fa1f 	bl	8000c58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	@ 0x28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a19      	ldr	r2, [pc, #100]	@ (80008ac <HAL_UART_MspInit+0x84>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d12b      	bne.n	80008a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <HAL_UART_MspInit+0x88>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000852:	4a17      	ldr	r2, [pc, #92]	@ (80008b0 <HAL_UART_MspInit+0x88>)
 8000854:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000858:	6413      	str	r3, [r2, #64]	@ 0x40
 800085a:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <HAL_UART_MspInit+0x88>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <HAL_UART_MspInit+0x88>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a10      	ldr	r2, [pc, #64]	@ (80008b0 <HAL_UART_MspInit+0x88>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <HAL_UART_MspInit+0x88>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000882:	230c      	movs	r3, #12
 8000884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000892:	2307      	movs	r3, #7
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <HAL_UART_MspInit+0x8c>)
 800089e:	f000 fa05 	bl	8000cac <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	@ 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40004400 	.word	0x40004400
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020000 	.word	0x40020000

080008b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	@ 0x30
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	4b2f      	ldr	r3, [pc, #188]	@ (800098c <HAL_InitTick+0xd4>)
 80008ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d0:	4a2e      	ldr	r2, [pc, #184]	@ (800098c <HAL_InitTick+0xd4>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80008d8:	4b2c      	ldr	r3, [pc, #176]	@ (800098c <HAL_InitTick+0xd4>)
 80008da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008e4:	f107 020c 	add.w	r2, r7, #12
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4611      	mov	r1, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f001 f810 	bl	8001914 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80008f4:	f000 fffa 	bl	80018ec <HAL_RCC_GetPCLK2Freq>
 80008f8:	4603      	mov	r3, r0
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000900:	4a23      	ldr	r2, [pc, #140]	@ (8000990 <HAL_InitTick+0xd8>)
 8000902:	fba2 2303 	umull	r2, r3, r2, r3
 8000906:	0c9b      	lsrs	r3, r3, #18
 8000908:	3b01      	subs	r3, #1
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800090c:	4b21      	ldr	r3, [pc, #132]	@ (8000994 <HAL_InitTick+0xdc>)
 800090e:	4a22      	ldr	r2, [pc, #136]	@ (8000998 <HAL_InitTick+0xe0>)
 8000910:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000912:	4b20      	ldr	r3, [pc, #128]	@ (8000994 <HAL_InitTick+0xdc>)
 8000914:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000918:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800091a:	4a1e      	ldr	r2, [pc, #120]	@ (8000994 <HAL_InitTick+0xdc>)
 800091c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800091e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000920:	4b1c      	ldr	r3, [pc, #112]	@ (8000994 <HAL_InitTick+0xdc>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000926:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <HAL_InitTick+0xdc>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092c:	4b19      	ldr	r3, [pc, #100]	@ (8000994 <HAL_InitTick+0xdc>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000932:	4818      	ldr	r0, [pc, #96]	@ (8000994 <HAL_InitTick+0xdc>)
 8000934:	f001 f820 	bl	8001978 <HAL_TIM_Base_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800093e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000942:	2b00      	cmp	r3, #0
 8000944:	d11b      	bne.n	800097e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000946:	4813      	ldr	r0, [pc, #76]	@ (8000994 <HAL_InitTick+0xdc>)
 8000948:	f001 f870 	bl	8001a2c <HAL_TIM_Base_Start_IT>
 800094c:	4603      	mov	r3, r0
 800094e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000952:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000956:	2b00      	cmp	r3, #0
 8000958:	d111      	bne.n	800097e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800095a:	2019      	movs	r0, #25
 800095c:	f000 f998 	bl	8000c90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b0f      	cmp	r3, #15
 8000964:	d808      	bhi.n	8000978 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000966:	2200      	movs	r2, #0
 8000968:	6879      	ldr	r1, [r7, #4]
 800096a:	2019      	movs	r0, #25
 800096c:	f000 f974 	bl	8000c58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000970:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <HAL_InitTick+0xe4>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6013      	str	r3, [r2, #0]
 8000976:	e002      	b.n	800097e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000978:	2301      	movs	r3, #1
 800097a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800097e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000982:	4618      	mov	r0, r3
 8000984:	3730      	adds	r7, #48	@ 0x30
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	431bde83 	.word	0x431bde83
 8000994:	20000090 	.word	0x20000090
 8000998:	40010000 	.word	0x40010000
 800099c:	20000004 	.word	0x20000004

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <NMI_Handler+0x4>

080009a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <MemManage_Handler+0x4>

080009b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
	...

080009d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009dc:	4802      	ldr	r0, [pc, #8]	@ (80009e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009de:	f001 f895 	bl	8001b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000090 	.word	0x20000090

080009ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <SystemInit+0x20>)
 80009f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009f6:	4a05      	ldr	r2, [pc, #20]	@ (8000a0c <SystemInit+0x20>)
 80009f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a14:	f7ff ffea 	bl	80009ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a18:	480c      	ldr	r0, [pc, #48]	@ (8000a4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a1a:	490d      	ldr	r1, [pc, #52]	@ (8000a50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a20:	e002      	b.n	8000a28 <LoopCopyDataInit>

08000a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a26:	3304      	adds	r3, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a2c:	d3f9      	bcc.n	8000a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a30:	4c0a      	ldr	r4, [pc, #40]	@ (8000a5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a34:	e001      	b.n	8000a3a <LoopFillZerobss>

08000a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a38:	3204      	adds	r2, #4

08000a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a3e:	f004 f9db 	bl	8004df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a42:	f7ff fd3d 	bl	80004c0 <main>
  bx  lr    
 8000a46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a54:	08004ef4 	.word	0x08004ef4
  ldr r2, =_sbss
 8000a58:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a5c:	20004a28 	.word	0x20004a28

08000a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a68:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <HAL_Init+0x40>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa4 <HAL_Init+0x40>)
 8000a6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a74:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <HAL_Init+0x40>)
 8000a7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a80:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a07      	ldr	r2, [pc, #28]	@ (8000aa4 <HAL_Init+0x40>)
 8000a86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f000 f8d8 	bl	8000c42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a92:	200f      	movs	r0, #15
 8000a94:	f7ff ff10 	bl	80008b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a98:	f7ff fe9a 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023c00 	.word	0x40023c00

08000aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_IncTick+0x20>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <HAL_IncTick+0x24>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <HAL_IncTick+0x24>)
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	200000d8 	.word	0x200000d8

08000ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	@ (8000ae4 <HAL_GetTick+0x14>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	200000d8 	.word	0x200000d8

08000ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b04:	4013      	ands	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1a:	4a04      	ldr	r2, [pc, #16]	@ (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	60d3      	str	r3, [r2, #12]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b34:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <__NVIC_GetPriorityGrouping+0x18>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	f003 0307 	and.w	r3, r3, #7
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db0b      	blt.n	8000b76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	f003 021f 	and.w	r2, r3, #31
 8000b64:	4907      	ldr	r1, [pc, #28]	@ (8000b84 <__NVIC_EnableIRQ+0x38>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	095b      	lsrs	r3, r3, #5
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000e100 	.word	0xe000e100

08000b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db0a      	blt.n	8000bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	490c      	ldr	r1, [pc, #48]	@ (8000bd4 <__NVIC_SetPriority+0x4c>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	0112      	lsls	r2, r2, #4
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	440b      	add	r3, r1
 8000bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb0:	e00a      	b.n	8000bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4908      	ldr	r1, [pc, #32]	@ (8000bd8 <__NVIC_SetPriority+0x50>)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	3b04      	subs	r3, #4
 8000bc0:	0112      	lsls	r2, r2, #4
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	761a      	strb	r2, [r3, #24]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000e100 	.word	0xe000e100
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	@ 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f1c3 0307 	rsb	r3, r3, #7
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	bf28      	it	cs
 8000bfa:	2304      	movcs	r3, #4
 8000bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3304      	adds	r3, #4
 8000c02:	2b06      	cmp	r3, #6
 8000c04:	d902      	bls.n	8000c0c <NVIC_EncodePriority+0x30>
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3b03      	subs	r3, #3
 8000c0a:	e000      	b.n	8000c0e <NVIC_EncodePriority+0x32>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	f04f 32ff 	mov.w	r2, #4294967295
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	401a      	ands	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c24:	f04f 31ff 	mov.w	r1, #4294967295
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	43d9      	mvns	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	4313      	orrs	r3, r2
         );
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3724      	adds	r7, #36	@ 0x24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ff4c 	bl	8000ae8 <__NVIC_SetPriorityGrouping>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
 8000c64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c6a:	f7ff ff61 	bl	8000b30 <__NVIC_GetPriorityGrouping>
 8000c6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	68b9      	ldr	r1, [r7, #8]
 8000c74:	6978      	ldr	r0, [r7, #20]
 8000c76:	f7ff ffb1 	bl	8000bdc <NVIC_EncodePriority>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c80:	4611      	mov	r1, r2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff ff80 	bl	8000b88 <__NVIC_SetPriority>
}
 8000c88:	bf00      	nop
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff54 	bl	8000b4c <__NVIC_EnableIRQ>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	@ 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
 8000cc6:	e16b      	b.n	8000fa0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cc8:	2201      	movs	r2, #1
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f040 815a 	bne.w	8000f9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0303 	and.w	r3, r3, #3
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d005      	beq.n	8000cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d130      	bne.n	8000d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2203      	movs	r2, #3
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d34:	2201      	movs	r2, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4013      	ands	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	091b      	lsrs	r3, r3, #4
 8000d4a:	f003 0201 	and.w	r2, r3, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d017      	beq.n	8000d9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d123      	bne.n	8000df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	08da      	lsrs	r2, r3, #3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3208      	adds	r2, #8
 8000db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	691a      	ldr	r2, [r3, #16]
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	08da      	lsrs	r2, r3, #3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3208      	adds	r2, #8
 8000dea:	69b9      	ldr	r1, [r7, #24]
 8000dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0203 	and.w	r2, r3, #3
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f000 80b4 	beq.w	8000f9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b60      	ldr	r3, [pc, #384]	@ (8000fb8 <HAL_GPIO_Init+0x30c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3a:	4a5f      	ldr	r2, [pc, #380]	@ (8000fb8 <HAL_GPIO_Init+0x30c>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e42:	4b5d      	ldr	r3, [pc, #372]	@ (8000fb8 <HAL_GPIO_Init+0x30c>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e4e:	4a5b      	ldr	r2, [pc, #364]	@ (8000fbc <HAL_GPIO_Init+0x310>)
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3302      	adds	r3, #2
 8000e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a52      	ldr	r2, [pc, #328]	@ (8000fc0 <HAL_GPIO_Init+0x314>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d02b      	beq.n	8000ed2 <HAL_GPIO_Init+0x226>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a51      	ldr	r2, [pc, #324]	@ (8000fc4 <HAL_GPIO_Init+0x318>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d025      	beq.n	8000ece <HAL_GPIO_Init+0x222>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a50      	ldr	r2, [pc, #320]	@ (8000fc8 <HAL_GPIO_Init+0x31c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d01f      	beq.n	8000eca <HAL_GPIO_Init+0x21e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a4f      	ldr	r2, [pc, #316]	@ (8000fcc <HAL_GPIO_Init+0x320>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d019      	beq.n	8000ec6 <HAL_GPIO_Init+0x21a>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4e      	ldr	r2, [pc, #312]	@ (8000fd0 <HAL_GPIO_Init+0x324>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d013      	beq.n	8000ec2 <HAL_GPIO_Init+0x216>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a4d      	ldr	r2, [pc, #308]	@ (8000fd4 <HAL_GPIO_Init+0x328>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d00d      	beq.n	8000ebe <HAL_GPIO_Init+0x212>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a4c      	ldr	r2, [pc, #304]	@ (8000fd8 <HAL_GPIO_Init+0x32c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d007      	beq.n	8000eba <HAL_GPIO_Init+0x20e>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a4b      	ldr	r2, [pc, #300]	@ (8000fdc <HAL_GPIO_Init+0x330>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d101      	bne.n	8000eb6 <HAL_GPIO_Init+0x20a>
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	e00e      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	e00c      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000eba:	2306      	movs	r3, #6
 8000ebc:	e00a      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	e008      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	e006      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e004      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000eca:	2302      	movs	r3, #2
 8000ecc:	e002      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	69fa      	ldr	r2, [r7, #28]
 8000ed6:	f002 0203 	and.w	r2, r2, #3
 8000eda:	0092      	lsls	r2, r2, #2
 8000edc:	4093      	lsls	r3, r2
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ee4:	4935      	ldr	r1, [pc, #212]	@ (8000fbc <HAL_GPIO_Init+0x310>)
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3302      	adds	r3, #2
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f16:	4a32      	ldr	r2, [pc, #200]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f1c:	4b30      	ldr	r3, [pc, #192]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f40:	4a27      	ldr	r2, [pc, #156]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f46:	4b26      	ldr	r3, [pc, #152]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f94:	4a12      	ldr	r2, [pc, #72]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	2b0f      	cmp	r3, #15
 8000fa4:	f67f ae90 	bls.w	8000cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3724      	adds	r7, #36	@ 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40013800 	.word	0x40013800
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40020800 	.word	0x40020800
 8000fcc:	40020c00 	.word	0x40020c00
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40021400 	.word	0x40021400
 8000fd8:	40021800 	.word	0x40021800
 8000fdc:	40021c00 	.word	0x40021c00
 8000fe0:	40013c00 	.word	0x40013c00

08000fe4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e267      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d075      	beq.n	80010ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001002:	4b88      	ldr	r3, [pc, #544]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 030c 	and.w	r3, r3, #12
 800100a:	2b04      	cmp	r3, #4
 800100c:	d00c      	beq.n	8001028 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800100e:	4b85      	ldr	r3, [pc, #532]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001016:	2b08      	cmp	r3, #8
 8001018:	d112      	bne.n	8001040 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800101a:	4b82      	ldr	r3, [pc, #520]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001022:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001026:	d10b      	bne.n	8001040 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001028:	4b7e      	ldr	r3, [pc, #504]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d05b      	beq.n	80010ec <HAL_RCC_OscConfig+0x108>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d157      	bne.n	80010ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e242      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001048:	d106      	bne.n	8001058 <HAL_RCC_OscConfig+0x74>
 800104a:	4b76      	ldr	r3, [pc, #472]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a75      	ldr	r2, [pc, #468]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	e01d      	b.n	8001094 <HAL_RCC_OscConfig+0xb0>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001060:	d10c      	bne.n	800107c <HAL_RCC_OscConfig+0x98>
 8001062:	4b70      	ldr	r3, [pc, #448]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a6f      	ldr	r2, [pc, #444]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001068:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	4b6d      	ldr	r3, [pc, #436]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a6c      	ldr	r2, [pc, #432]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e00b      	b.n	8001094 <HAL_RCC_OscConfig+0xb0>
 800107c:	4b69      	ldr	r3, [pc, #420]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a68      	ldr	r2, [pc, #416]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001082:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b66      	ldr	r3, [pc, #408]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a65      	ldr	r2, [pc, #404]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 800108e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d013      	beq.n	80010c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fd18 	bl	8000ad0 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a4:	f7ff fd14 	bl	8000ad0 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b64      	cmp	r3, #100	@ 0x64
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e207      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0f0      	beq.n	80010a4 <HAL_RCC_OscConfig+0xc0>
 80010c2:	e014      	b.n	80010ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c4:	f7ff fd04 	bl	8000ad0 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010cc:	f7ff fd00 	bl	8000ad0 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b64      	cmp	r3, #100	@ 0x64
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e1f3      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010de:	4b51      	ldr	r3, [pc, #324]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f0      	bne.n	80010cc <HAL_RCC_OscConfig+0xe8>
 80010ea:	e000      	b.n	80010ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d063      	beq.n	80011c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 030c 	and.w	r3, r3, #12
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00b      	beq.n	800111e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001106:	4b47      	ldr	r3, [pc, #284]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800110e:	2b08      	cmp	r3, #8
 8001110:	d11c      	bne.n	800114c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001112:	4b44      	ldr	r3, [pc, #272]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d116      	bne.n	800114c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111e:	4b41      	ldr	r3, [pc, #260]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d005      	beq.n	8001136 <HAL_RCC_OscConfig+0x152>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d001      	beq.n	8001136 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e1c7      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001136:	4b3b      	ldr	r3, [pc, #236]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	4937      	ldr	r1, [pc, #220]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001146:	4313      	orrs	r3, r2
 8001148:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114a:	e03a      	b.n	80011c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d020      	beq.n	8001196 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001154:	4b34      	ldr	r3, [pc, #208]	@ (8001228 <HAL_RCC_OscConfig+0x244>)
 8001156:	2201      	movs	r2, #1
 8001158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800115a:	f7ff fcb9 	bl	8000ad0 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001162:	f7ff fcb5 	bl	8000ad0 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e1a8      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001174:	4b2b      	ldr	r3, [pc, #172]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0f0      	beq.n	8001162 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001180:	4b28      	ldr	r3, [pc, #160]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	4925      	ldr	r1, [pc, #148]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001190:	4313      	orrs	r3, r2
 8001192:	600b      	str	r3, [r1, #0]
 8001194:	e015      	b.n	80011c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001196:	4b24      	ldr	r3, [pc, #144]	@ (8001228 <HAL_RCC_OscConfig+0x244>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119c:	f7ff fc98 	bl	8000ad0 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a4:	f7ff fc94 	bl	8000ad0 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e187      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d036      	beq.n	800123c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d016      	beq.n	8001204 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <HAL_RCC_OscConfig+0x248>)
 80011d8:	2201      	movs	r2, #1
 80011da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011dc:	f7ff fc78 	bl	8000ad0 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e4:	f7ff fc74 	bl	8000ad0 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e167      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 80011f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0x200>
 8001202:	e01b      	b.n	800123c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001204:	4b09      	ldr	r3, [pc, #36]	@ (800122c <HAL_RCC_OscConfig+0x248>)
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120a:	f7ff fc61 	bl	8000ad0 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001210:	e00e      	b.n	8001230 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001212:	f7ff fc5d 	bl	8000ad0 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d907      	bls.n	8001230 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e150      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
 8001224:	40023800 	.word	0x40023800
 8001228:	42470000 	.word	0x42470000
 800122c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001230:	4b88      	ldr	r3, [pc, #544]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 8001232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1ea      	bne.n	8001212 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 8097 	beq.w	8001378 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800124e:	4b81      	ldr	r3, [pc, #516]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10f      	bne.n	800127a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	4b7d      	ldr	r3, [pc, #500]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	4a7c      	ldr	r2, [pc, #496]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001268:	6413      	str	r3, [r2, #64]	@ 0x40
 800126a:	4b7a      	ldr	r3, [pc, #488]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001276:	2301      	movs	r3, #1
 8001278:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127a:	4b77      	ldr	r3, [pc, #476]	@ (8001458 <HAL_RCC_OscConfig+0x474>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001282:	2b00      	cmp	r3, #0
 8001284:	d118      	bne.n	80012b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001286:	4b74      	ldr	r3, [pc, #464]	@ (8001458 <HAL_RCC_OscConfig+0x474>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a73      	ldr	r2, [pc, #460]	@ (8001458 <HAL_RCC_OscConfig+0x474>)
 800128c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001292:	f7ff fc1d 	bl	8000ad0 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800129a:	f7ff fc19 	bl	8000ad0 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e10c      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001458 <HAL_RCC_OscConfig+0x474>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0f0      	beq.n	800129a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d106      	bne.n	80012ce <HAL_RCC_OscConfig+0x2ea>
 80012c0:	4b64      	ldr	r3, [pc, #400]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80012c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012c4:	4a63      	ldr	r2, [pc, #396]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80012cc:	e01c      	b.n	8001308 <HAL_RCC_OscConfig+0x324>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b05      	cmp	r3, #5
 80012d4:	d10c      	bne.n	80012f0 <HAL_RCC_OscConfig+0x30c>
 80012d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80012d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012da:	4a5e      	ldr	r2, [pc, #376]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80012e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80012e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80012ee:	e00b      	b.n	8001308 <HAL_RCC_OscConfig+0x324>
 80012f0:	4b58      	ldr	r3, [pc, #352]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80012f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012f4:	4a57      	ldr	r2, [pc, #348]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80012f6:	f023 0301 	bic.w	r3, r3, #1
 80012fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80012fc:	4b55      	ldr	r3, [pc, #340]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80012fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001300:	4a54      	ldr	r2, [pc, #336]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 8001302:	f023 0304 	bic.w	r3, r3, #4
 8001306:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d015      	beq.n	800133c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001310:	f7ff fbde 	bl	8000ad0 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001316:	e00a      	b.n	800132e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001318:	f7ff fbda 	bl	8000ad0 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001326:	4293      	cmp	r3, r2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e0cb      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132e:	4b49      	ldr	r3, [pc, #292]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 8001330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0ee      	beq.n	8001318 <HAL_RCC_OscConfig+0x334>
 800133a:	e014      	b.n	8001366 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133c:	f7ff fbc8 	bl	8000ad0 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001342:	e00a      	b.n	800135a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001344:	f7ff fbc4 	bl	8000ad0 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001352:	4293      	cmp	r3, r2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e0b5      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800135a:	4b3e      	ldr	r3, [pc, #248]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 800135c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1ee      	bne.n	8001344 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d105      	bne.n	8001378 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800136c:	4b39      	ldr	r3, [pc, #228]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001370:	4a38      	ldr	r2, [pc, #224]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 8001372:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001376:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 80a1 	beq.w	80014c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001382:	4b34      	ldr	r3, [pc, #208]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b08      	cmp	r3, #8
 800138c:	d05c      	beq.n	8001448 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	2b02      	cmp	r3, #2
 8001394:	d141      	bne.n	800141a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001396:	4b31      	ldr	r3, [pc, #196]	@ (800145c <HAL_RCC_OscConfig+0x478>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fb98 	bl	8000ad0 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a4:	f7ff fb94 	bl	8000ad0 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e087      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b6:	4b27      	ldr	r3, [pc, #156]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69da      	ldr	r2, [r3, #28]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d0:	019b      	lsls	r3, r3, #6
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d8:	085b      	lsrs	r3, r3, #1
 80013da:	3b01      	subs	r3, #1
 80013dc:	041b      	lsls	r3, r3, #16
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013e4:	061b      	lsls	r3, r3, #24
 80013e6:	491b      	ldr	r1, [pc, #108]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <HAL_RCC_OscConfig+0x478>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f2:	f7ff fb6d 	bl	8000ad0 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fa:	f7ff fb69 	bl	8000ad0 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e05c      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140c:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x416>
 8001418:	e054      	b.n	80014c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <HAL_RCC_OscConfig+0x478>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fb56 	bl	8000ad0 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001428:	f7ff fb52 	bl	8000ad0 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e045      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x444>
 8001446:	e03d      	b.n	80014c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d107      	bne.n	8001460 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e038      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
 8001454:	40023800 	.word	0x40023800
 8001458:	40007000 	.word	0x40007000
 800145c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001460:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <HAL_RCC_OscConfig+0x4ec>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d028      	beq.n	80014c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001478:	429a      	cmp	r2, r3
 800147a:	d121      	bne.n	80014c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001486:	429a      	cmp	r2, r3
 8001488:	d11a      	bne.n	80014c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001490:	4013      	ands	r3, r2
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001496:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001498:	4293      	cmp	r3, r2
 800149a:	d111      	bne.n	80014c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a6:	085b      	lsrs	r3, r3, #1
 80014a8:	3b01      	subs	r3, #1
 80014aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d107      	bne.n	80014c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014bc:	429a      	cmp	r2, r3
 80014be:	d001      	beq.n	80014c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0cc      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014e8:	4b68      	ldr	r3, [pc, #416]	@ (800168c <HAL_RCC_ClockConfig+0x1b8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d90c      	bls.n	8001510 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f6:	4b65      	ldr	r3, [pc, #404]	@ (800168c <HAL_RCC_ClockConfig+0x1b8>)
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fe:	4b63      	ldr	r3, [pc, #396]	@ (800168c <HAL_RCC_ClockConfig+0x1b8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e0b8      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d020      	beq.n	800155e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001528:	4b59      	ldr	r3, [pc, #356]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	4a58      	ldr	r2, [pc, #352]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001532:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001540:	4b53      	ldr	r3, [pc, #332]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	4a52      	ldr	r2, [pc, #328]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800154a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800154c:	4b50      	ldr	r3, [pc, #320]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	494d      	ldr	r1, [pc, #308]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	4313      	orrs	r3, r2
 800155c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d044      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d107      	bne.n	8001582 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	4b47      	ldr	r3, [pc, #284]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d119      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e07f      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d003      	beq.n	8001592 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158e:	2b03      	cmp	r3, #3
 8001590:	d107      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001592:	4b3f      	ldr	r3, [pc, #252]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d109      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e06f      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e067      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015b2:	4b37      	ldr	r3, [pc, #220]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f023 0203 	bic.w	r2, r3, #3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	4934      	ldr	r1, [pc, #208]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015c4:	f7ff fa84 	bl	8000ad0 <HAL_GetTick>
 80015c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ca:	e00a      	b.n	80015e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015cc:	f7ff fa80 	bl	8000ad0 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e04f      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 020c 	and.w	r2, r3, #12
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d1eb      	bne.n	80015cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015f4:	4b25      	ldr	r3, [pc, #148]	@ (800168c <HAL_RCC_ClockConfig+0x1b8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d20c      	bcs.n	800161c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	4b22      	ldr	r3, [pc, #136]	@ (800168c <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800160a:	4b20      	ldr	r3, [pc, #128]	@ (800168c <HAL_RCC_ClockConfig+0x1b8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d001      	beq.n	800161c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e032      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d008      	beq.n	800163a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001628:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	4916      	ldr	r1, [pc, #88]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	4313      	orrs	r3, r2
 8001638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d009      	beq.n	800165a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001646:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	490e      	ldr	r1, [pc, #56]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	4313      	orrs	r3, r2
 8001658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800165a:	f000 f821 	bl	80016a0 <HAL_RCC_GetSysClockFreq>
 800165e:	4602      	mov	r2, r0
 8001660:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	490a      	ldr	r1, [pc, #40]	@ (8001694 <HAL_RCC_ClockConfig+0x1c0>)
 800166c:	5ccb      	ldrb	r3, [r1, r3]
 800166e:	fa22 f303 	lsr.w	r3, r2, r3
 8001672:	4a09      	ldr	r2, [pc, #36]	@ (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001676:	4b09      	ldr	r3, [pc, #36]	@ (800169c <HAL_RCC_ClockConfig+0x1c8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff f91c 	bl	80008b8 <HAL_InitTick>

  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40023c00 	.word	0x40023c00
 8001690:	40023800 	.word	0x40023800
 8001694:	08004ecc 	.word	0x08004ecc
 8001698:	20000000 	.word	0x20000000
 800169c:	20000004 	.word	0x20000004

080016a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016a4:	b094      	sub	sp, #80	@ 0x50
 80016a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016b8:	4b79      	ldr	r3, [pc, #484]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 030c 	and.w	r3, r3, #12
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d00d      	beq.n	80016e0 <HAL_RCC_GetSysClockFreq+0x40>
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	f200 80e1 	bhi.w	800188c <HAL_RCC_GetSysClockFreq+0x1ec>
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d002      	beq.n	80016d4 <HAL_RCC_GetSysClockFreq+0x34>
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d003      	beq.n	80016da <HAL_RCC_GetSysClockFreq+0x3a>
 80016d2:	e0db      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016d4:	4b73      	ldr	r3, [pc, #460]	@ (80018a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80016d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80016d8:	e0db      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016da:	4b73      	ldr	r3, [pc, #460]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80016dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80016de:	e0d8      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016e0:	4b6f      	ldr	r3, [pc, #444]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016ea:	4b6d      	ldr	r3, [pc, #436]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d063      	beq.n	80017be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f6:	4b6a      	ldr	r3, [pc, #424]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	099b      	lsrs	r3, r3, #6
 80016fc:	2200      	movs	r2, #0
 80016fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001700:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001708:	633b      	str	r3, [r7, #48]	@ 0x30
 800170a:	2300      	movs	r3, #0
 800170c:	637b      	str	r3, [r7, #52]	@ 0x34
 800170e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001712:	4622      	mov	r2, r4
 8001714:	462b      	mov	r3, r5
 8001716:	f04f 0000 	mov.w	r0, #0
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	0159      	lsls	r1, r3, #5
 8001720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001724:	0150      	lsls	r0, r2, #5
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4621      	mov	r1, r4
 800172c:	1a51      	subs	r1, r2, r1
 800172e:	6139      	str	r1, [r7, #16]
 8001730:	4629      	mov	r1, r5
 8001732:	eb63 0301 	sbc.w	r3, r3, r1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001744:	4659      	mov	r1, fp
 8001746:	018b      	lsls	r3, r1, #6
 8001748:	4651      	mov	r1, sl
 800174a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800174e:	4651      	mov	r1, sl
 8001750:	018a      	lsls	r2, r1, #6
 8001752:	4651      	mov	r1, sl
 8001754:	ebb2 0801 	subs.w	r8, r2, r1
 8001758:	4659      	mov	r1, fp
 800175a:	eb63 0901 	sbc.w	r9, r3, r1
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800176a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800176e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001772:	4690      	mov	r8, r2
 8001774:	4699      	mov	r9, r3
 8001776:	4623      	mov	r3, r4
 8001778:	eb18 0303 	adds.w	r3, r8, r3
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	462b      	mov	r3, r5
 8001780:	eb49 0303 	adc.w	r3, r9, r3
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001792:	4629      	mov	r1, r5
 8001794:	024b      	lsls	r3, r1, #9
 8001796:	4621      	mov	r1, r4
 8001798:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800179c:	4621      	mov	r1, r4
 800179e:	024a      	lsls	r2, r1, #9
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017a6:	2200      	movs	r2, #0
 80017a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80017b0:	f7fe fd0e 	bl	80001d0 <__aeabi_uldivmod>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4613      	mov	r3, r2
 80017ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80017bc:	e058      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017be:	4b38      	ldr	r3, [pc, #224]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	099b      	lsrs	r3, r3, #6
 80017c4:	2200      	movs	r2, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	4611      	mov	r1, r2
 80017ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017ce:	623b      	str	r3, [r7, #32]
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017d8:	4642      	mov	r2, r8
 80017da:	464b      	mov	r3, r9
 80017dc:	f04f 0000 	mov.w	r0, #0
 80017e0:	f04f 0100 	mov.w	r1, #0
 80017e4:	0159      	lsls	r1, r3, #5
 80017e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017ea:	0150      	lsls	r0, r2, #5
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4641      	mov	r1, r8
 80017f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80017f6:	4649      	mov	r1, r9
 80017f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001808:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800180c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001810:	ebb2 040a 	subs.w	r4, r2, sl
 8001814:	eb63 050b 	sbc.w	r5, r3, fp
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	00eb      	lsls	r3, r5, #3
 8001822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001826:	00e2      	lsls	r2, r4, #3
 8001828:	4614      	mov	r4, r2
 800182a:	461d      	mov	r5, r3
 800182c:	4643      	mov	r3, r8
 800182e:	18e3      	adds	r3, r4, r3
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	464b      	mov	r3, r9
 8001834:	eb45 0303 	adc.w	r3, r5, r3
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001846:	4629      	mov	r1, r5
 8001848:	028b      	lsls	r3, r1, #10
 800184a:	4621      	mov	r1, r4
 800184c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001850:	4621      	mov	r1, r4
 8001852:	028a      	lsls	r2, r1, #10
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800185a:	2200      	movs	r2, #0
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	61fa      	str	r2, [r7, #28]
 8001860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001864:	f7fe fcb4 	bl	80001d0 <__aeabi_uldivmod>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4613      	mov	r3, r2
 800186e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001870:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	0c1b      	lsrs	r3, r3, #16
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	3301      	adds	r3, #1
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001880:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001884:	fbb2 f3f3 	udiv	r3, r2, r3
 8001888:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800188a:	e002      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800188c:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800188e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001894:	4618      	mov	r0, r3
 8001896:	3750      	adds	r7, #80	@ 0x50
 8001898:	46bd      	mov	sp, r7
 800189a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	00f42400 	.word	0x00f42400
 80018a8:	007a1200 	.word	0x007a1200

080018ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b0:	4b03      	ldr	r3, [pc, #12]	@ (80018c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000000 	.word	0x20000000

080018c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018c8:	f7ff fff0 	bl	80018ac <HAL_RCC_GetHCLKFreq>
 80018cc:	4602      	mov	r2, r0
 80018ce:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	0a9b      	lsrs	r3, r3, #10
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	4903      	ldr	r1, [pc, #12]	@ (80018e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018da:	5ccb      	ldrb	r3, [r1, r3]
 80018dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40023800 	.word	0x40023800
 80018e8:	08004edc 	.word	0x08004edc

080018ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018f0:	f7ff ffdc 	bl	80018ac <HAL_RCC_GetHCLKFreq>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b05      	ldr	r3, [pc, #20]	@ (800190c <HAL_RCC_GetPCLK2Freq+0x20>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	0b5b      	lsrs	r3, r3, #13
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	4903      	ldr	r1, [pc, #12]	@ (8001910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001902:	5ccb      	ldrb	r3, [r1, r3]
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800
 8001910:	08004edc 	.word	0x08004edc

08001914 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	220f      	movs	r2, #15
 8001922:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001924:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <HAL_RCC_GetClockConfig+0x5c>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 0203 	and.w	r2, r3, #3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001930:	4b0f      	ldr	r3, [pc, #60]	@ (8001970 <HAL_RCC_GetClockConfig+0x5c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800193c:	4b0c      	ldr	r3, [pc, #48]	@ (8001970 <HAL_RCC_GetClockConfig+0x5c>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001948:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <HAL_RCC_GetClockConfig+0x5c>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	08db      	lsrs	r3, r3, #3
 800194e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001956:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <HAL_RCC_GetClockConfig+0x60>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0207 	and.w	r2, r3, #7
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	601a      	str	r2, [r3, #0]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	40023c00 	.word	0x40023c00

08001978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e041      	b.n	8001a0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d106      	bne.n	80019a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 f839 	bl	8001a16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3304      	adds	r3, #4
 80019b4:	4619      	mov	r1, r3
 80019b6:	4610      	mov	r0, r2
 80019b8:	f000 f9c0 	bl	8001d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d001      	beq.n	8001a44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e04e      	b.n	8001ae2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0201 	orr.w	r2, r2, #1
 8001a5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a23      	ldr	r2, [pc, #140]	@ (8001af0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d022      	beq.n	8001aac <HAL_TIM_Base_Start_IT+0x80>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a6e:	d01d      	beq.n	8001aac <HAL_TIM_Base_Start_IT+0x80>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1f      	ldr	r2, [pc, #124]	@ (8001af4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d018      	beq.n	8001aac <HAL_TIM_Base_Start_IT+0x80>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a1e      	ldr	r2, [pc, #120]	@ (8001af8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d013      	beq.n	8001aac <HAL_TIM_Base_Start_IT+0x80>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a1c      	ldr	r2, [pc, #112]	@ (8001afc <HAL_TIM_Base_Start_IT+0xd0>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d00e      	beq.n	8001aac <HAL_TIM_Base_Start_IT+0x80>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a1b      	ldr	r2, [pc, #108]	@ (8001b00 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d009      	beq.n	8001aac <HAL_TIM_Base_Start_IT+0x80>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a19      	ldr	r2, [pc, #100]	@ (8001b04 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d004      	beq.n	8001aac <HAL_TIM_Base_Start_IT+0x80>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a18      	ldr	r2, [pc, #96]	@ (8001b08 <HAL_TIM_Base_Start_IT+0xdc>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d111      	bne.n	8001ad0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d010      	beq.n	8001ae0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0201 	orr.w	r2, r2, #1
 8001acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ace:	e007      	b.n	8001ae0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40010000 	.word	0x40010000
 8001af4:	40000400 	.word	0x40000400
 8001af8:	40000800 	.word	0x40000800
 8001afc:	40000c00 	.word	0x40000c00
 8001b00:	40010400 	.word	0x40010400
 8001b04:	40014000 	.word	0x40014000
 8001b08:	40001800 	.word	0x40001800

08001b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d020      	beq.n	8001b70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d01b      	beq.n	8001b70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f06f 0202 	mvn.w	r2, #2
 8001b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f8d2 	bl	8001d00 <HAL_TIM_IC_CaptureCallback>
 8001b5c:	e005      	b.n	8001b6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f8c4 	bl	8001cec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f8d5 	bl	8001d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d020      	beq.n	8001bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d01b      	beq.n	8001bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f06f 0204 	mvn.w	r2, #4
 8001b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2202      	movs	r2, #2
 8001b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f8ac 	bl	8001d00 <HAL_TIM_IC_CaptureCallback>
 8001ba8:	e005      	b.n	8001bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f89e 	bl	8001cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f8af 	bl	8001d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d020      	beq.n	8001c08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d01b      	beq.n	8001c08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f06f 0208 	mvn.w	r2, #8
 8001bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2204      	movs	r2, #4
 8001bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f886 	bl	8001d00 <HAL_TIM_IC_CaptureCallback>
 8001bf4:	e005      	b.n	8001c02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f878 	bl	8001cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f889 	bl	8001d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f003 0310 	and.w	r3, r3, #16
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d020      	beq.n	8001c54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f003 0310 	and.w	r3, r3, #16
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d01b      	beq.n	8001c54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0210 	mvn.w	r2, #16
 8001c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2208      	movs	r2, #8
 8001c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f860 	bl	8001d00 <HAL_TIM_IC_CaptureCallback>
 8001c40:	e005      	b.n	8001c4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f852 	bl	8001cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f863 	bl	8001d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00c      	beq.n	8001c78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d007      	beq.n	8001c78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0201 	mvn.w	r2, #1
 8001c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7fe fd94 	bl	80007a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00c      	beq.n	8001c9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d007      	beq.n	8001c9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f900 	bl	8001e9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00c      	beq.n	8001cc0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d007      	beq.n	8001cc0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f834 	bl	8001d28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f003 0320 	and.w	r3, r3, #32
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00c      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f003 0320 	and.w	r3, r3, #32
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d007      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f06f 0220 	mvn.w	r2, #32
 8001cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f8d2 	bl	8001e88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a43      	ldr	r2, [pc, #268]	@ (8001e5c <TIM_Base_SetConfig+0x120>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d013      	beq.n	8001d7c <TIM_Base_SetConfig+0x40>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d5a:	d00f      	beq.n	8001d7c <TIM_Base_SetConfig+0x40>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a40      	ldr	r2, [pc, #256]	@ (8001e60 <TIM_Base_SetConfig+0x124>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d00b      	beq.n	8001d7c <TIM_Base_SetConfig+0x40>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a3f      	ldr	r2, [pc, #252]	@ (8001e64 <TIM_Base_SetConfig+0x128>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d007      	beq.n	8001d7c <TIM_Base_SetConfig+0x40>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a3e      	ldr	r2, [pc, #248]	@ (8001e68 <TIM_Base_SetConfig+0x12c>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d003      	beq.n	8001d7c <TIM_Base_SetConfig+0x40>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a3d      	ldr	r2, [pc, #244]	@ (8001e6c <TIM_Base_SetConfig+0x130>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d108      	bne.n	8001d8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a32      	ldr	r2, [pc, #200]	@ (8001e5c <TIM_Base_SetConfig+0x120>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d02b      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d9c:	d027      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a2f      	ldr	r2, [pc, #188]	@ (8001e60 <TIM_Base_SetConfig+0x124>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d023      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a2e      	ldr	r2, [pc, #184]	@ (8001e64 <TIM_Base_SetConfig+0x128>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d01f      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a2d      	ldr	r2, [pc, #180]	@ (8001e68 <TIM_Base_SetConfig+0x12c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d01b      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a2c      	ldr	r2, [pc, #176]	@ (8001e6c <TIM_Base_SetConfig+0x130>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d017      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8001e70 <TIM_Base_SetConfig+0x134>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a2a      	ldr	r2, [pc, #168]	@ (8001e74 <TIM_Base_SetConfig+0x138>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00f      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a29      	ldr	r2, [pc, #164]	@ (8001e78 <TIM_Base_SetConfig+0x13c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00b      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a28      	ldr	r2, [pc, #160]	@ (8001e7c <TIM_Base_SetConfig+0x140>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d007      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a27      	ldr	r2, [pc, #156]	@ (8001e80 <TIM_Base_SetConfig+0x144>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d003      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a26      	ldr	r2, [pc, #152]	@ (8001e84 <TIM_Base_SetConfig+0x148>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d108      	bne.n	8001e00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a0e      	ldr	r2, [pc, #56]	@ (8001e5c <TIM_Base_SetConfig+0x120>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d003      	beq.n	8001e2e <TIM_Base_SetConfig+0xf2>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a10      	ldr	r2, [pc, #64]	@ (8001e6c <TIM_Base_SetConfig+0x130>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d103      	bne.n	8001e36 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f043 0204 	orr.w	r2, r3, #4
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	601a      	str	r2, [r3, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40010000 	.word	0x40010000
 8001e60:	40000400 	.word	0x40000400
 8001e64:	40000800 	.word	0x40000800
 8001e68:	40000c00 	.word	0x40000c00
 8001e6c:	40010400 	.word	0x40010400
 8001e70:	40014000 	.word	0x40014000
 8001e74:	40014400 	.word	0x40014400
 8001e78:	40014800 	.word	0x40014800
 8001e7c:	40001800 	.word	0x40001800
 8001e80:	40001c00 	.word	0x40001c00
 8001e84:	40002000 	.word	0x40002000

08001e88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e042      	b.n	8001f48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7fe fca6 	bl	8000828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2224      	movs	r2, #36	@ 0x24
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ef2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f82b 	bl	8001f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695a      	ldr	r2, [r3, #20]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f54:	b0c0      	sub	sp, #256	@ 0x100
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f6c:	68d9      	ldr	r1, [r3, #12]
 8001f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	ea40 0301 	orr.w	r3, r0, r1
 8001f78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	431a      	orrs	r2, r3
 8001f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001fa8:	f021 010c 	bic.w	r1, r1, #12
 8001fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001fb6:	430b      	orrs	r3, r1
 8001fb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fca:	6999      	ldr	r1, [r3, #24]
 8001fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	ea40 0301 	orr.w	r3, r0, r1
 8001fd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4b8f      	ldr	r3, [pc, #572]	@ (800221c <UART_SetConfig+0x2cc>)
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d005      	beq.n	8001ff0 <UART_SetConfig+0xa0>
 8001fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	4b8d      	ldr	r3, [pc, #564]	@ (8002220 <UART_SetConfig+0x2d0>)
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d104      	bne.n	8001ffa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ff0:	f7ff fc7c 	bl	80018ec <HAL_RCC_GetPCLK2Freq>
 8001ff4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001ff8:	e003      	b.n	8002002 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ffa:	f7ff fc63 	bl	80018c4 <HAL_RCC_GetPCLK1Freq>
 8001ffe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800200c:	f040 810c 	bne.w	8002228 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002014:	2200      	movs	r2, #0
 8002016:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800201a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800201e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002022:	4622      	mov	r2, r4
 8002024:	462b      	mov	r3, r5
 8002026:	1891      	adds	r1, r2, r2
 8002028:	65b9      	str	r1, [r7, #88]	@ 0x58
 800202a:	415b      	adcs	r3, r3
 800202c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800202e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002032:	4621      	mov	r1, r4
 8002034:	eb12 0801 	adds.w	r8, r2, r1
 8002038:	4629      	mov	r1, r5
 800203a:	eb43 0901 	adc.w	r9, r3, r1
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800204a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800204e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002052:	4690      	mov	r8, r2
 8002054:	4699      	mov	r9, r3
 8002056:	4623      	mov	r3, r4
 8002058:	eb18 0303 	adds.w	r3, r8, r3
 800205c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002060:	462b      	mov	r3, r5
 8002062:	eb49 0303 	adc.w	r3, r9, r3
 8002066:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800206a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002076:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800207a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800207e:	460b      	mov	r3, r1
 8002080:	18db      	adds	r3, r3, r3
 8002082:	653b      	str	r3, [r7, #80]	@ 0x50
 8002084:	4613      	mov	r3, r2
 8002086:	eb42 0303 	adc.w	r3, r2, r3
 800208a:	657b      	str	r3, [r7, #84]	@ 0x54
 800208c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002090:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002094:	f7fe f89c 	bl	80001d0 <__aeabi_uldivmod>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4b61      	ldr	r3, [pc, #388]	@ (8002224 <UART_SetConfig+0x2d4>)
 800209e:	fba3 2302 	umull	r2, r3, r3, r2
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	011c      	lsls	r4, r3, #4
 80020a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020aa:	2200      	movs	r2, #0
 80020ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80020b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80020b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80020b8:	4642      	mov	r2, r8
 80020ba:	464b      	mov	r3, r9
 80020bc:	1891      	adds	r1, r2, r2
 80020be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80020c0:	415b      	adcs	r3, r3
 80020c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80020c8:	4641      	mov	r1, r8
 80020ca:	eb12 0a01 	adds.w	sl, r2, r1
 80020ce:	4649      	mov	r1, r9
 80020d0:	eb43 0b01 	adc.w	fp, r3, r1
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020e8:	4692      	mov	sl, r2
 80020ea:	469b      	mov	fp, r3
 80020ec:	4643      	mov	r3, r8
 80020ee:	eb1a 0303 	adds.w	r3, sl, r3
 80020f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80020f6:	464b      	mov	r3, r9
 80020f8:	eb4b 0303 	adc.w	r3, fp, r3
 80020fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800210c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002110:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002114:	460b      	mov	r3, r1
 8002116:	18db      	adds	r3, r3, r3
 8002118:	643b      	str	r3, [r7, #64]	@ 0x40
 800211a:	4613      	mov	r3, r2
 800211c:	eb42 0303 	adc.w	r3, r2, r3
 8002120:	647b      	str	r3, [r7, #68]	@ 0x44
 8002122:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002126:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800212a:	f7fe f851 	bl	80001d0 <__aeabi_uldivmod>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4611      	mov	r1, r2
 8002134:	4b3b      	ldr	r3, [pc, #236]	@ (8002224 <UART_SetConfig+0x2d4>)
 8002136:	fba3 2301 	umull	r2, r3, r3, r1
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	2264      	movs	r2, #100	@ 0x64
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	1acb      	subs	r3, r1, r3
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800214a:	4b36      	ldr	r3, [pc, #216]	@ (8002224 <UART_SetConfig+0x2d4>)
 800214c:	fba3 2302 	umull	r2, r3, r3, r2
 8002150:	095b      	lsrs	r3, r3, #5
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002158:	441c      	add	r4, r3
 800215a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800215e:	2200      	movs	r2, #0
 8002160:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002164:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002168:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800216c:	4642      	mov	r2, r8
 800216e:	464b      	mov	r3, r9
 8002170:	1891      	adds	r1, r2, r2
 8002172:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002174:	415b      	adcs	r3, r3
 8002176:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800217c:	4641      	mov	r1, r8
 800217e:	1851      	adds	r1, r2, r1
 8002180:	6339      	str	r1, [r7, #48]	@ 0x30
 8002182:	4649      	mov	r1, r9
 8002184:	414b      	adcs	r3, r1
 8002186:	637b      	str	r3, [r7, #52]	@ 0x34
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002194:	4659      	mov	r1, fp
 8002196:	00cb      	lsls	r3, r1, #3
 8002198:	4651      	mov	r1, sl
 800219a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800219e:	4651      	mov	r1, sl
 80021a0:	00ca      	lsls	r2, r1, #3
 80021a2:	4610      	mov	r0, r2
 80021a4:	4619      	mov	r1, r3
 80021a6:	4603      	mov	r3, r0
 80021a8:	4642      	mov	r2, r8
 80021aa:	189b      	adds	r3, r3, r2
 80021ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80021b0:	464b      	mov	r3, r9
 80021b2:	460a      	mov	r2, r1
 80021b4:	eb42 0303 	adc.w	r3, r2, r3
 80021b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80021c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80021cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80021d0:	460b      	mov	r3, r1
 80021d2:	18db      	adds	r3, r3, r3
 80021d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021d6:	4613      	mov	r3, r2
 80021d8:	eb42 0303 	adc.w	r3, r2, r3
 80021dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80021e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80021e6:	f7fd fff3 	bl	80001d0 <__aeabi_uldivmod>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002224 <UART_SetConfig+0x2d4>)
 80021f0:	fba3 1302 	umull	r1, r3, r3, r2
 80021f4:	095b      	lsrs	r3, r3, #5
 80021f6:	2164      	movs	r1, #100	@ 0x64
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	3332      	adds	r3, #50	@ 0x32
 8002202:	4a08      	ldr	r2, [pc, #32]	@ (8002224 <UART_SetConfig+0x2d4>)
 8002204:	fba2 2303 	umull	r2, r3, r2, r3
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	f003 0207 	and.w	r2, r3, #7
 800220e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4422      	add	r2, r4
 8002216:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002218:	e106      	b.n	8002428 <UART_SetConfig+0x4d8>
 800221a:	bf00      	nop
 800221c:	40011000 	.word	0x40011000
 8002220:	40011400 	.word	0x40011400
 8002224:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800222c:	2200      	movs	r2, #0
 800222e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002232:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002236:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800223a:	4642      	mov	r2, r8
 800223c:	464b      	mov	r3, r9
 800223e:	1891      	adds	r1, r2, r2
 8002240:	6239      	str	r1, [r7, #32]
 8002242:	415b      	adcs	r3, r3
 8002244:	627b      	str	r3, [r7, #36]	@ 0x24
 8002246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800224a:	4641      	mov	r1, r8
 800224c:	1854      	adds	r4, r2, r1
 800224e:	4649      	mov	r1, r9
 8002250:	eb43 0501 	adc.w	r5, r3, r1
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	00eb      	lsls	r3, r5, #3
 800225e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002262:	00e2      	lsls	r2, r4, #3
 8002264:	4614      	mov	r4, r2
 8002266:	461d      	mov	r5, r3
 8002268:	4643      	mov	r3, r8
 800226a:	18e3      	adds	r3, r4, r3
 800226c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002270:	464b      	mov	r3, r9
 8002272:	eb45 0303 	adc.w	r3, r5, r3
 8002276:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800227a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002286:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002296:	4629      	mov	r1, r5
 8002298:	008b      	lsls	r3, r1, #2
 800229a:	4621      	mov	r1, r4
 800229c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022a0:	4621      	mov	r1, r4
 80022a2:	008a      	lsls	r2, r1, #2
 80022a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80022a8:	f7fd ff92 	bl	80001d0 <__aeabi_uldivmod>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4b60      	ldr	r3, [pc, #384]	@ (8002434 <UART_SetConfig+0x4e4>)
 80022b2:	fba3 2302 	umull	r2, r3, r3, r2
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	011c      	lsls	r4, r3, #4
 80022ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022be:	2200      	movs	r2, #0
 80022c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80022c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80022c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80022cc:	4642      	mov	r2, r8
 80022ce:	464b      	mov	r3, r9
 80022d0:	1891      	adds	r1, r2, r2
 80022d2:	61b9      	str	r1, [r7, #24]
 80022d4:	415b      	adcs	r3, r3
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022dc:	4641      	mov	r1, r8
 80022de:	1851      	adds	r1, r2, r1
 80022e0:	6139      	str	r1, [r7, #16]
 80022e2:	4649      	mov	r1, r9
 80022e4:	414b      	adcs	r3, r1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022f4:	4659      	mov	r1, fp
 80022f6:	00cb      	lsls	r3, r1, #3
 80022f8:	4651      	mov	r1, sl
 80022fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022fe:	4651      	mov	r1, sl
 8002300:	00ca      	lsls	r2, r1, #3
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	4603      	mov	r3, r0
 8002308:	4642      	mov	r2, r8
 800230a:	189b      	adds	r3, r3, r2
 800230c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002310:	464b      	mov	r3, r9
 8002312:	460a      	mov	r2, r1
 8002314:	eb42 0303 	adc.w	r3, r2, r3
 8002318:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800231c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002326:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002334:	4649      	mov	r1, r9
 8002336:	008b      	lsls	r3, r1, #2
 8002338:	4641      	mov	r1, r8
 800233a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800233e:	4641      	mov	r1, r8
 8002340:	008a      	lsls	r2, r1, #2
 8002342:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002346:	f7fd ff43 	bl	80001d0 <__aeabi_uldivmod>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4611      	mov	r1, r2
 8002350:	4b38      	ldr	r3, [pc, #224]	@ (8002434 <UART_SetConfig+0x4e4>)
 8002352:	fba3 2301 	umull	r2, r3, r3, r1
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	2264      	movs	r2, #100	@ 0x64
 800235a:	fb02 f303 	mul.w	r3, r2, r3
 800235e:	1acb      	subs	r3, r1, r3
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	3332      	adds	r3, #50	@ 0x32
 8002364:	4a33      	ldr	r2, [pc, #204]	@ (8002434 <UART_SetConfig+0x4e4>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002370:	441c      	add	r4, r3
 8002372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002376:	2200      	movs	r2, #0
 8002378:	673b      	str	r3, [r7, #112]	@ 0x70
 800237a:	677a      	str	r2, [r7, #116]	@ 0x74
 800237c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002380:	4642      	mov	r2, r8
 8002382:	464b      	mov	r3, r9
 8002384:	1891      	adds	r1, r2, r2
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	415b      	adcs	r3, r3
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002390:	4641      	mov	r1, r8
 8002392:	1851      	adds	r1, r2, r1
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	4649      	mov	r1, r9
 8002398:	414b      	adcs	r3, r1
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023a8:	4659      	mov	r1, fp
 80023aa:	00cb      	lsls	r3, r1, #3
 80023ac:	4651      	mov	r1, sl
 80023ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023b2:	4651      	mov	r1, sl
 80023b4:	00ca      	lsls	r2, r1, #3
 80023b6:	4610      	mov	r0, r2
 80023b8:	4619      	mov	r1, r3
 80023ba:	4603      	mov	r3, r0
 80023bc:	4642      	mov	r2, r8
 80023be:	189b      	adds	r3, r3, r2
 80023c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023c2:	464b      	mov	r3, r9
 80023c4:	460a      	mov	r2, r1
 80023c6:	eb42 0303 	adc.w	r3, r2, r3
 80023ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80023cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80023d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80023e4:	4649      	mov	r1, r9
 80023e6:	008b      	lsls	r3, r1, #2
 80023e8:	4641      	mov	r1, r8
 80023ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023ee:	4641      	mov	r1, r8
 80023f0:	008a      	lsls	r2, r1, #2
 80023f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80023f6:	f7fd feeb 	bl	80001d0 <__aeabi_uldivmod>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002434 <UART_SetConfig+0x4e4>)
 8002400:	fba3 1302 	umull	r1, r3, r3, r2
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	2164      	movs	r1, #100	@ 0x64
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	3332      	adds	r3, #50	@ 0x32
 8002412:	4a08      	ldr	r2, [pc, #32]	@ (8002434 <UART_SetConfig+0x4e4>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	f003 020f 	and.w	r2, r3, #15
 800241e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4422      	add	r2, r4
 8002426:	609a      	str	r2, [r3, #8]
}
 8002428:	bf00      	nop
 800242a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800242e:	46bd      	mov	sp, r7
 8002430:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002434:	51eb851f 	.word	0x51eb851f

08002438 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800243c:	4b05      	ldr	r3, [pc, #20]	@ (8002454 <SysTick_Handler+0x1c>)
 800243e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002440:	f001 fc56 	bl	8003cf0 <xTaskGetSchedulerState>
 8002444:	4603      	mov	r3, r0
 8002446:	2b01      	cmp	r3, #1
 8002448:	d001      	beq.n	800244e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800244a:	f002 fa4d 	bl	80048e8 <xPortSysTickHandler>
  }
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	e000e010 	.word	0xe000e010

08002458 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4a07      	ldr	r2, [pc, #28]	@ (8002484 <vApplicationGetIdleTaskMemory+0x2c>)
 8002468:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	4a06      	ldr	r2, [pc, #24]	@ (8002488 <vApplicationGetIdleTaskMemory+0x30>)
 800246e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2280      	movs	r2, #128	@ 0x80
 8002474:	601a      	str	r2, [r3, #0]
}
 8002476:	bf00      	nop
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	200000dc 	.word	0x200000dc
 8002488:	20000138 	.word	0x20000138

0800248c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4a07      	ldr	r2, [pc, #28]	@ (80024b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800249c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	4a06      	ldr	r2, [pc, #24]	@ (80024bc <vApplicationGetTimerTaskMemory+0x30>)
 80024a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024aa:	601a      	str	r2, [r3, #0]
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	20000338 	.word	0x20000338
 80024bc:	20000394 	.word	0x20000394

080024c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f103 0208 	add.w	r2, r3, #8
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f04f 32ff 	mov.w	r2, #4294967295
 80024d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f103 0208 	add.w	r2, r3, #8
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f103 0208 	add.w	r2, r3, #8
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800251a:	b480      	push	{r7}
 800251c:	b085      	sub	sp, #20
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	601a      	str	r2, [r3, #0]
}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002562:	b480      	push	{r7}
 8002564:	b085      	sub	sp, #20
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d103      	bne.n	8002582 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	e00c      	b.n	800259c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3308      	adds	r3, #8
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	e002      	b.n	8002590 <vListInsert+0x2e>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	429a      	cmp	r2, r3
 800259a:	d2f6      	bcs.n	800258a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	601a      	str	r2, [r3, #0]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6892      	ldr	r2, [r2, #8]
 80025ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6852      	ldr	r2, [r2, #4]
 80025f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d103      	bne.n	8002608 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	1e5a      	subs	r2, r3, #1
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10b      	bne.n	8002654 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800263c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002640:	f383 8811 	msr	BASEPRI, r3
 8002644:	f3bf 8f6f 	isb	sy
 8002648:	f3bf 8f4f 	dsb	sy
 800264c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800264e:	bf00      	nop
 8002650:	bf00      	nop
 8002652:	e7fd      	b.n	8002650 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002654:	f002 f8b8 	bl	80047c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002660:	68f9      	ldr	r1, [r7, #12]
 8002662:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	441a      	add	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002684:	3b01      	subs	r3, #1
 8002686:	68f9      	ldr	r1, [r7, #12]
 8002688:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800268a:	fb01 f303 	mul.w	r3, r1, r3
 800268e:	441a      	add	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	22ff      	movs	r2, #255	@ 0xff
 8002698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	22ff      	movs	r2, #255	@ 0xff
 80026a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d114      	bne.n	80026d4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d01a      	beq.n	80026e8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3310      	adds	r3, #16
 80026b6:	4618      	mov	r0, r3
 80026b8:	f001 f95a 	bl	8003970 <xTaskRemoveFromEventList>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d012      	beq.n	80026e8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80026c2:	4b0d      	ldr	r3, [pc, #52]	@ (80026f8 <xQueueGenericReset+0xd0>)
 80026c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	f3bf 8f6f 	isb	sy
 80026d2:	e009      	b.n	80026e8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	3310      	adds	r3, #16
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff fef1 	bl	80024c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	3324      	adds	r3, #36	@ 0x24
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff feec 	bl	80024c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80026e8:	f002 f8a0 	bl	800482c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80026ec:	2301      	movs	r3, #1
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	e000ed04 	.word	0xe000ed04

080026fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08e      	sub	sp, #56	@ 0x38
 8002700:	af02      	add	r7, sp, #8
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10b      	bne.n	8002728 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002722:	bf00      	nop
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10b      	bne.n	8002746 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800272e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002732:	f383 8811 	msr	BASEPRI, r3
 8002736:	f3bf 8f6f 	isb	sy
 800273a:	f3bf 8f4f 	dsb	sy
 800273e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	e7fd      	b.n	8002742 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <xQueueGenericCreateStatic+0x56>
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <xQueueGenericCreateStatic+0x5a>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <xQueueGenericCreateStatic+0x5c>
 8002756:	2300      	movs	r3, #0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10b      	bne.n	8002774 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800275c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002760:	f383 8811 	msr	BASEPRI, r3
 8002764:	f3bf 8f6f 	isb	sy
 8002768:	f3bf 8f4f 	dsb	sy
 800276c:	623b      	str	r3, [r7, #32]
}
 800276e:	bf00      	nop
 8002770:	bf00      	nop
 8002772:	e7fd      	b.n	8002770 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d102      	bne.n	8002780 <xQueueGenericCreateStatic+0x84>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <xQueueGenericCreateStatic+0x88>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <xQueueGenericCreateStatic+0x8a>
 8002784:	2300      	movs	r3, #0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10b      	bne.n	80027a2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800278a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800278e:	f383 8811 	msr	BASEPRI, r3
 8002792:	f3bf 8f6f 	isb	sy
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	61fb      	str	r3, [r7, #28]
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	e7fd      	b.n	800279e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80027a2:	2350      	movs	r3, #80	@ 0x50
 80027a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b50      	cmp	r3, #80	@ 0x50
 80027aa:	d00b      	beq.n	80027c4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80027ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027b0:	f383 8811 	msr	BASEPRI, r3
 80027b4:	f3bf 8f6f 	isb	sy
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	61bb      	str	r3, [r7, #24]
}
 80027be:	bf00      	nop
 80027c0:	bf00      	nop
 80027c2:	e7fd      	b.n	80027c0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80027c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80027ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00d      	beq.n	80027ec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80027d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80027d8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80027dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	4613      	mov	r3, r2
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f805 	bl	80027f6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80027ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3730      	adds	r7, #48	@ 0x30
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
 8002802:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d103      	bne.n	8002812 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	e002      	b.n	8002818 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002824:	2101      	movs	r1, #1
 8002826:	69b8      	ldr	r0, [r7, #24]
 8002828:	f7ff fefe 	bl	8002628 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08e      	sub	sp, #56	@ 0x38
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800284a:	2300      	movs	r3, #0
 800284c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10b      	bne.n	8002870 <xQueueGenericSend+0x34>
	__asm volatile
 8002858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800285c:	f383 8811 	msr	BASEPRI, r3
 8002860:	f3bf 8f6f 	isb	sy
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800286a:	bf00      	nop
 800286c:	bf00      	nop
 800286e:	e7fd      	b.n	800286c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d103      	bne.n	800287e <xQueueGenericSend+0x42>
 8002876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <xQueueGenericSend+0x46>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <xQueueGenericSend+0x48>
 8002882:	2300      	movs	r3, #0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10b      	bne.n	80028a0 <xQueueGenericSend+0x64>
	__asm volatile
 8002888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800288c:	f383 8811 	msr	BASEPRI, r3
 8002890:	f3bf 8f6f 	isb	sy
 8002894:	f3bf 8f4f 	dsb	sy
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800289a:	bf00      	nop
 800289c:	bf00      	nop
 800289e:	e7fd      	b.n	800289c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d103      	bne.n	80028ae <xQueueGenericSend+0x72>
 80028a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <xQueueGenericSend+0x76>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <xQueueGenericSend+0x78>
 80028b2:	2300      	movs	r3, #0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10b      	bne.n	80028d0 <xQueueGenericSend+0x94>
	__asm volatile
 80028b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028bc:	f383 8811 	msr	BASEPRI, r3
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	623b      	str	r3, [r7, #32]
}
 80028ca:	bf00      	nop
 80028cc:	bf00      	nop
 80028ce:	e7fd      	b.n	80028cc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028d0:	f001 fa0e 	bl	8003cf0 <xTaskGetSchedulerState>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d102      	bne.n	80028e0 <xQueueGenericSend+0xa4>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <xQueueGenericSend+0xa8>
 80028e0:	2301      	movs	r3, #1
 80028e2:	e000      	b.n	80028e6 <xQueueGenericSend+0xaa>
 80028e4:	2300      	movs	r3, #0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10b      	bne.n	8002902 <xQueueGenericSend+0xc6>
	__asm volatile
 80028ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ee:	f383 8811 	msr	BASEPRI, r3
 80028f2:	f3bf 8f6f 	isb	sy
 80028f6:	f3bf 8f4f 	dsb	sy
 80028fa:	61fb      	str	r3, [r7, #28]
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	e7fd      	b.n	80028fe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002902:	f001 ff61 	bl	80047c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002908:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800290a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290e:	429a      	cmp	r2, r3
 8002910:	d302      	bcc.n	8002918 <xQueueGenericSend+0xdc>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b02      	cmp	r3, #2
 8002916:	d129      	bne.n	800296c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	68b9      	ldr	r1, [r7, #8]
 800291c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800291e:	f000 fa0f 	bl	8002d40 <prvCopyDataToQueue>
 8002922:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002928:	2b00      	cmp	r3, #0
 800292a:	d010      	beq.n	800294e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800292c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292e:	3324      	adds	r3, #36	@ 0x24
 8002930:	4618      	mov	r0, r3
 8002932:	f001 f81d 	bl	8003970 <xTaskRemoveFromEventList>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d013      	beq.n	8002964 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800293c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a3c <xQueueGenericSend+0x200>)
 800293e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	f3bf 8f4f 	dsb	sy
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	e00a      	b.n	8002964 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800294e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002954:	4b39      	ldr	r3, [pc, #228]	@ (8002a3c <xQueueGenericSend+0x200>)
 8002956:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002964:	f001 ff62 	bl	800482c <vPortExitCritical>
				return pdPASS;
 8002968:	2301      	movs	r3, #1
 800296a:	e063      	b.n	8002a34 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d103      	bne.n	800297a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002972:	f001 ff5b 	bl	800482c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002976:	2300      	movs	r3, #0
 8002978:	e05c      	b.n	8002a34 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800297a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800297c:	2b00      	cmp	r3, #0
 800297e:	d106      	bne.n	800298e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	4618      	mov	r0, r3
 8002986:	f001 f857 	bl	8003a38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800298a:	2301      	movs	r3, #1
 800298c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800298e:	f001 ff4d 	bl	800482c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002992:	f000 fdc7 	bl	8003524 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002996:	f001 ff17 	bl	80047c8 <vPortEnterCritical>
 800299a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029a0:	b25b      	sxtb	r3, r3
 80029a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a6:	d103      	bne.n	80029b0 <xQueueGenericSend+0x174>
 80029a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029b6:	b25b      	sxtb	r3, r3
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d103      	bne.n	80029c6 <xQueueGenericSend+0x18a>
 80029be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029c6:	f001 ff31 	bl	800482c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029ca:	1d3a      	adds	r2, r7, #4
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	4611      	mov	r1, r2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 f846 	bl	8003a64 <xTaskCheckForTimeOut>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d124      	bne.n	8002a28 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80029de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029e0:	f000 faa6 	bl	8002f30 <prvIsQueueFull>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d018      	beq.n	8002a1c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ec:	3310      	adds	r3, #16
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4611      	mov	r1, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 ff6a 	bl	80038cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80029f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029fa:	f000 fa31 	bl	8002e60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80029fe:	f000 fd9f 	bl	8003540 <xTaskResumeAll>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f47f af7c 	bne.w	8002902 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a3c <xQueueGenericSend+0x200>)
 8002a0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	f3bf 8f4f 	dsb	sy
 8002a16:	f3bf 8f6f 	isb	sy
 8002a1a:	e772      	b.n	8002902 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a1e:	f000 fa1f 	bl	8002e60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a22:	f000 fd8d 	bl	8003540 <xTaskResumeAll>
 8002a26:	e76c      	b.n	8002902 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002a28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a2a:	f000 fa19 	bl	8002e60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a2e:	f000 fd87 	bl	8003540 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002a32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3738      	adds	r7, #56	@ 0x38
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	e000ed04 	.word	0xe000ed04

08002a40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b090      	sub	sp, #64	@ 0x40
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10b      	bne.n	8002a70 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002a6a:	bf00      	nop
 8002a6c:	bf00      	nop
 8002a6e:	e7fd      	b.n	8002a6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d103      	bne.n	8002a7e <xQueueGenericSendFromISR+0x3e>
 8002a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <xQueueGenericSendFromISR+0x42>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <xQueueGenericSendFromISR+0x44>
 8002a82:	2300      	movs	r3, #0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10b      	bne.n	8002aa0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a8c:	f383 8811 	msr	BASEPRI, r3
 8002a90:	f3bf 8f6f 	isb	sy
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a9a:	bf00      	nop
 8002a9c:	bf00      	nop
 8002a9e:	e7fd      	b.n	8002a9c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d103      	bne.n	8002aae <xQueueGenericSendFromISR+0x6e>
 8002aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <xQueueGenericSendFromISR+0x72>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <xQueueGenericSendFromISR+0x74>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10b      	bne.n	8002ad0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002abc:	f383 8811 	msr	BASEPRI, r3
 8002ac0:	f3bf 8f6f 	isb	sy
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	623b      	str	r3, [r7, #32]
}
 8002aca:	bf00      	nop
 8002acc:	bf00      	nop
 8002ace:	e7fd      	b.n	8002acc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ad0:	f001 ff5a 	bl	8004988 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ad4:	f3ef 8211 	mrs	r2, BASEPRI
 8002ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	61fa      	str	r2, [r7, #28]
 8002aea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002aec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002aee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d302      	bcc.n	8002b02 <xQueueGenericSendFromISR+0xc2>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d12f      	bne.n	8002b62 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002b18:	f000 f912 	bl	8002d40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002b1c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d112      	bne.n	8002b4c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d016      	beq.n	8002b5c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b30:	3324      	adds	r3, #36	@ 0x24
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 ff1c 	bl	8003970 <xTaskRemoveFromEventList>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00e      	beq.n	8002b5c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00b      	beq.n	8002b5c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	e007      	b.n	8002b5c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b50:	3301      	adds	r3, #1
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	b25a      	sxtb	r2, r3
 8002b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002b60:	e001      	b.n	8002b66 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b68:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3740      	adds	r7, #64	@ 0x40
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08c      	sub	sp, #48	@ 0x30
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10b      	bne.n	8002bae <xQueueReceive+0x32>
	__asm volatile
 8002b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b9a:	f383 8811 	msr	BASEPRI, r3
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	623b      	str	r3, [r7, #32]
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	e7fd      	b.n	8002baa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d103      	bne.n	8002bbc <xQueueReceive+0x40>
 8002bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <xQueueReceive+0x44>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <xQueueReceive+0x46>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10b      	bne.n	8002bde <xQueueReceive+0x62>
	__asm volatile
 8002bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bca:	f383 8811 	msr	BASEPRI, r3
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	61fb      	str	r3, [r7, #28]
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	e7fd      	b.n	8002bda <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bde:	f001 f887 	bl	8003cf0 <xTaskGetSchedulerState>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d102      	bne.n	8002bee <xQueueReceive+0x72>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <xQueueReceive+0x76>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <xQueueReceive+0x78>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10b      	bne.n	8002c10 <xQueueReceive+0x94>
	__asm volatile
 8002bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	61bb      	str	r3, [r7, #24]
}
 8002c0a:	bf00      	nop
 8002c0c:	bf00      	nop
 8002c0e:	e7fd      	b.n	8002c0c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c10:	f001 fdda 	bl	80047c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c18:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d01f      	beq.n	8002c60 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c24:	f000 f8f6 	bl	8002e14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2a:	1e5a      	subs	r2, r3, #1
 8002c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00f      	beq.n	8002c58 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c3a:	3310      	adds	r3, #16
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fe97 	bl	8003970 <xTaskRemoveFromEventList>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d007      	beq.n	8002c58 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002c48:	4b3c      	ldr	r3, [pc, #240]	@ (8002d3c <xQueueReceive+0x1c0>)
 8002c4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002c58:	f001 fde8 	bl	800482c <vPortExitCritical>
				return pdPASS;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e069      	b.n	8002d34 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d103      	bne.n	8002c6e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c66:	f001 fde1 	bl	800482c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e062      	b.n	8002d34 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d106      	bne.n	8002c82 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c74:	f107 0310 	add.w	r3, r7, #16
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 fedd 	bl	8003a38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c82:	f001 fdd3 	bl	800482c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c86:	f000 fc4d 	bl	8003524 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c8a:	f001 fd9d 	bl	80047c8 <vPortEnterCritical>
 8002c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c94:	b25b      	sxtb	r3, r3
 8002c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9a:	d103      	bne.n	8002ca4 <xQueueReceive+0x128>
 8002c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002caa:	b25b      	sxtb	r3, r3
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d103      	bne.n	8002cba <xQueueReceive+0x13e>
 8002cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cba:	f001 fdb7 	bl	800482c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cbe:	1d3a      	adds	r2, r7, #4
 8002cc0:	f107 0310 	add.w	r3, r7, #16
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fecc 	bl	8003a64 <xTaskCheckForTimeOut>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d123      	bne.n	8002d1a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cd4:	f000 f916 	bl	8002f04 <prvIsQueueEmpty>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d017      	beq.n	8002d0e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce0:	3324      	adds	r3, #36	@ 0x24
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fdf0 	bl	80038cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002cec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cee:	f000 f8b7 	bl	8002e60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002cf2:	f000 fc25 	bl	8003540 <xTaskResumeAll>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d189      	bne.n	8002c10 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8002d3c <xQueueReceive+0x1c0>)
 8002cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	e780      	b.n	8002c10 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d10:	f000 f8a6 	bl	8002e60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d14:	f000 fc14 	bl	8003540 <xTaskResumeAll>
 8002d18:	e77a      	b.n	8002c10 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002d1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d1c:	f000 f8a0 	bl	8002e60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d20:	f000 fc0e 	bl	8003540 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d26:	f000 f8ed 	bl	8002f04 <prvIsQueueEmpty>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f43f af6f 	beq.w	8002c10 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002d32:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3730      	adds	r7, #48	@ 0x30
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	e000ed04 	.word	0xe000ed04

08002d40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10d      	bne.n	8002d7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d14d      	bne.n	8002e02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 ffde 	bl	8003d2c <xTaskPriorityDisinherit>
 8002d70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	e043      	b.n	8002e02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d119      	bne.n	8002db4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6858      	ldr	r0, [r3, #4]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	461a      	mov	r2, r3
 8002d8a:	68b9      	ldr	r1, [r7, #8]
 8002d8c:	f002 f858 	bl	8004e40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	441a      	add	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d32b      	bcc.n	8002e02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	605a      	str	r2, [r3, #4]
 8002db2:	e026      	b.n	8002e02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	68d8      	ldr	r0, [r3, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	f002 f83e 	bl	8004e40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dcc:	425b      	negs	r3, r3
 8002dce:	441a      	add	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d207      	bcs.n	8002df0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	425b      	negs	r3, r3
 8002dea:	441a      	add	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d105      	bne.n	8002e02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002e0a:	697b      	ldr	r3, [r7, #20]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d018      	beq.n	8002e58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	441a      	add	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d303      	bcc.n	8002e48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68d9      	ldr	r1, [r3, #12]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e50:	461a      	mov	r2, r3
 8002e52:	6838      	ldr	r0, [r7, #0]
 8002e54:	f001 fff4 	bl	8004e40 <memcpy>
	}
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e68:	f001 fcae 	bl	80047c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e74:	e011      	b.n	8002e9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d012      	beq.n	8002ea4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3324      	adds	r3, #36	@ 0x24
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fd74 	bl	8003970 <xTaskRemoveFromEventList>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002e8e:	f000 fe4d 	bl	8003b2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	dce9      	bgt.n	8002e76 <prvUnlockQueue+0x16>
 8002ea2:	e000      	b.n	8002ea6 <prvUnlockQueue+0x46>
					break;
 8002ea4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	22ff      	movs	r2, #255	@ 0xff
 8002eaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002eae:	f001 fcbd 	bl	800482c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002eb2:	f001 fc89 	bl	80047c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ebc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ebe:	e011      	b.n	8002ee4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d012      	beq.n	8002eee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3310      	adds	r3, #16
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fd4f 	bl	8003970 <xTaskRemoveFromEventList>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ed8:	f000 fe28 	bl	8003b2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002edc:	7bbb      	ldrb	r3, [r7, #14]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ee4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	dce9      	bgt.n	8002ec0 <prvUnlockQueue+0x60>
 8002eec:	e000      	b.n	8002ef0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002eee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	22ff      	movs	r2, #255	@ 0xff
 8002ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002ef8:	f001 fc98 	bl	800482c <vPortExitCritical>
}
 8002efc:	bf00      	nop
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f0c:	f001 fc5c 	bl	80047c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d102      	bne.n	8002f1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	e001      	b.n	8002f22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f22:	f001 fc83 	bl	800482c <vPortExitCritical>

	return xReturn;
 8002f26:	68fb      	ldr	r3, [r7, #12]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f38:	f001 fc46 	bl	80047c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d102      	bne.n	8002f4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	e001      	b.n	8002f52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f52:	f001 fc6b 	bl	800482c <vPortExitCritical>

	return xReturn;
 8002f56:	68fb      	ldr	r3, [r7, #12]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	e014      	b.n	8002f9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f70:	4a0f      	ldr	r2, [pc, #60]	@ (8002fb0 <vQueueAddToRegistry+0x50>)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10b      	bne.n	8002f94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f7c:	490c      	ldr	r1, [pc, #48]	@ (8002fb0 <vQueueAddToRegistry+0x50>)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002f86:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb0 <vQueueAddToRegistry+0x50>)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002f92:	e006      	b.n	8002fa2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3301      	adds	r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b07      	cmp	r3, #7
 8002f9e:	d9e7      	bls.n	8002f70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002fa0:	bf00      	nop
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000794 	.word	0x20000794

08002fb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002fc4:	f001 fc00 	bl	80047c8 <vPortEnterCritical>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002fce:	b25b      	sxtb	r3, r3
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d103      	bne.n	8002fde <vQueueWaitForMessageRestricted+0x2a>
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fe4:	b25b      	sxtb	r3, r3
 8002fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fea:	d103      	bne.n	8002ff4 <vQueueWaitForMessageRestricted+0x40>
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ff4:	f001 fc1a 	bl	800482c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d106      	bne.n	800300e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	3324      	adds	r3, #36	@ 0x24
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fc85 	bl	8003918 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800300e:	6978      	ldr	r0, [r7, #20]
 8003010:	f7ff ff26 	bl	8002e60 <prvUnlockQueue>
	}
 8003014:	bf00      	nop
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08e      	sub	sp, #56	@ 0x38
 8003020:	af04      	add	r7, sp, #16
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800302a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10b      	bne.n	8003048 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	623b      	str	r3, [r7, #32]
}
 8003042:	bf00      	nop
 8003044:	bf00      	nop
 8003046:	e7fd      	b.n	8003044 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10b      	bne.n	8003066 <xTaskCreateStatic+0x4a>
	__asm volatile
 800304e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	61fb      	str	r3, [r7, #28]
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	e7fd      	b.n	8003062 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003066:	235c      	movs	r3, #92	@ 0x5c
 8003068:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	2b5c      	cmp	r3, #92	@ 0x5c
 800306e:	d00b      	beq.n	8003088 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	61bb      	str	r3, [r7, #24]
}
 8003082:	bf00      	nop
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003088:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800308a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01e      	beq.n	80030ce <xTaskCreateStatic+0xb2>
 8003090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003092:	2b00      	cmp	r3, #0
 8003094:	d01b      	beq.n	80030ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003098:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800309e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80030a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80030a8:	2300      	movs	r3, #0
 80030aa:	9303      	str	r3, [sp, #12]
 80030ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ae:	9302      	str	r3, [sp, #8]
 80030b0:	f107 0314 	add.w	r3, r7, #20
 80030b4:	9301      	str	r3, [sp, #4]
 80030b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f850 	bl	8003166 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80030c8:	f000 f8de 	bl	8003288 <prvAddNewTaskToReadyList>
 80030cc:	e001      	b.n	80030d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80030d2:	697b      	ldr	r3, [r7, #20]
	}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3728      	adds	r7, #40	@ 0x28
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08c      	sub	sp, #48	@ 0x30
 80030e0:	af04      	add	r7, sp, #16
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f001 fc8b 	bl	8004a0c <pvPortMalloc>
 80030f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00e      	beq.n	800311c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80030fe:	205c      	movs	r0, #92	@ 0x5c
 8003100:	f001 fc84 	bl	8004a0c <pvPortMalloc>
 8003104:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	631a      	str	r2, [r3, #48]	@ 0x30
 8003112:	e005      	b.n	8003120 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003114:	6978      	ldr	r0, [r7, #20]
 8003116:	f001 fd47 	bl	8004ba8 <vPortFree>
 800311a:	e001      	b.n	8003120 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800311c:	2300      	movs	r3, #0
 800311e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d017      	beq.n	8003156 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800312e:	88fa      	ldrh	r2, [r7, #6]
 8003130:	2300      	movs	r3, #0
 8003132:	9303      	str	r3, [sp, #12]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	9302      	str	r3, [sp, #8]
 8003138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313a:	9301      	str	r3, [sp, #4]
 800313c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68b9      	ldr	r1, [r7, #8]
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f80e 	bl	8003166 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800314a:	69f8      	ldr	r0, [r7, #28]
 800314c:	f000 f89c 	bl	8003288 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003150:	2301      	movs	r3, #1
 8003152:	61bb      	str	r3, [r7, #24]
 8003154:	e002      	b.n	800315c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003156:	f04f 33ff 	mov.w	r3, #4294967295
 800315a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800315c:	69bb      	ldr	r3, [r7, #24]
	}
 800315e:	4618      	mov	r0, r3
 8003160:	3720      	adds	r7, #32
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b088      	sub	sp, #32
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
 8003172:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003176:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	461a      	mov	r2, r3
 800317e:	21a5      	movs	r1, #165	@ 0xa5
 8003180:	f001 fe32 	bl	8004de8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003186:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800318e:	3b01      	subs	r3, #1
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	f023 0307 	bic.w	r3, r3, #7
 800319c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00b      	beq.n	80031c0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80031a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	617b      	str	r3, [r7, #20]
}
 80031ba:	bf00      	nop
 80031bc:	bf00      	nop
 80031be:	e7fd      	b.n	80031bc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d01f      	beq.n	8003206 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	e012      	b.n	80031f2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	4413      	add	r3, r2
 80031d2:	7819      	ldrb	r1, [r3, #0]
 80031d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	4413      	add	r3, r2
 80031da:	3334      	adds	r3, #52	@ 0x34
 80031dc:	460a      	mov	r2, r1
 80031de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	4413      	add	r3, r2
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d006      	beq.n	80031fa <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	3301      	adds	r3, #1
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	2b0f      	cmp	r3, #15
 80031f6:	d9e9      	bls.n	80031cc <prvInitialiseNewTask+0x66>
 80031f8:	e000      	b.n	80031fc <prvInitialiseNewTask+0x96>
			{
				break;
 80031fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003204:	e003      	b.n	800320e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800320e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003210:	2b37      	cmp	r3, #55	@ 0x37
 8003212:	d901      	bls.n	8003218 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003214:	2337      	movs	r3, #55	@ 0x37
 8003216:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800321c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800321e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003220:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003222:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003226:	2200      	movs	r2, #0
 8003228:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800322a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322c:	3304      	adds	r3, #4
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff f966 	bl	8002500 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003236:	3318      	adds	r3, #24
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff f961 	bl	8002500 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800323e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003242:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003246:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800324a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800324e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003252:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003256:	2200      	movs	r2, #0
 8003258:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800325a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	68f9      	ldr	r1, [r7, #12]
 8003266:	69b8      	ldr	r0, [r7, #24]
 8003268:	f001 f97e 	bl	8004568 <pxPortInitialiseStack>
 800326c:	4602      	mov	r2, r0
 800326e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003270:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800327a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800327c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800327e:	bf00      	nop
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003290:	f001 fa9a 	bl	80047c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003294:	4b2d      	ldr	r3, [pc, #180]	@ (800334c <prvAddNewTaskToReadyList+0xc4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3301      	adds	r3, #1
 800329a:	4a2c      	ldr	r2, [pc, #176]	@ (800334c <prvAddNewTaskToReadyList+0xc4>)
 800329c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800329e:	4b2c      	ldr	r3, [pc, #176]	@ (8003350 <prvAddNewTaskToReadyList+0xc8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80032a6:	4a2a      	ldr	r2, [pc, #168]	@ (8003350 <prvAddNewTaskToReadyList+0xc8>)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032ac:	4b27      	ldr	r3, [pc, #156]	@ (800334c <prvAddNewTaskToReadyList+0xc4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d110      	bne.n	80032d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80032b4:	f000 fc5e 	bl	8003b74 <prvInitialiseTaskLists>
 80032b8:	e00d      	b.n	80032d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80032ba:	4b26      	ldr	r3, [pc, #152]	@ (8003354 <prvAddNewTaskToReadyList+0xcc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032c2:	4b23      	ldr	r3, [pc, #140]	@ (8003350 <prvAddNewTaskToReadyList+0xc8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d802      	bhi.n	80032d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80032d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003350 <prvAddNewTaskToReadyList+0xc8>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80032d6:	4b20      	ldr	r3, [pc, #128]	@ (8003358 <prvAddNewTaskToReadyList+0xd0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	3301      	adds	r3, #1
 80032dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003358 <prvAddNewTaskToReadyList+0xd0>)
 80032de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80032e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003358 <prvAddNewTaskToReadyList+0xd0>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ec:	4b1b      	ldr	r3, [pc, #108]	@ (800335c <prvAddNewTaskToReadyList+0xd4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d903      	bls.n	80032fc <prvAddNewTaskToReadyList+0x74>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f8:	4a18      	ldr	r2, [pc, #96]	@ (800335c <prvAddNewTaskToReadyList+0xd4>)
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4a15      	ldr	r2, [pc, #84]	@ (8003360 <prvAddNewTaskToReadyList+0xd8>)
 800330a:	441a      	add	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3304      	adds	r3, #4
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f7ff f901 	bl	800251a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003318:	f001 fa88 	bl	800482c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800331c:	4b0d      	ldr	r3, [pc, #52]	@ (8003354 <prvAddNewTaskToReadyList+0xcc>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00e      	beq.n	8003342 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003324:	4b0a      	ldr	r3, [pc, #40]	@ (8003350 <prvAddNewTaskToReadyList+0xc8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332e:	429a      	cmp	r2, r3
 8003330:	d207      	bcs.n	8003342 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003332:	4b0c      	ldr	r3, [pc, #48]	@ (8003364 <prvAddNewTaskToReadyList+0xdc>)
 8003334:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	f3bf 8f4f 	dsb	sy
 800333e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000ca8 	.word	0x20000ca8
 8003350:	200007d4 	.word	0x200007d4
 8003354:	20000cb4 	.word	0x20000cb4
 8003358:	20000cc4 	.word	0x20000cc4
 800335c:	20000cb0 	.word	0x20000cb0
 8003360:	200007d8 	.word	0x200007d8
 8003364:	e000ed04 	.word	0xe000ed04

08003368 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003370:	f001 fa2a 	bl	80047c8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <vTaskSuspend+0x18>
 800337a:	4b30      	ldr	r3, [pc, #192]	@ (800343c <vTaskSuspend+0xd4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	e000      	b.n	8003382 <vTaskSuspend+0x1a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	3304      	adds	r3, #4
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff f923 	bl	80025d4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003392:	2b00      	cmp	r3, #0
 8003394:	d004      	beq.n	80033a0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	3318      	adds	r3, #24
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff f91a 	bl	80025d4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4826      	ldr	r0, [pc, #152]	@ (8003440 <vTaskSuspend+0xd8>)
 80033a8:	f7ff f8b7 	bl	800251a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d103      	bne.n	80033c0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80033c0:	f001 fa34 	bl	800482c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80033c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003444 <vTaskSuspend+0xdc>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80033cc:	f001 f9fc 	bl	80047c8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80033d0:	f000 fc6e 	bl	8003cb0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80033d4:	f001 fa2a 	bl	800482c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80033d8:	4b18      	ldr	r3, [pc, #96]	@ (800343c <vTaskSuspend+0xd4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d128      	bne.n	8003434 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 80033e2:	4b18      	ldr	r3, [pc, #96]	@ (8003444 <vTaskSuspend+0xdc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d018      	beq.n	800341c <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80033ea:	4b17      	ldr	r3, [pc, #92]	@ (8003448 <vTaskSuspend+0xe0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00b      	beq.n	800340a <vTaskSuspend+0xa2>
	__asm volatile
 80033f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f6:	f383 8811 	msr	BASEPRI, r3
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	60bb      	str	r3, [r7, #8]
}
 8003404:	bf00      	nop
 8003406:	bf00      	nop
 8003408:	e7fd      	b.n	8003406 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800340a:	4b10      	ldr	r3, [pc, #64]	@ (800344c <vTaskSuspend+0xe4>)
 800340c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800341a:	e00b      	b.n	8003434 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800341c:	4b08      	ldr	r3, [pc, #32]	@ (8003440 <vTaskSuspend+0xd8>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <vTaskSuspend+0xe8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d103      	bne.n	8003430 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8003428:	4b04      	ldr	r3, [pc, #16]	@ (800343c <vTaskSuspend+0xd4>)
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
	}
 800342e:	e001      	b.n	8003434 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 8003430:	f000 f9ee 	bl	8003810 <vTaskSwitchContext>
	}
 8003434:	bf00      	nop
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	200007d4 	.word	0x200007d4
 8003440:	20000c94 	.word	0x20000c94
 8003444:	20000cb4 	.word	0x20000cb4
 8003448:	20000cd0 	.word	0x20000cd0
 800344c:	e000ed04 	.word	0xe000ed04
 8003450:	20000ca8 	.word	0x20000ca8

08003454 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	@ 0x28
 8003458:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800345e:	2300      	movs	r3, #0
 8003460:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003462:	463a      	mov	r2, r7
 8003464:	1d39      	adds	r1, r7, #4
 8003466:	f107 0308 	add.w	r3, r7, #8
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe fff4 	bl	8002458 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003470:	6839      	ldr	r1, [r7, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	9202      	str	r2, [sp, #8]
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	2300      	movs	r3, #0
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	2300      	movs	r3, #0
 8003480:	460a      	mov	r2, r1
 8003482:	4922      	ldr	r1, [pc, #136]	@ (800350c <vTaskStartScheduler+0xb8>)
 8003484:	4822      	ldr	r0, [pc, #136]	@ (8003510 <vTaskStartScheduler+0xbc>)
 8003486:	f7ff fdc9 	bl	800301c <xTaskCreateStatic>
 800348a:	4603      	mov	r3, r0
 800348c:	4a21      	ldr	r2, [pc, #132]	@ (8003514 <vTaskStartScheduler+0xc0>)
 800348e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003490:	4b20      	ldr	r3, [pc, #128]	@ (8003514 <vTaskStartScheduler+0xc0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003498:	2301      	movs	r3, #1
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	e001      	b.n	80034a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d102      	bne.n	80034ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80034a8:	f000 fd04 	bl	8003eb4 <xTimerCreateTimerTask>
 80034ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d116      	bne.n	80034e2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80034b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b8:	f383 8811 	msr	BASEPRI, r3
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	613b      	str	r3, [r7, #16]
}
 80034c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034c8:	4b13      	ldr	r3, [pc, #76]	@ (8003518 <vTaskStartScheduler+0xc4>)
 80034ca:	f04f 32ff 	mov.w	r2, #4294967295
 80034ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034d0:	4b12      	ldr	r3, [pc, #72]	@ (800351c <vTaskStartScheduler+0xc8>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80034d6:	4b12      	ldr	r3, [pc, #72]	@ (8003520 <vTaskStartScheduler+0xcc>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034dc:	f001 f8d0 	bl	8004680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034e0:	e00f      	b.n	8003502 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e8:	d10b      	bne.n	8003502 <vTaskStartScheduler+0xae>
	__asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	60fb      	str	r3, [r7, #12]
}
 80034fc:	bf00      	nop
 80034fe:	bf00      	nop
 8003500:	e7fd      	b.n	80034fe <vTaskStartScheduler+0xaa>
}
 8003502:	bf00      	nop
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	08004eb4 	.word	0x08004eb4
 8003510:	08003b45 	.word	0x08003b45
 8003514:	20000ccc 	.word	0x20000ccc
 8003518:	20000cc8 	.word	0x20000cc8
 800351c:	20000cb4 	.word	0x20000cb4
 8003520:	20000cac 	.word	0x20000cac

08003524 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003528:	4b04      	ldr	r3, [pc, #16]	@ (800353c <vTaskSuspendAll+0x18>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3301      	adds	r3, #1
 800352e:	4a03      	ldr	r2, [pc, #12]	@ (800353c <vTaskSuspendAll+0x18>)
 8003530:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003532:	bf00      	nop
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	20000cd0 	.word	0x20000cd0

08003540 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800354a:	2300      	movs	r3, #0
 800354c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800354e:	4b42      	ldr	r3, [pc, #264]	@ (8003658 <xTaskResumeAll+0x118>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10b      	bne.n	800356e <xTaskResumeAll+0x2e>
	__asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	603b      	str	r3, [r7, #0]
}
 8003568:	bf00      	nop
 800356a:	bf00      	nop
 800356c:	e7fd      	b.n	800356a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800356e:	f001 f92b 	bl	80047c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003572:	4b39      	ldr	r3, [pc, #228]	@ (8003658 <xTaskResumeAll+0x118>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3b01      	subs	r3, #1
 8003578:	4a37      	ldr	r2, [pc, #220]	@ (8003658 <xTaskResumeAll+0x118>)
 800357a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800357c:	4b36      	ldr	r3, [pc, #216]	@ (8003658 <xTaskResumeAll+0x118>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d162      	bne.n	800364a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003584:	4b35      	ldr	r3, [pc, #212]	@ (800365c <xTaskResumeAll+0x11c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d05e      	beq.n	800364a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800358c:	e02f      	b.n	80035ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800358e:	4b34      	ldr	r3, [pc, #208]	@ (8003660 <xTaskResumeAll+0x120>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3318      	adds	r3, #24
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff f81a 	bl	80025d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	3304      	adds	r3, #4
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff f815 	bl	80025d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003664 <xTaskResumeAll+0x124>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d903      	bls.n	80035be <xTaskResumeAll+0x7e>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003664 <xTaskResumeAll+0x124>)
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4a27      	ldr	r2, [pc, #156]	@ (8003668 <xTaskResumeAll+0x128>)
 80035cc:	441a      	add	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	3304      	adds	r3, #4
 80035d2:	4619      	mov	r1, r3
 80035d4:	4610      	mov	r0, r2
 80035d6:	f7fe ffa0 	bl	800251a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035de:	4b23      	ldr	r3, [pc, #140]	@ (800366c <xTaskResumeAll+0x12c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d302      	bcc.n	80035ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80035e8:	4b21      	ldr	r3, [pc, #132]	@ (8003670 <xTaskResumeAll+0x130>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003660 <xTaskResumeAll+0x120>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1cb      	bne.n	800358e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035fc:	f000 fb58 	bl	8003cb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003600:	4b1c      	ldr	r3, [pc, #112]	@ (8003674 <xTaskResumeAll+0x134>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d010      	beq.n	800362e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800360c:	f000 f846 	bl	800369c <xTaskIncrementTick>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003616:	4b16      	ldr	r3, [pc, #88]	@ (8003670 <xTaskResumeAll+0x130>)
 8003618:	2201      	movs	r2, #1
 800361a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3b01      	subs	r3, #1
 8003620:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1f1      	bne.n	800360c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003628:	4b12      	ldr	r3, [pc, #72]	@ (8003674 <xTaskResumeAll+0x134>)
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800362e:	4b10      	ldr	r3, [pc, #64]	@ (8003670 <xTaskResumeAll+0x130>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003636:	2301      	movs	r3, #1
 8003638:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800363a:	4b0f      	ldr	r3, [pc, #60]	@ (8003678 <xTaskResumeAll+0x138>)
 800363c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800364a:	f001 f8ef 	bl	800482c <vPortExitCritical>

	return xAlreadyYielded;
 800364e:	68bb      	ldr	r3, [r7, #8]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	20000cd0 	.word	0x20000cd0
 800365c:	20000ca8 	.word	0x20000ca8
 8003660:	20000c68 	.word	0x20000c68
 8003664:	20000cb0 	.word	0x20000cb0
 8003668:	200007d8 	.word	0x200007d8
 800366c:	200007d4 	.word	0x200007d4
 8003670:	20000cbc 	.word	0x20000cbc
 8003674:	20000cb8 	.word	0x20000cb8
 8003678:	e000ed04 	.word	0xe000ed04

0800367c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003682:	4b05      	ldr	r3, [pc, #20]	@ (8003698 <xTaskGetTickCount+0x1c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003688:	687b      	ldr	r3, [r7, #4]
}
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000cac 	.word	0x20000cac

0800369c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036a6:	4b4f      	ldr	r3, [pc, #316]	@ (80037e4 <xTaskIncrementTick+0x148>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f040 8090 	bne.w	80037d0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036b0:	4b4d      	ldr	r3, [pc, #308]	@ (80037e8 <xTaskIncrementTick+0x14c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3301      	adds	r3, #1
 80036b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80036b8:	4a4b      	ldr	r2, [pc, #300]	@ (80037e8 <xTaskIncrementTick+0x14c>)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d121      	bne.n	8003708 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80036c4:	4b49      	ldr	r3, [pc, #292]	@ (80037ec <xTaskIncrementTick+0x150>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80036ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d2:	f383 8811 	msr	BASEPRI, r3
 80036d6:	f3bf 8f6f 	isb	sy
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	603b      	str	r3, [r7, #0]
}
 80036e0:	bf00      	nop
 80036e2:	bf00      	nop
 80036e4:	e7fd      	b.n	80036e2 <xTaskIncrementTick+0x46>
 80036e6:	4b41      	ldr	r3, [pc, #260]	@ (80037ec <xTaskIncrementTick+0x150>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	4b40      	ldr	r3, [pc, #256]	@ (80037f0 <xTaskIncrementTick+0x154>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a3e      	ldr	r2, [pc, #248]	@ (80037ec <xTaskIncrementTick+0x150>)
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	4a3e      	ldr	r2, [pc, #248]	@ (80037f0 <xTaskIncrementTick+0x154>)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	4b3e      	ldr	r3, [pc, #248]	@ (80037f4 <xTaskIncrementTick+0x158>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3301      	adds	r3, #1
 8003700:	4a3c      	ldr	r2, [pc, #240]	@ (80037f4 <xTaskIncrementTick+0x158>)
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	f000 fad4 	bl	8003cb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003708:	4b3b      	ldr	r3, [pc, #236]	@ (80037f8 <xTaskIncrementTick+0x15c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	429a      	cmp	r2, r3
 8003710:	d349      	bcc.n	80037a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003712:	4b36      	ldr	r3, [pc, #216]	@ (80037ec <xTaskIncrementTick+0x150>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d104      	bne.n	8003726 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800371c:	4b36      	ldr	r3, [pc, #216]	@ (80037f8 <xTaskIncrementTick+0x15c>)
 800371e:	f04f 32ff 	mov.w	r2, #4294967295
 8003722:	601a      	str	r2, [r3, #0]
					break;
 8003724:	e03f      	b.n	80037a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003726:	4b31      	ldr	r3, [pc, #196]	@ (80037ec <xTaskIncrementTick+0x150>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	429a      	cmp	r2, r3
 800373c:	d203      	bcs.n	8003746 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800373e:	4a2e      	ldr	r2, [pc, #184]	@ (80037f8 <xTaskIncrementTick+0x15c>)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003744:	e02f      	b.n	80037a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	3304      	adds	r3, #4
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe ff42 	bl	80025d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003754:	2b00      	cmp	r3, #0
 8003756:	d004      	beq.n	8003762 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	3318      	adds	r3, #24
 800375c:	4618      	mov	r0, r3
 800375e:	f7fe ff39 	bl	80025d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003766:	4b25      	ldr	r3, [pc, #148]	@ (80037fc <xTaskIncrementTick+0x160>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d903      	bls.n	8003776 <xTaskIncrementTick+0xda>
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003772:	4a22      	ldr	r2, [pc, #136]	@ (80037fc <xTaskIncrementTick+0x160>)
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4a1f      	ldr	r2, [pc, #124]	@ (8003800 <xTaskIncrementTick+0x164>)
 8003784:	441a      	add	r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	3304      	adds	r3, #4
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f7fe fec4 	bl	800251a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003796:	4b1b      	ldr	r3, [pc, #108]	@ (8003804 <xTaskIncrementTick+0x168>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379c:	429a      	cmp	r2, r3
 800379e:	d3b8      	bcc.n	8003712 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80037a0:	2301      	movs	r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037a4:	e7b5      	b.n	8003712 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037a6:	4b17      	ldr	r3, [pc, #92]	@ (8003804 <xTaskIncrementTick+0x168>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ac:	4914      	ldr	r1, [pc, #80]	@ (8003800 <xTaskIncrementTick+0x164>)
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d901      	bls.n	80037c2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80037be:	2301      	movs	r3, #1
 80037c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80037c2:	4b11      	ldr	r3, [pc, #68]	@ (8003808 <xTaskIncrementTick+0x16c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80037ca:	2301      	movs	r3, #1
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	e004      	b.n	80037da <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80037d0:	4b0e      	ldr	r3, [pc, #56]	@ (800380c <xTaskIncrementTick+0x170>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	4a0d      	ldr	r2, [pc, #52]	@ (800380c <xTaskIncrementTick+0x170>)
 80037d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80037da:	697b      	ldr	r3, [r7, #20]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20000cd0 	.word	0x20000cd0
 80037e8:	20000cac 	.word	0x20000cac
 80037ec:	20000c60 	.word	0x20000c60
 80037f0:	20000c64 	.word	0x20000c64
 80037f4:	20000cc0 	.word	0x20000cc0
 80037f8:	20000cc8 	.word	0x20000cc8
 80037fc:	20000cb0 	.word	0x20000cb0
 8003800:	200007d8 	.word	0x200007d8
 8003804:	200007d4 	.word	0x200007d4
 8003808:	20000cbc 	.word	0x20000cbc
 800380c:	20000cb8 	.word	0x20000cb8

08003810 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003816:	4b28      	ldr	r3, [pc, #160]	@ (80038b8 <vTaskSwitchContext+0xa8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800381e:	4b27      	ldr	r3, [pc, #156]	@ (80038bc <vTaskSwitchContext+0xac>)
 8003820:	2201      	movs	r2, #1
 8003822:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003824:	e042      	b.n	80038ac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003826:	4b25      	ldr	r3, [pc, #148]	@ (80038bc <vTaskSwitchContext+0xac>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800382c:	4b24      	ldr	r3, [pc, #144]	@ (80038c0 <vTaskSwitchContext+0xb0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	e011      	b.n	8003858 <vTaskSwitchContext+0x48>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10b      	bne.n	8003852 <vTaskSwitchContext+0x42>
	__asm volatile
 800383a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	607b      	str	r3, [r7, #4]
}
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	e7fd      	b.n	800384e <vTaskSwitchContext+0x3e>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3b01      	subs	r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	491a      	ldr	r1, [pc, #104]	@ (80038c4 <vTaskSwitchContext+0xb4>)
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0e3      	beq.n	8003834 <vTaskSwitchContext+0x24>
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4a13      	ldr	r2, [pc, #76]	@ (80038c4 <vTaskSwitchContext+0xb4>)
 8003878:	4413      	add	r3, r2
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	605a      	str	r2, [r3, #4]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	3308      	adds	r3, #8
 800388e:	429a      	cmp	r2, r3
 8003890:	d104      	bne.n	800389c <vTaskSwitchContext+0x8c>
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	605a      	str	r2, [r3, #4]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	4a09      	ldr	r2, [pc, #36]	@ (80038c8 <vTaskSwitchContext+0xb8>)
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	4a06      	ldr	r2, [pc, #24]	@ (80038c0 <vTaskSwitchContext+0xb0>)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6013      	str	r3, [r2, #0]
}
 80038ac:	bf00      	nop
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	20000cd0 	.word	0x20000cd0
 80038bc:	20000cbc 	.word	0x20000cbc
 80038c0:	20000cb0 	.word	0x20000cb0
 80038c4:	200007d8 	.word	0x200007d8
 80038c8:	200007d4 	.word	0x200007d4

080038cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10b      	bne.n	80038f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	60fb      	str	r3, [r7, #12]
}
 80038ee:	bf00      	nop
 80038f0:	bf00      	nop
 80038f2:	e7fd      	b.n	80038f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038f4:	4b07      	ldr	r3, [pc, #28]	@ (8003914 <vTaskPlaceOnEventList+0x48>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3318      	adds	r3, #24
 80038fa:	4619      	mov	r1, r3
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7fe fe30 	bl	8002562 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003902:	2101      	movs	r1, #1
 8003904:	6838      	ldr	r0, [r7, #0]
 8003906:	f000 fa81 	bl	8003e0c <prvAddCurrentTaskToDelayedList>
}
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	200007d4 	.word	0x200007d4

08003918 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10b      	bne.n	8003942 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800392a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	617b      	str	r3, [r7, #20]
}
 800393c:	bf00      	nop
 800393e:	bf00      	nop
 8003940:	e7fd      	b.n	800393e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003942:	4b0a      	ldr	r3, [pc, #40]	@ (800396c <vTaskPlaceOnEventListRestricted+0x54>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3318      	adds	r3, #24
 8003948:	4619      	mov	r1, r3
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f7fe fde5 	bl	800251a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003956:	f04f 33ff 	mov.w	r3, #4294967295
 800395a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	68b8      	ldr	r0, [r7, #8]
 8003960:	f000 fa54 	bl	8003e0c <prvAddCurrentTaskToDelayedList>
	}
 8003964:	bf00      	nop
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	200007d4 	.word	0x200007d4

08003970 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10b      	bne.n	800399e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	60fb      	str	r3, [r7, #12]
}
 8003998:	bf00      	nop
 800399a:	bf00      	nop
 800399c:	e7fd      	b.n	800399a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	3318      	adds	r3, #24
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fe fe16 	bl	80025d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a20 <xTaskRemoveFromEventList+0xb0>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d11d      	bne.n	80039ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	3304      	adds	r3, #4
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fe fe0d 	bl	80025d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039be:	4b19      	ldr	r3, [pc, #100]	@ (8003a24 <xTaskRemoveFromEventList+0xb4>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d903      	bls.n	80039ce <xTaskRemoveFromEventList+0x5e>
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ca:	4a16      	ldr	r2, [pc, #88]	@ (8003a24 <xTaskRemoveFromEventList+0xb4>)
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d2:	4613      	mov	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4a13      	ldr	r2, [pc, #76]	@ (8003a28 <xTaskRemoveFromEventList+0xb8>)
 80039dc:	441a      	add	r2, r3
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	3304      	adds	r3, #4
 80039e2:	4619      	mov	r1, r3
 80039e4:	4610      	mov	r0, r2
 80039e6:	f7fe fd98 	bl	800251a <vListInsertEnd>
 80039ea:	e005      	b.n	80039f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	3318      	adds	r3, #24
 80039f0:	4619      	mov	r1, r3
 80039f2:	480e      	ldr	r0, [pc, #56]	@ (8003a2c <xTaskRemoveFromEventList+0xbc>)
 80039f4:	f7fe fd91 	bl	800251a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003a30 <xTaskRemoveFromEventList+0xc0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d905      	bls.n	8003a12 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a06:	2301      	movs	r3, #1
 8003a08:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a34 <xTaskRemoveFromEventList+0xc4>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	e001      	b.n	8003a16 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a16:	697b      	ldr	r3, [r7, #20]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000cd0 	.word	0x20000cd0
 8003a24:	20000cb0 	.word	0x20000cb0
 8003a28:	200007d8 	.word	0x200007d8
 8003a2c:	20000c68 	.word	0x20000c68
 8003a30:	200007d4 	.word	0x200007d4
 8003a34:	20000cbc 	.word	0x20000cbc

08003a38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a40:	4b06      	ldr	r3, [pc, #24]	@ (8003a5c <vTaskInternalSetTimeOutState+0x24>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a48:	4b05      	ldr	r3, [pc, #20]	@ (8003a60 <vTaskInternalSetTimeOutState+0x28>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	605a      	str	r2, [r3, #4]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	20000cc0 	.word	0x20000cc0
 8003a60:	20000cac 	.word	0x20000cac

08003a64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10b      	bne.n	8003a8c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	613b      	str	r3, [r7, #16]
}
 8003a86:	bf00      	nop
 8003a88:	bf00      	nop
 8003a8a:	e7fd      	b.n	8003a88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10b      	bne.n	8003aaa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	60fb      	str	r3, [r7, #12]
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	e7fd      	b.n	8003aa6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003aaa:	f000 fe8d 	bl	80047c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003aae:	4b1d      	ldr	r3, [pc, #116]	@ (8003b24 <xTaskCheckForTimeOut+0xc0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac6:	d102      	bne.n	8003ace <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61fb      	str	r3, [r7, #28]
 8003acc:	e023      	b.n	8003b16 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b15      	ldr	r3, [pc, #84]	@ (8003b28 <xTaskCheckForTimeOut+0xc4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d007      	beq.n	8003aea <xTaskCheckForTimeOut+0x86>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d302      	bcc.n	8003aea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	61fb      	str	r3, [r7, #28]
 8003ae8:	e015      	b.n	8003b16 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d20b      	bcs.n	8003b0c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	1ad2      	subs	r2, r2, r3
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff ff99 	bl	8003a38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	e004      	b.n	8003b16 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b12:	2301      	movs	r3, #1
 8003b14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b16:	f000 fe89 	bl	800482c <vPortExitCritical>

	return xReturn;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3720      	adds	r7, #32
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000cac 	.word	0x20000cac
 8003b28:	20000cc0 	.word	0x20000cc0

08003b2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b30:	4b03      	ldr	r3, [pc, #12]	@ (8003b40 <vTaskMissedYield+0x14>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
}
 8003b36:	bf00      	nop
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	20000cbc 	.word	0x20000cbc

08003b44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b4c:	f000 f852 	bl	8003bf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b50:	4b06      	ldr	r3, [pc, #24]	@ (8003b6c <prvIdleTask+0x28>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d9f9      	bls.n	8003b4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b58:	4b05      	ldr	r3, [pc, #20]	@ (8003b70 <prvIdleTask+0x2c>)
 8003b5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b68:	e7f0      	b.n	8003b4c <prvIdleTask+0x8>
 8003b6a:	bf00      	nop
 8003b6c:	200007d8 	.word	0x200007d8
 8003b70:	e000ed04 	.word	0xe000ed04

08003b74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	607b      	str	r3, [r7, #4]
 8003b7e:	e00c      	b.n	8003b9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4a12      	ldr	r2, [pc, #72]	@ (8003bd4 <prvInitialiseTaskLists+0x60>)
 8003b8c:	4413      	add	r3, r2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe fc96 	bl	80024c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3301      	adds	r3, #1
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b37      	cmp	r3, #55	@ 0x37
 8003b9e:	d9ef      	bls.n	8003b80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ba0:	480d      	ldr	r0, [pc, #52]	@ (8003bd8 <prvInitialiseTaskLists+0x64>)
 8003ba2:	f7fe fc8d 	bl	80024c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ba6:	480d      	ldr	r0, [pc, #52]	@ (8003bdc <prvInitialiseTaskLists+0x68>)
 8003ba8:	f7fe fc8a 	bl	80024c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bac:	480c      	ldr	r0, [pc, #48]	@ (8003be0 <prvInitialiseTaskLists+0x6c>)
 8003bae:	f7fe fc87 	bl	80024c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003bb2:	480c      	ldr	r0, [pc, #48]	@ (8003be4 <prvInitialiseTaskLists+0x70>)
 8003bb4:	f7fe fc84 	bl	80024c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bb8:	480b      	ldr	r0, [pc, #44]	@ (8003be8 <prvInitialiseTaskLists+0x74>)
 8003bba:	f7fe fc81 	bl	80024c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003bec <prvInitialiseTaskLists+0x78>)
 8003bc0:	4a05      	ldr	r2, [pc, #20]	@ (8003bd8 <prvInitialiseTaskLists+0x64>)
 8003bc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf0 <prvInitialiseTaskLists+0x7c>)
 8003bc6:	4a05      	ldr	r2, [pc, #20]	@ (8003bdc <prvInitialiseTaskLists+0x68>)
 8003bc8:	601a      	str	r2, [r3, #0]
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	200007d8 	.word	0x200007d8
 8003bd8:	20000c38 	.word	0x20000c38
 8003bdc:	20000c4c 	.word	0x20000c4c
 8003be0:	20000c68 	.word	0x20000c68
 8003be4:	20000c7c 	.word	0x20000c7c
 8003be8:	20000c94 	.word	0x20000c94
 8003bec:	20000c60 	.word	0x20000c60
 8003bf0:	20000c64 	.word	0x20000c64

08003bf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bfa:	e019      	b.n	8003c30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003bfc:	f000 fde4 	bl	80047c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c00:	4b10      	ldr	r3, [pc, #64]	@ (8003c44 <prvCheckTasksWaitingTermination+0x50>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fe fce1 	bl	80025d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c12:	4b0d      	ldr	r3, [pc, #52]	@ (8003c48 <prvCheckTasksWaitingTermination+0x54>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	4a0b      	ldr	r2, [pc, #44]	@ (8003c48 <prvCheckTasksWaitingTermination+0x54>)
 8003c1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c4c <prvCheckTasksWaitingTermination+0x58>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3b01      	subs	r3, #1
 8003c22:	4a0a      	ldr	r2, [pc, #40]	@ (8003c4c <prvCheckTasksWaitingTermination+0x58>)
 8003c24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c26:	f000 fe01 	bl	800482c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f810 	bl	8003c50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c30:	4b06      	ldr	r3, [pc, #24]	@ (8003c4c <prvCheckTasksWaitingTermination+0x58>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e1      	bne.n	8003bfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c38:	bf00      	nop
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000c7c 	.word	0x20000c7c
 8003c48:	20000ca8 	.word	0x20000ca8
 8003c4c:	20000c90 	.word	0x20000c90

08003c50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d108      	bne.n	8003c74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 ff9e 	bl	8004ba8 <vPortFree>
				vPortFree( pxTCB );
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 ff9b 	bl	8004ba8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c72:	e019      	b.n	8003ca8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d103      	bne.n	8003c86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 ff92 	bl	8004ba8 <vPortFree>
	}
 8003c84:	e010      	b.n	8003ca8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d00b      	beq.n	8003ca8 <prvDeleteTCB+0x58>
	__asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	60fb      	str	r3, [r7, #12]
}
 8003ca2:	bf00      	nop
 8003ca4:	bf00      	nop
 8003ca6:	e7fd      	b.n	8003ca4 <prvDeleteTCB+0x54>
	}
 8003ca8:	bf00      	nop
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce8 <prvResetNextTaskUnblockTime+0x38>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d104      	bne.n	8003cca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003cec <prvResetNextTaskUnblockTime+0x3c>)
 8003cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cc8:	e008      	b.n	8003cdc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cca:	4b07      	ldr	r3, [pc, #28]	@ (8003ce8 <prvResetNextTaskUnblockTime+0x38>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	4a04      	ldr	r2, [pc, #16]	@ (8003cec <prvResetNextTaskUnblockTime+0x3c>)
 8003cda:	6013      	str	r3, [r2, #0]
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	20000c60 	.word	0x20000c60
 8003cec:	20000cc8 	.word	0x20000cc8

08003cf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d24 <xTaskGetSchedulerState+0x34>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d102      	bne.n	8003d04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	607b      	str	r3, [r7, #4]
 8003d02:	e008      	b.n	8003d16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d04:	4b08      	ldr	r3, [pc, #32]	@ (8003d28 <xTaskGetSchedulerState+0x38>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d102      	bne.n	8003d12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	607b      	str	r3, [r7, #4]
 8003d10:	e001      	b.n	8003d16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d12:	2300      	movs	r3, #0
 8003d14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d16:	687b      	ldr	r3, [r7, #4]
	}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	20000cb4 	.word	0x20000cb4
 8003d28:	20000cd0 	.word	0x20000cd0

08003d2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d058      	beq.n	8003df4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d42:	4b2f      	ldr	r3, [pc, #188]	@ (8003e00 <xTaskPriorityDisinherit+0xd4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d00b      	beq.n	8003d64 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	60fb      	str	r3, [r7, #12]
}
 8003d5e:	bf00      	nop
 8003d60:	bf00      	nop
 8003d62:	e7fd      	b.n	8003d60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10b      	bne.n	8003d84 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	60bb      	str	r3, [r7, #8]
}
 8003d7e:	bf00      	nop
 8003d80:	bf00      	nop
 8003d82:	e7fd      	b.n	8003d80 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d88:	1e5a      	subs	r2, r3, #1
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d02c      	beq.n	8003df4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d128      	bne.n	8003df4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	3304      	adds	r3, #4
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe fc14 	bl	80025d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003e04 <xTaskPriorityDisinherit+0xd8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d903      	bls.n	8003dd4 <xTaskPriorityDisinherit+0xa8>
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <xTaskPriorityDisinherit+0xd8>)
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4a09      	ldr	r2, [pc, #36]	@ (8003e08 <xTaskPriorityDisinherit+0xdc>)
 8003de2:	441a      	add	r2, r3
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	3304      	adds	r3, #4
 8003de8:	4619      	mov	r1, r3
 8003dea:	4610      	mov	r0, r2
 8003dec:	f7fe fb95 	bl	800251a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003df0:	2301      	movs	r3, #1
 8003df2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003df4:	697b      	ldr	r3, [r7, #20]
	}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	200007d4 	.word	0x200007d4
 8003e04:	20000cb0 	.word	0x20000cb0
 8003e08:	200007d8 	.word	0x200007d8

08003e0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e16:	4b21      	ldr	r3, [pc, #132]	@ (8003e9c <prvAddCurrentTaskToDelayedList+0x90>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e1c:	4b20      	ldr	r3, [pc, #128]	@ (8003ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3304      	adds	r3, #4
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe fbd6 	bl	80025d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2e:	d10a      	bne.n	8003e46 <prvAddCurrentTaskToDelayedList+0x3a>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d007      	beq.n	8003e46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e36:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4819      	ldr	r0, [pc, #100]	@ (8003ea4 <prvAddCurrentTaskToDelayedList+0x98>)
 8003e40:	f7fe fb6b 	bl	800251a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e44:	e026      	b.n	8003e94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e4e:	4b14      	ldr	r3, [pc, #80]	@ (8003ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d209      	bcs.n	8003e72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e5e:	4b12      	ldr	r3, [pc, #72]	@ (8003ea8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3304      	adds	r3, #4
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	f7fe fb79 	bl	8002562 <vListInsert>
}
 8003e70:	e010      	b.n	8003e94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e72:	4b0e      	ldr	r3, [pc, #56]	@ (8003eac <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4610      	mov	r0, r2
 8003e80:	f7fe fb6f 	bl	8002562 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e84:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d202      	bcs.n	8003e94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003e8e:	4a08      	ldr	r2, [pc, #32]	@ (8003eb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	6013      	str	r3, [r2, #0]
}
 8003e94:	bf00      	nop
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20000cac 	.word	0x20000cac
 8003ea0:	200007d4 	.word	0x200007d4
 8003ea4:	20000c94 	.word	0x20000c94
 8003ea8:	20000c64 	.word	0x20000c64
 8003eac:	20000c60 	.word	0x20000c60
 8003eb0:	20000cc8 	.word	0x20000cc8

08003eb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08a      	sub	sp, #40	@ 0x28
 8003eb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003ebe:	f000 fb13 	bl	80044e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f38 <xTimerCreateTimerTask+0x84>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d021      	beq.n	8003f0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003ed2:	1d3a      	adds	r2, r7, #4
 8003ed4:	f107 0108 	add.w	r1, r7, #8
 8003ed8:	f107 030c 	add.w	r3, r7, #12
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fe fad5 	bl	800248c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	9202      	str	r2, [sp, #8]
 8003eea:	9301      	str	r3, [sp, #4]
 8003eec:	2302      	movs	r3, #2
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	460a      	mov	r2, r1
 8003ef4:	4911      	ldr	r1, [pc, #68]	@ (8003f3c <xTimerCreateTimerTask+0x88>)
 8003ef6:	4812      	ldr	r0, [pc, #72]	@ (8003f40 <xTimerCreateTimerTask+0x8c>)
 8003ef8:	f7ff f890 	bl	800301c <xTaskCreateStatic>
 8003efc:	4603      	mov	r3, r0
 8003efe:	4a11      	ldr	r2, [pc, #68]	@ (8003f44 <xTimerCreateTimerTask+0x90>)
 8003f00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003f02:	4b10      	ldr	r3, [pc, #64]	@ (8003f44 <xTimerCreateTimerTask+0x90>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10b      	bne.n	8003f2c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	613b      	str	r3, [r7, #16]
}
 8003f26:	bf00      	nop
 8003f28:	bf00      	nop
 8003f2a:	e7fd      	b.n	8003f28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f2c:	697b      	ldr	r3, [r7, #20]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000d04 	.word	0x20000d04
 8003f3c:	08004ebc 	.word	0x08004ebc
 8003f40:	08004081 	.word	0x08004081
 8003f44:	20000d08 	.word	0x20000d08

08003f48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08a      	sub	sp, #40	@ 0x28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10b      	bne.n	8003f78 <xTimerGenericCommand+0x30>
	__asm volatile
 8003f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	623b      	str	r3, [r7, #32]
}
 8003f72:	bf00      	nop
 8003f74:	bf00      	nop
 8003f76:	e7fd      	b.n	8003f74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f78:	4b19      	ldr	r3, [pc, #100]	@ (8003fe0 <xTimerGenericCommand+0x98>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d02a      	beq.n	8003fd6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b05      	cmp	r3, #5
 8003f90:	dc18      	bgt.n	8003fc4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f92:	f7ff fead 	bl	8003cf0 <xTaskGetSchedulerState>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d109      	bne.n	8003fb0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f9c:	4b10      	ldr	r3, [pc, #64]	@ (8003fe0 <xTimerGenericCommand+0x98>)
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	f107 0110 	add.w	r1, r7, #16
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fa8:	f7fe fc48 	bl	800283c <xQueueGenericSend>
 8003fac:	6278      	str	r0, [r7, #36]	@ 0x24
 8003fae:	e012      	b.n	8003fd6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe0 <xTimerGenericCommand+0x98>)
 8003fb2:	6818      	ldr	r0, [r3, #0]
 8003fb4:	f107 0110 	add.w	r1, r7, #16
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f7fe fc3e 	bl	800283c <xQueueGenericSend>
 8003fc0:	6278      	str	r0, [r7, #36]	@ 0x24
 8003fc2:	e008      	b.n	8003fd6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003fc4:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <xTimerGenericCommand+0x98>)
 8003fc6:	6818      	ldr	r0, [r3, #0]
 8003fc8:	f107 0110 	add.w	r1, r7, #16
 8003fcc:	2300      	movs	r3, #0
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	f7fe fd36 	bl	8002a40 <xQueueGenericSendFromISR>
 8003fd4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3728      	adds	r7, #40	@ 0x28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20000d04 	.word	0x20000d04

08003fe4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fee:	4b23      	ldr	r3, [pc, #140]	@ (800407c <prvProcessExpiredTimer+0x98>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fe fae9 	bl	80025d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d023      	beq.n	8004058 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	699a      	ldr	r2, [r3, #24]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	18d1      	adds	r1, r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	6978      	ldr	r0, [r7, #20]
 800401e:	f000 f8d5 	bl	80041cc <prvInsertTimerInActiveList>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d020      	beq.n	800406a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004028:	2300      	movs	r3, #0
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	2300      	movs	r3, #0
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	2100      	movs	r1, #0
 8004032:	6978      	ldr	r0, [r7, #20]
 8004034:	f7ff ff88 	bl	8003f48 <xTimerGenericCommand>
 8004038:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d114      	bne.n	800406a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	60fb      	str	r3, [r7, #12]
}
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	e7fd      	b.n	8004054 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800405e:	f023 0301 	bic.w	r3, r3, #1
 8004062:	b2da      	uxtb	r2, r3
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	6978      	ldr	r0, [r7, #20]
 8004070:	4798      	blx	r3
}
 8004072:	bf00      	nop
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20000cfc 	.word	0x20000cfc

08004080 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004088:	f107 0308 	add.w	r3, r7, #8
 800408c:	4618      	mov	r0, r3
 800408e:	f000 f859 	bl	8004144 <prvGetNextExpireTime>
 8004092:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4619      	mov	r1, r3
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 f805 	bl	80040a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800409e:	f000 f8d7 	bl	8004250 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040a2:	bf00      	nop
 80040a4:	e7f0      	b.n	8004088 <prvTimerTask+0x8>
	...

080040a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80040b2:	f7ff fa37 	bl	8003524 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040b6:	f107 0308 	add.w	r3, r7, #8
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f866 	bl	800418c <prvSampleTimeNow>
 80040c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d130      	bne.n	800412a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10a      	bne.n	80040e4 <prvProcessTimerOrBlockTask+0x3c>
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d806      	bhi.n	80040e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80040d6:	f7ff fa33 	bl	8003540 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040da:	68f9      	ldr	r1, [r7, #12]
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff ff81 	bl	8003fe4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80040e2:	e024      	b.n	800412e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d008      	beq.n	80040fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040ea:	4b13      	ldr	r3, [pc, #76]	@ (8004138 <prvProcessTimerOrBlockTask+0x90>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <prvProcessTimerOrBlockTask+0x50>
 80040f4:	2301      	movs	r3, #1
 80040f6:	e000      	b.n	80040fa <prvProcessTimerOrBlockTask+0x52>
 80040f8:	2300      	movs	r3, #0
 80040fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040fc:	4b0f      	ldr	r3, [pc, #60]	@ (800413c <prvProcessTimerOrBlockTask+0x94>)
 80040fe:	6818      	ldr	r0, [r3, #0]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	4619      	mov	r1, r3
 800410a:	f7fe ff53 	bl	8002fb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800410e:	f7ff fa17 	bl	8003540 <xTaskResumeAll>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10a      	bne.n	800412e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004118:	4b09      	ldr	r3, [pc, #36]	@ (8004140 <prvProcessTimerOrBlockTask+0x98>)
 800411a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	f3bf 8f6f 	isb	sy
}
 8004128:	e001      	b.n	800412e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800412a:	f7ff fa09 	bl	8003540 <xTaskResumeAll>
}
 800412e:	bf00      	nop
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20000d00 	.word	0x20000d00
 800413c:	20000d04 	.word	0x20000d04
 8004140:	e000ed04 	.word	0xe000ed04

08004144 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800414c:	4b0e      	ldr	r3, [pc, #56]	@ (8004188 <prvGetNextExpireTime+0x44>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <prvGetNextExpireTime+0x16>
 8004156:	2201      	movs	r2, #1
 8004158:	e000      	b.n	800415c <prvGetNextExpireTime+0x18>
 800415a:	2200      	movs	r2, #0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d105      	bne.n	8004174 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004168:	4b07      	ldr	r3, [pc, #28]	@ (8004188 <prvGetNextExpireTime+0x44>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	e001      	b.n	8004178 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004178:	68fb      	ldr	r3, [r7, #12]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	20000cfc 	.word	0x20000cfc

0800418c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004194:	f7ff fa72 	bl	800367c <xTaskGetTickCount>
 8004198:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800419a:	4b0b      	ldr	r3, [pc, #44]	@ (80041c8 <prvSampleTimeNow+0x3c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d205      	bcs.n	80041b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80041a4:	f000 f93a 	bl	800441c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e002      	b.n	80041b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80041b6:	4a04      	ldr	r2, [pc, #16]	@ (80041c8 <prvSampleTimeNow+0x3c>)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80041bc:	68fb      	ldr	r3, [r7, #12]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000d0c 	.word	0x20000d0c

080041cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d812      	bhi.n	8004218 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	1ad2      	subs	r2, r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d302      	bcc.n	8004206 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004200:	2301      	movs	r3, #1
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	e01b      	b.n	800423e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004206:	4b10      	ldr	r3, [pc, #64]	@ (8004248 <prvInsertTimerInActiveList+0x7c>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3304      	adds	r3, #4
 800420e:	4619      	mov	r1, r3
 8004210:	4610      	mov	r0, r2
 8004212:	f7fe f9a6 	bl	8002562 <vListInsert>
 8004216:	e012      	b.n	800423e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d206      	bcs.n	800422e <prvInsertTimerInActiveList+0x62>
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d302      	bcc.n	800422e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004228:	2301      	movs	r3, #1
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	e007      	b.n	800423e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800422e:	4b07      	ldr	r3, [pc, #28]	@ (800424c <prvInsertTimerInActiveList+0x80>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	3304      	adds	r3, #4
 8004236:	4619      	mov	r1, r3
 8004238:	4610      	mov	r0, r2
 800423a:	f7fe f992 	bl	8002562 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800423e:	697b      	ldr	r3, [r7, #20]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20000d00 	.word	0x20000d00
 800424c:	20000cfc 	.word	0x20000cfc

08004250 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08e      	sub	sp, #56	@ 0x38
 8004254:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004256:	e0ce      	b.n	80043f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	da19      	bge.n	8004292 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800425e:	1d3b      	adds	r3, r7, #4
 8004260:	3304      	adds	r3, #4
 8004262:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10b      	bne.n	8004282 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	61fb      	str	r3, [r7, #28]
}
 800427c:	bf00      	nop
 800427e:	bf00      	nop
 8004280:	e7fd      	b.n	800427e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004288:	6850      	ldr	r0, [r2, #4]
 800428a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800428c:	6892      	ldr	r2, [r2, #8]
 800428e:	4611      	mov	r1, r2
 8004290:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	f2c0 80ae 	blt.w	80043f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800429e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d004      	beq.n	80042b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a8:	3304      	adds	r3, #4
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe f992 	bl	80025d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042b0:	463b      	mov	r3, r7
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff ff6a 	bl	800418c <prvSampleTimeNow>
 80042b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b09      	cmp	r3, #9
 80042be:	f200 8097 	bhi.w	80043f0 <prvProcessReceivedCommands+0x1a0>
 80042c2:	a201      	add	r2, pc, #4	@ (adr r2, 80042c8 <prvProcessReceivedCommands+0x78>)
 80042c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c8:	080042f1 	.word	0x080042f1
 80042cc:	080042f1 	.word	0x080042f1
 80042d0:	080042f1 	.word	0x080042f1
 80042d4:	08004367 	.word	0x08004367
 80042d8:	0800437b 	.word	0x0800437b
 80042dc:	080043c7 	.word	0x080043c7
 80042e0:	080042f1 	.word	0x080042f1
 80042e4:	080042f1 	.word	0x080042f1
 80042e8:	08004367 	.word	0x08004367
 80042ec:	0800437b 	.word	0x0800437b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	18d1      	adds	r1, r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800430e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004310:	f7ff ff5c 	bl	80041cc <prvInsertTimerInActiveList>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d06c      	beq.n	80043f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800431a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004320:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004324:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d061      	beq.n	80043f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	441a      	add	r2, r3
 8004338:	2300      	movs	r3, #0
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	2300      	movs	r3, #0
 800433e:	2100      	movs	r1, #0
 8004340:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004342:	f7ff fe01 	bl	8003f48 <xTimerGenericCommand>
 8004346:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d152      	bne.n	80043f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800434e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	61bb      	str	r3, [r7, #24]
}
 8004360:	bf00      	nop
 8004362:	bf00      	nop
 8004364:	e7fd      	b.n	8004362 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004368:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	b2da      	uxtb	r2, r3
 8004372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004374:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004378:	e03d      	b.n	80043f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800437a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004380:	f043 0301 	orr.w	r3, r3, #1
 8004384:	b2da      	uxtb	r2, r3
 8004386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004388:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004390:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10b      	bne.n	80043b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	617b      	str	r3, [r7, #20]
}
 80043ac:	bf00      	nop
 80043ae:	bf00      	nop
 80043b0:	e7fd      	b.n	80043ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b4:	699a      	ldr	r2, [r3, #24]
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	18d1      	adds	r1, r2, r3
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043c0:	f7ff ff04 	bl	80041cc <prvInsertTimerInActiveList>
					break;
 80043c4:	e017      	b.n	80043f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80043c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d103      	bne.n	80043dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80043d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043d6:	f000 fbe7 	bl	8004ba8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80043da:	e00c      	b.n	80043f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80043ee:	e002      	b.n	80043f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80043f0:	bf00      	nop
 80043f2:	e000      	b.n	80043f6 <prvProcessReceivedCommands+0x1a6>
					break;
 80043f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043f6:	4b08      	ldr	r3, [pc, #32]	@ (8004418 <prvProcessReceivedCommands+0x1c8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	1d39      	adds	r1, r7, #4
 80043fc:	2200      	movs	r2, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fe fbbc 	bl	8002b7c <xQueueReceive>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	f47f af26 	bne.w	8004258 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800440c:	bf00      	nop
 800440e:	bf00      	nop
 8004410:	3730      	adds	r7, #48	@ 0x30
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	20000d04 	.word	0x20000d04

0800441c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004422:	e049      	b.n	80044b8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004424:	4b2e      	ldr	r3, [pc, #184]	@ (80044e0 <prvSwitchTimerLists+0xc4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800442e:	4b2c      	ldr	r3, [pc, #176]	@ (80044e0 <prvSwitchTimerLists+0xc4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3304      	adds	r3, #4
 800443c:	4618      	mov	r0, r3
 800443e:	f7fe f8c9 	bl	80025d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	d02f      	beq.n	80044b8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4413      	add	r3, r2
 8004460:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	429a      	cmp	r2, r3
 8004468:	d90e      	bls.n	8004488 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004476:	4b1a      	ldr	r3, [pc, #104]	@ (80044e0 <prvSwitchTimerLists+0xc4>)
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3304      	adds	r3, #4
 800447e:	4619      	mov	r1, r3
 8004480:	4610      	mov	r0, r2
 8004482:	f7fe f86e 	bl	8002562 <vListInsert>
 8004486:	e017      	b.n	80044b8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004488:	2300      	movs	r3, #0
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	2300      	movs	r3, #0
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	2100      	movs	r1, #0
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f7ff fd58 	bl	8003f48 <xTimerGenericCommand>
 8004498:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10b      	bne.n	80044b8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	603b      	str	r3, [r7, #0]
}
 80044b2:	bf00      	nop
 80044b4:	bf00      	nop
 80044b6:	e7fd      	b.n	80044b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044b8:	4b09      	ldr	r3, [pc, #36]	@ (80044e0 <prvSwitchTimerLists+0xc4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1b0      	bne.n	8004424 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80044c2:	4b07      	ldr	r3, [pc, #28]	@ (80044e0 <prvSwitchTimerLists+0xc4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80044c8:	4b06      	ldr	r3, [pc, #24]	@ (80044e4 <prvSwitchTimerLists+0xc8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a04      	ldr	r2, [pc, #16]	@ (80044e0 <prvSwitchTimerLists+0xc4>)
 80044ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80044d0:	4a04      	ldr	r2, [pc, #16]	@ (80044e4 <prvSwitchTimerLists+0xc8>)
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	6013      	str	r3, [r2, #0]
}
 80044d6:	bf00      	nop
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20000cfc 	.word	0x20000cfc
 80044e4:	20000d00 	.word	0x20000d00

080044e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80044ee:	f000 f96b 	bl	80047c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80044f2:	4b15      	ldr	r3, [pc, #84]	@ (8004548 <prvCheckForValidListAndQueue+0x60>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d120      	bne.n	800453c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80044fa:	4814      	ldr	r0, [pc, #80]	@ (800454c <prvCheckForValidListAndQueue+0x64>)
 80044fc:	f7fd ffe0 	bl	80024c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004500:	4813      	ldr	r0, [pc, #76]	@ (8004550 <prvCheckForValidListAndQueue+0x68>)
 8004502:	f7fd ffdd 	bl	80024c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004506:	4b13      	ldr	r3, [pc, #76]	@ (8004554 <prvCheckForValidListAndQueue+0x6c>)
 8004508:	4a10      	ldr	r2, [pc, #64]	@ (800454c <prvCheckForValidListAndQueue+0x64>)
 800450a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800450c:	4b12      	ldr	r3, [pc, #72]	@ (8004558 <prvCheckForValidListAndQueue+0x70>)
 800450e:	4a10      	ldr	r2, [pc, #64]	@ (8004550 <prvCheckForValidListAndQueue+0x68>)
 8004510:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004512:	2300      	movs	r3, #0
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	4b11      	ldr	r3, [pc, #68]	@ (800455c <prvCheckForValidListAndQueue+0x74>)
 8004518:	4a11      	ldr	r2, [pc, #68]	@ (8004560 <prvCheckForValidListAndQueue+0x78>)
 800451a:	2110      	movs	r1, #16
 800451c:	200a      	movs	r0, #10
 800451e:	f7fe f8ed 	bl	80026fc <xQueueGenericCreateStatic>
 8004522:	4603      	mov	r3, r0
 8004524:	4a08      	ldr	r2, [pc, #32]	@ (8004548 <prvCheckForValidListAndQueue+0x60>)
 8004526:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004528:	4b07      	ldr	r3, [pc, #28]	@ (8004548 <prvCheckForValidListAndQueue+0x60>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004530:	4b05      	ldr	r3, [pc, #20]	@ (8004548 <prvCheckForValidListAndQueue+0x60>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	490b      	ldr	r1, [pc, #44]	@ (8004564 <prvCheckForValidListAndQueue+0x7c>)
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe fd12 	bl	8002f60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800453c:	f000 f976 	bl	800482c <vPortExitCritical>
}
 8004540:	bf00      	nop
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20000d04 	.word	0x20000d04
 800454c:	20000cd4 	.word	0x20000cd4
 8004550:	20000ce8 	.word	0x20000ce8
 8004554:	20000cfc 	.word	0x20000cfc
 8004558:	20000d00 	.word	0x20000d00
 800455c:	20000db0 	.word	0x20000db0
 8004560:	20000d10 	.word	0x20000d10
 8004564:	08004ec4 	.word	0x08004ec4

08004568 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3b04      	subs	r3, #4
 8004578:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004580:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3b04      	subs	r3, #4
 8004586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f023 0201 	bic.w	r2, r3, #1
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	3b04      	subs	r3, #4
 8004596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004598:	4a0c      	ldr	r2, [pc, #48]	@ (80045cc <pxPortInitialiseStack+0x64>)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3b14      	subs	r3, #20
 80045a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3b04      	subs	r3, #4
 80045ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f06f 0202 	mvn.w	r2, #2
 80045b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	3b20      	subs	r3, #32
 80045bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045be:	68fb      	ldr	r3, [r7, #12]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	080045d1 	.word	0x080045d1

080045d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045da:	4b13      	ldr	r3, [pc, #76]	@ (8004628 <prvTaskExitError+0x58>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e2:	d00b      	beq.n	80045fc <prvTaskExitError+0x2c>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	60fb      	str	r3, [r7, #12]
}
 80045f6:	bf00      	nop
 80045f8:	bf00      	nop
 80045fa:	e7fd      	b.n	80045f8 <prvTaskExitError+0x28>
	__asm volatile
 80045fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004600:	f383 8811 	msr	BASEPRI, r3
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	60bb      	str	r3, [r7, #8]
}
 800460e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004610:	bf00      	nop
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0fc      	beq.n	8004612 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004618:	bf00      	nop
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	2000000c 	.word	0x2000000c
 800462c:	00000000 	.word	0x00000000

08004630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004630:	4b07      	ldr	r3, [pc, #28]	@ (8004650 <pxCurrentTCBConst2>)
 8004632:	6819      	ldr	r1, [r3, #0]
 8004634:	6808      	ldr	r0, [r1, #0]
 8004636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800463a:	f380 8809 	msr	PSP, r0
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f04f 0000 	mov.w	r0, #0
 8004646:	f380 8811 	msr	BASEPRI, r0
 800464a:	4770      	bx	lr
 800464c:	f3af 8000 	nop.w

08004650 <pxCurrentTCBConst2>:
 8004650:	200007d4 	.word	0x200007d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop

08004658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004658:	4808      	ldr	r0, [pc, #32]	@ (800467c <prvPortStartFirstTask+0x24>)
 800465a:	6800      	ldr	r0, [r0, #0]
 800465c:	6800      	ldr	r0, [r0, #0]
 800465e:	f380 8808 	msr	MSP, r0
 8004662:	f04f 0000 	mov.w	r0, #0
 8004666:	f380 8814 	msr	CONTROL, r0
 800466a:	b662      	cpsie	i
 800466c:	b661      	cpsie	f
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	df00      	svc	0
 8004678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800467a:	bf00      	nop
 800467c:	e000ed08 	.word	0xe000ed08

08004680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004686:	4b47      	ldr	r3, [pc, #284]	@ (80047a4 <xPortStartScheduler+0x124>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a47      	ldr	r2, [pc, #284]	@ (80047a8 <xPortStartScheduler+0x128>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d10b      	bne.n	80046a8 <xPortStartScheduler+0x28>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	613b      	str	r3, [r7, #16]
}
 80046a2:	bf00      	nop
 80046a4:	bf00      	nop
 80046a6:	e7fd      	b.n	80046a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046a8:	4b3e      	ldr	r3, [pc, #248]	@ (80047a4 <xPortStartScheduler+0x124>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a3f      	ldr	r2, [pc, #252]	@ (80047ac <xPortStartScheduler+0x12c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d10b      	bne.n	80046ca <xPortStartScheduler+0x4a>
	__asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	60fb      	str	r3, [r7, #12]
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop
 80046c8:	e7fd      	b.n	80046c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046ca:	4b39      	ldr	r3, [pc, #228]	@ (80047b0 <xPortStartScheduler+0x130>)
 80046cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	22ff      	movs	r2, #255	@ 0xff
 80046da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	4b31      	ldr	r3, [pc, #196]	@ (80047b4 <xPortStartScheduler+0x134>)
 80046f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046f2:	4b31      	ldr	r3, [pc, #196]	@ (80047b8 <xPortStartScheduler+0x138>)
 80046f4:	2207      	movs	r2, #7
 80046f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046f8:	e009      	b.n	800470e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80046fa:	4b2f      	ldr	r3, [pc, #188]	@ (80047b8 <xPortStartScheduler+0x138>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3b01      	subs	r3, #1
 8004700:	4a2d      	ldr	r2, [pc, #180]	@ (80047b8 <xPortStartScheduler+0x138>)
 8004702:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004704:	78fb      	ldrb	r3, [r7, #3]
 8004706:	b2db      	uxtb	r3, r3
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	b2db      	uxtb	r3, r3
 800470c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800470e:	78fb      	ldrb	r3, [r7, #3]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004716:	2b80      	cmp	r3, #128	@ 0x80
 8004718:	d0ef      	beq.n	80046fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800471a:	4b27      	ldr	r3, [pc, #156]	@ (80047b8 <xPortStartScheduler+0x138>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f1c3 0307 	rsb	r3, r3, #7
 8004722:	2b04      	cmp	r3, #4
 8004724:	d00b      	beq.n	800473e <xPortStartScheduler+0xbe>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	60bb      	str	r3, [r7, #8]
}
 8004738:	bf00      	nop
 800473a:	bf00      	nop
 800473c:	e7fd      	b.n	800473a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800473e:	4b1e      	ldr	r3, [pc, #120]	@ (80047b8 <xPortStartScheduler+0x138>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	4a1c      	ldr	r2, [pc, #112]	@ (80047b8 <xPortStartScheduler+0x138>)
 8004746:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004748:	4b1b      	ldr	r3, [pc, #108]	@ (80047b8 <xPortStartScheduler+0x138>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004750:	4a19      	ldr	r2, [pc, #100]	@ (80047b8 <xPortStartScheduler+0x138>)
 8004752:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	b2da      	uxtb	r2, r3
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800475c:	4b17      	ldr	r3, [pc, #92]	@ (80047bc <xPortStartScheduler+0x13c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a16      	ldr	r2, [pc, #88]	@ (80047bc <xPortStartScheduler+0x13c>)
 8004762:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004766:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004768:	4b14      	ldr	r3, [pc, #80]	@ (80047bc <xPortStartScheduler+0x13c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a13      	ldr	r2, [pc, #76]	@ (80047bc <xPortStartScheduler+0x13c>)
 800476e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004772:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004774:	f000 f8da 	bl	800492c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004778:	4b11      	ldr	r3, [pc, #68]	@ (80047c0 <xPortStartScheduler+0x140>)
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800477e:	f000 f8f9 	bl	8004974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004782:	4b10      	ldr	r3, [pc, #64]	@ (80047c4 <xPortStartScheduler+0x144>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a0f      	ldr	r2, [pc, #60]	@ (80047c4 <xPortStartScheduler+0x144>)
 8004788:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800478c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800478e:	f7ff ff63 	bl	8004658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004792:	f7ff f83d 	bl	8003810 <vTaskSwitchContext>
	prvTaskExitError();
 8004796:	f7ff ff1b 	bl	80045d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	e000ed00 	.word	0xe000ed00
 80047a8:	410fc271 	.word	0x410fc271
 80047ac:	410fc270 	.word	0x410fc270
 80047b0:	e000e400 	.word	0xe000e400
 80047b4:	20000e00 	.word	0x20000e00
 80047b8:	20000e04 	.word	0x20000e04
 80047bc:	e000ed20 	.word	0xe000ed20
 80047c0:	2000000c 	.word	0x2000000c
 80047c4:	e000ef34 	.word	0xe000ef34

080047c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	607b      	str	r3, [r7, #4]
}
 80047e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047e2:	4b10      	ldr	r3, [pc, #64]	@ (8004824 <vPortEnterCritical+0x5c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3301      	adds	r3, #1
 80047e8:	4a0e      	ldr	r2, [pc, #56]	@ (8004824 <vPortEnterCritical+0x5c>)
 80047ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004824 <vPortEnterCritical+0x5c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d110      	bne.n	8004816 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004828 <vPortEnterCritical+0x60>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00b      	beq.n	8004816 <vPortEnterCritical+0x4e>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	603b      	str	r3, [r7, #0]
}
 8004810:	bf00      	nop
 8004812:	bf00      	nop
 8004814:	e7fd      	b.n	8004812 <vPortEnterCritical+0x4a>
	}
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	2000000c 	.word	0x2000000c
 8004828:	e000ed04 	.word	0xe000ed04

0800482c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004832:	4b12      	ldr	r3, [pc, #72]	@ (800487c <vPortExitCritical+0x50>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10b      	bne.n	8004852 <vPortExitCritical+0x26>
	__asm volatile
 800483a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	607b      	str	r3, [r7, #4]
}
 800484c:	bf00      	nop
 800484e:	bf00      	nop
 8004850:	e7fd      	b.n	800484e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004852:	4b0a      	ldr	r3, [pc, #40]	@ (800487c <vPortExitCritical+0x50>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3b01      	subs	r3, #1
 8004858:	4a08      	ldr	r2, [pc, #32]	@ (800487c <vPortExitCritical+0x50>)
 800485a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800485c:	4b07      	ldr	r3, [pc, #28]	@ (800487c <vPortExitCritical+0x50>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d105      	bne.n	8004870 <vPortExitCritical+0x44>
 8004864:	2300      	movs	r3, #0
 8004866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	f383 8811 	msr	BASEPRI, r3
}
 800486e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	2000000c 	.word	0x2000000c

08004880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004880:	f3ef 8009 	mrs	r0, PSP
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	4b15      	ldr	r3, [pc, #84]	@ (80048e0 <pxCurrentTCBConst>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	f01e 0f10 	tst.w	lr, #16
 8004890:	bf08      	it	eq
 8004892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489a:	6010      	str	r0, [r2, #0]
 800489c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80048a4:	f380 8811 	msr	BASEPRI, r0
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f7fe ffae 	bl	8003810 <vTaskSwitchContext>
 80048b4:	f04f 0000 	mov.w	r0, #0
 80048b8:	f380 8811 	msr	BASEPRI, r0
 80048bc:	bc09      	pop	{r0, r3}
 80048be:	6819      	ldr	r1, [r3, #0]
 80048c0:	6808      	ldr	r0, [r1, #0]
 80048c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c6:	f01e 0f10 	tst.w	lr, #16
 80048ca:	bf08      	it	eq
 80048cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048d0:	f380 8809 	msr	PSP, r0
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	f3af 8000 	nop.w

080048e0 <pxCurrentTCBConst>:
 80048e0:	200007d4 	.word	0x200007d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop

080048e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	607b      	str	r3, [r7, #4]
}
 8004900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004902:	f7fe fecb 	bl	800369c <xTaskIncrementTick>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800490c:	4b06      	ldr	r3, [pc, #24]	@ (8004928 <xPortSysTickHandler+0x40>)
 800490e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	2300      	movs	r3, #0
 8004916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	f383 8811 	msr	BASEPRI, r3
}
 800491e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004930:	4b0b      	ldr	r3, [pc, #44]	@ (8004960 <vPortSetupTimerInterrupt+0x34>)
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004936:	4b0b      	ldr	r3, [pc, #44]	@ (8004964 <vPortSetupTimerInterrupt+0x38>)
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800493c:	4b0a      	ldr	r3, [pc, #40]	@ (8004968 <vPortSetupTimerInterrupt+0x3c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a0a      	ldr	r2, [pc, #40]	@ (800496c <vPortSetupTimerInterrupt+0x40>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	099b      	lsrs	r3, r3, #6
 8004948:	4a09      	ldr	r2, [pc, #36]	@ (8004970 <vPortSetupTimerInterrupt+0x44>)
 800494a:	3b01      	subs	r3, #1
 800494c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800494e:	4b04      	ldr	r3, [pc, #16]	@ (8004960 <vPortSetupTimerInterrupt+0x34>)
 8004950:	2207      	movs	r2, #7
 8004952:	601a      	str	r2, [r3, #0]
}
 8004954:	bf00      	nop
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	e000e010 	.word	0xe000e010
 8004964:	e000e018 	.word	0xe000e018
 8004968:	20000000 	.word	0x20000000
 800496c:	10624dd3 	.word	0x10624dd3
 8004970:	e000e014 	.word	0xe000e014

08004974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004974:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004984 <vPortEnableVFP+0x10>
 8004978:	6801      	ldr	r1, [r0, #0]
 800497a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800497e:	6001      	str	r1, [r0, #0]
 8004980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004982:	bf00      	nop
 8004984:	e000ed88 	.word	0xe000ed88

08004988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800498e:	f3ef 8305 	mrs	r3, IPSR
 8004992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b0f      	cmp	r3, #15
 8004998:	d915      	bls.n	80049c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800499a:	4a18      	ldr	r2, [pc, #96]	@ (80049fc <vPortValidateInterruptPriority+0x74>)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049a4:	4b16      	ldr	r3, [pc, #88]	@ (8004a00 <vPortValidateInterruptPriority+0x78>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	7afa      	ldrb	r2, [r7, #11]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d20b      	bcs.n	80049c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	607b      	str	r3, [r7, #4]
}
 80049c0:	bf00      	nop
 80049c2:	bf00      	nop
 80049c4:	e7fd      	b.n	80049c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004a04 <vPortValidateInterruptPriority+0x7c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80049ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004a08 <vPortValidateInterruptPriority+0x80>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d90b      	bls.n	80049ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80049d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049da:	f383 8811 	msr	BASEPRI, r3
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	603b      	str	r3, [r7, #0]
}
 80049e8:	bf00      	nop
 80049ea:	bf00      	nop
 80049ec:	e7fd      	b.n	80049ea <vPortValidateInterruptPriority+0x62>
	}
 80049ee:	bf00      	nop
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	e000e3f0 	.word	0xe000e3f0
 8004a00:	20000e00 	.word	0x20000e00
 8004a04:	e000ed0c 	.word	0xe000ed0c
 8004a08:	20000e04 	.word	0x20000e04

08004a0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08a      	sub	sp, #40	@ 0x28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a18:	f7fe fd84 	bl	8003524 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a1c:	4b5c      	ldr	r3, [pc, #368]	@ (8004b90 <pvPortMalloc+0x184>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a24:	f000 f924 	bl	8004c70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a28:	4b5a      	ldr	r3, [pc, #360]	@ (8004b94 <pvPortMalloc+0x188>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f040 8095 	bne.w	8004b60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01e      	beq.n	8004a7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4413      	add	r3, r2
 8004a42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d015      	beq.n	8004a7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f023 0307 	bic.w	r3, r3, #7
 8004a54:	3308      	adds	r3, #8
 8004a56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00b      	beq.n	8004a7a <pvPortMalloc+0x6e>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	617b      	str	r3, [r7, #20]
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	e7fd      	b.n	8004a76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d06f      	beq.n	8004b60 <pvPortMalloc+0x154>
 8004a80:	4b45      	ldr	r3, [pc, #276]	@ (8004b98 <pvPortMalloc+0x18c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d86a      	bhi.n	8004b60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a8a:	4b44      	ldr	r3, [pc, #272]	@ (8004b9c <pvPortMalloc+0x190>)
 8004a8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a8e:	4b43      	ldr	r3, [pc, #268]	@ (8004b9c <pvPortMalloc+0x190>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a94:	e004      	b.n	8004aa0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d903      	bls.n	8004ab2 <pvPortMalloc+0xa6>
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f1      	bne.n	8004a96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ab2:	4b37      	ldr	r3, [pc, #220]	@ (8004b90 <pvPortMalloc+0x184>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d051      	beq.n	8004b60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2208      	movs	r2, #8
 8004ac2:	4413      	add	r3, r2
 8004ac4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	1ad2      	subs	r2, r2, r3
 8004ad6:	2308      	movs	r3, #8
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d920      	bls.n	8004b20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00b      	beq.n	8004b08 <pvPortMalloc+0xfc>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	613b      	str	r3, [r7, #16]
}
 8004b02:	bf00      	nop
 8004b04:	bf00      	nop
 8004b06:	e7fd      	b.n	8004b04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	1ad2      	subs	r2, r2, r3
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b1a:	69b8      	ldr	r0, [r7, #24]
 8004b1c:	f000 f90a 	bl	8004d34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b20:	4b1d      	ldr	r3, [pc, #116]	@ (8004b98 <pvPortMalloc+0x18c>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004b98 <pvPortMalloc+0x18c>)
 8004b2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8004b98 <pvPortMalloc+0x18c>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba0 <pvPortMalloc+0x194>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d203      	bcs.n	8004b42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b3a:	4b17      	ldr	r3, [pc, #92]	@ (8004b98 <pvPortMalloc+0x18c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a18      	ldr	r2, [pc, #96]	@ (8004ba0 <pvPortMalloc+0x194>)
 8004b40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	4b13      	ldr	r3, [pc, #76]	@ (8004b94 <pvPortMalloc+0x188>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b56:	4b13      	ldr	r3, [pc, #76]	@ (8004ba4 <pvPortMalloc+0x198>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	4a11      	ldr	r2, [pc, #68]	@ (8004ba4 <pvPortMalloc+0x198>)
 8004b5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b60:	f7fe fcee 	bl	8003540 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00b      	beq.n	8004b86 <pvPortMalloc+0x17a>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	60fb      	str	r3, [r7, #12]
}
 8004b80:	bf00      	nop
 8004b82:	bf00      	nop
 8004b84:	e7fd      	b.n	8004b82 <pvPortMalloc+0x176>
	return pvReturn;
 8004b86:	69fb      	ldr	r3, [r7, #28]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3728      	adds	r7, #40	@ 0x28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20004a10 	.word	0x20004a10
 8004b94:	20004a24 	.word	0x20004a24
 8004b98:	20004a14 	.word	0x20004a14
 8004b9c:	20004a08 	.word	0x20004a08
 8004ba0:	20004a18 	.word	0x20004a18
 8004ba4:	20004a1c 	.word	0x20004a1c

08004ba8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d04f      	beq.n	8004c5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bba:	2308      	movs	r3, #8
 8004bbc:	425b      	negs	r3, r3
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	4b25      	ldr	r3, [pc, #148]	@ (8004c64 <vPortFree+0xbc>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10b      	bne.n	8004bee <vPortFree+0x46>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	60fb      	str	r3, [r7, #12]
}
 8004be8:	bf00      	nop
 8004bea:	bf00      	nop
 8004bec:	e7fd      	b.n	8004bea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00b      	beq.n	8004c0e <vPortFree+0x66>
	__asm volatile
 8004bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	60bb      	str	r3, [r7, #8]
}
 8004c08:	bf00      	nop
 8004c0a:	bf00      	nop
 8004c0c:	e7fd      	b.n	8004c0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	4b14      	ldr	r3, [pc, #80]	@ (8004c64 <vPortFree+0xbc>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4013      	ands	r3, r2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01e      	beq.n	8004c5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d11a      	bne.n	8004c5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	4b0e      	ldr	r3, [pc, #56]	@ (8004c64 <vPortFree+0xbc>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	401a      	ands	r2, r3
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c34:	f7fe fc76 	bl	8003524 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c68 <vPortFree+0xc0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4413      	add	r3, r2
 8004c42:	4a09      	ldr	r2, [pc, #36]	@ (8004c68 <vPortFree+0xc0>)
 8004c44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c46:	6938      	ldr	r0, [r7, #16]
 8004c48:	f000 f874 	bl	8004d34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c4c:	4b07      	ldr	r3, [pc, #28]	@ (8004c6c <vPortFree+0xc4>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3301      	adds	r3, #1
 8004c52:	4a06      	ldr	r2, [pc, #24]	@ (8004c6c <vPortFree+0xc4>)
 8004c54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c56:	f7fe fc73 	bl	8003540 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c5a:	bf00      	nop
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	20004a24 	.word	0x20004a24
 8004c68:	20004a14 	.word	0x20004a14
 8004c6c:	20004a20 	.word	0x20004a20

08004c70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004c7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c7c:	4b27      	ldr	r3, [pc, #156]	@ (8004d1c <prvHeapInit+0xac>)
 8004c7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00c      	beq.n	8004ca4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3307      	adds	r3, #7
 8004c8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0307 	bic.w	r3, r3, #7
 8004c96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8004d1c <prvHeapInit+0xac>)
 8004ca0:	4413      	add	r3, r2
 8004ca2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d20 <prvHeapInit+0xb0>)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cae:	4b1c      	ldr	r3, [pc, #112]	@ (8004d20 <prvHeapInit+0xb0>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	4413      	add	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cbc:	2208      	movs	r2, #8
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1a9b      	subs	r3, r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0307 	bic.w	r3, r3, #7
 8004cca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4a15      	ldr	r2, [pc, #84]	@ (8004d24 <prvHeapInit+0xb4>)
 8004cd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004cd2:	4b14      	ldr	r3, [pc, #80]	@ (8004d24 <prvHeapInit+0xb4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cda:	4b12      	ldr	r3, [pc, #72]	@ (8004d24 <prvHeapInit+0xb4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	1ad2      	subs	r2, r2, r3
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8004d24 <prvHeapInit+0xb4>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8004d28 <prvHeapInit+0xb8>)
 8004cfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	4a09      	ldr	r2, [pc, #36]	@ (8004d2c <prvHeapInit+0xbc>)
 8004d06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d08:	4b09      	ldr	r3, [pc, #36]	@ (8004d30 <prvHeapInit+0xc0>)
 8004d0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004d0e:	601a      	str	r2, [r3, #0]
}
 8004d10:	bf00      	nop
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	20000e08 	.word	0x20000e08
 8004d20:	20004a08 	.word	0x20004a08
 8004d24:	20004a10 	.word	0x20004a10
 8004d28:	20004a18 	.word	0x20004a18
 8004d2c:	20004a14 	.word	0x20004a14
 8004d30:	20004a24 	.word	0x20004a24

08004d34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d3c:	4b28      	ldr	r3, [pc, #160]	@ (8004de0 <prvInsertBlockIntoFreeList+0xac>)
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	e002      	b.n	8004d48 <prvInsertBlockIntoFreeList+0x14>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d8f7      	bhi.n	8004d42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d108      	bne.n	8004d76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	441a      	add	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	441a      	add	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d118      	bne.n	8004dbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	4b15      	ldr	r3, [pc, #84]	@ (8004de4 <prvInsertBlockIntoFreeList+0xb0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d00d      	beq.n	8004db2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	441a      	add	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	e008      	b.n	8004dc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004db2:	4b0c      	ldr	r3, [pc, #48]	@ (8004de4 <prvInsertBlockIntoFreeList+0xb0>)
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	e003      	b.n	8004dc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d002      	beq.n	8004dd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dd2:	bf00      	nop
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	20004a08 	.word	0x20004a08
 8004de4:	20004a10 	.word	0x20004a10

08004de8 <memset>:
 8004de8:	4402      	add	r2, r0
 8004dea:	4603      	mov	r3, r0
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d100      	bne.n	8004df2 <memset+0xa>
 8004df0:	4770      	bx	lr
 8004df2:	f803 1b01 	strb.w	r1, [r3], #1
 8004df6:	e7f9      	b.n	8004dec <memset+0x4>

08004df8 <__libc_init_array>:
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	4d0d      	ldr	r5, [pc, #52]	@ (8004e30 <__libc_init_array+0x38>)
 8004dfc:	4c0d      	ldr	r4, [pc, #52]	@ (8004e34 <__libc_init_array+0x3c>)
 8004dfe:	1b64      	subs	r4, r4, r5
 8004e00:	10a4      	asrs	r4, r4, #2
 8004e02:	2600      	movs	r6, #0
 8004e04:	42a6      	cmp	r6, r4
 8004e06:	d109      	bne.n	8004e1c <__libc_init_array+0x24>
 8004e08:	4d0b      	ldr	r5, [pc, #44]	@ (8004e38 <__libc_init_array+0x40>)
 8004e0a:	4c0c      	ldr	r4, [pc, #48]	@ (8004e3c <__libc_init_array+0x44>)
 8004e0c:	f000 f826 	bl	8004e5c <_init>
 8004e10:	1b64      	subs	r4, r4, r5
 8004e12:	10a4      	asrs	r4, r4, #2
 8004e14:	2600      	movs	r6, #0
 8004e16:	42a6      	cmp	r6, r4
 8004e18:	d105      	bne.n	8004e26 <__libc_init_array+0x2e>
 8004e1a:	bd70      	pop	{r4, r5, r6, pc}
 8004e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e20:	4798      	blx	r3
 8004e22:	3601      	adds	r6, #1
 8004e24:	e7ee      	b.n	8004e04 <__libc_init_array+0xc>
 8004e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2a:	4798      	blx	r3
 8004e2c:	3601      	adds	r6, #1
 8004e2e:	e7f2      	b.n	8004e16 <__libc_init_array+0x1e>
 8004e30:	08004eec 	.word	0x08004eec
 8004e34:	08004eec 	.word	0x08004eec
 8004e38:	08004eec 	.word	0x08004eec
 8004e3c:	08004ef0 	.word	0x08004ef0

08004e40 <memcpy>:
 8004e40:	440a      	add	r2, r1
 8004e42:	4291      	cmp	r1, r2
 8004e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e48:	d100      	bne.n	8004e4c <memcpy+0xc>
 8004e4a:	4770      	bx	lr
 8004e4c:	b510      	push	{r4, lr}
 8004e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e56:	4291      	cmp	r1, r2
 8004e58:	d1f9      	bne.n	8004e4e <memcpy+0xe>
 8004e5a:	bd10      	pop	{r4, pc}

08004e5c <_init>:
 8004e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5e:	bf00      	nop
 8004e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e62:	bc08      	pop	{r3}
 8004e64:	469e      	mov	lr, r3
 8004e66:	4770      	bx	lr

08004e68 <_fini>:
 8004e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6a:	bf00      	nop
 8004e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6e:	bc08      	pop	{r3}
 8004e70:	469e      	mov	lr, r3
 8004e72:	4770      	bx	lr
